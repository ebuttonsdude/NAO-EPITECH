<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="-1">
                        <Box name="RssFeed" robot="" id="12" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="204" y="32">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Start" index="1" bitmap="">
                                        <Diagram scale="80">
                                            <Box name="Choice" robot="" id="4" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="233" y="368">
                                                <bitmap>media/images/box/appu/voice_recognition.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="4" />
                                                <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="5" />
                                                <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="pc inpacte;sie n b c;bi bi sie;France info;Le monde;Quitter/sortie/stop" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="Pc inpact;C n b c; B b c;France info;Le monde;Quit/exit/stop" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="12" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tÃªte de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                    <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                    <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                    <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                    <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                    <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                    <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                    <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                    <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                    <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                    <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                    <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                    <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                    <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                    <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                    <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                    <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                    <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                    <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                    <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                    <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                </Box>
                                                                <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                    <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                        <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="765" y="14">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                </Box>
                                                                <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="1" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="381" y="374">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		elif(p == (4)):
			self.output_5(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword>4</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                            </Box>
                                            <Box name="Stop" robot="" id="6" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." bitmap_expanded="1" plugin="" x="77" y="182">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="Say" robot="" id="7" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="101" y="35">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="562" y="87">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="274" y="87">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "ä½ æ³éè¯»åªä¸ªä¿¡æ¯æºï¼"
		sEnglish = "Which R S S feed do you want to read ?"
		sFrench = "Quel flux r s s veux-tu consulter ?"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "ããã«ã¡ã¯"
		sKorean = "ìëíì¸ì "
		sPortuguese = ""
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>ä½ æ³éè¯»åªä¸ªä¿¡æ¯æºï¼</chinese>
                                                                        <english>Which R S S feed do you want to read ?</english>
                                                                        <french>Quel flux r s s veux-tu consulter ?</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>ããã«ã¡ã¯</japanese>
                                                                        <korean>ìëíì¸ì </korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Box name="SetLanguage" robot="" id="1" tooltip="Set the language for the menu" bitmap_expanded="1" plugin="" x="114" y="52">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        sLanguage = ALMemory.getData("/commercial/language")
        asr = ALProxy("ALSpeechRecognition")
        tts = ALProxy("ALTextToSpeech")
        asr.setLanguage( sLanguage )
        tts.setLanguage( sLanguage )
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Say" robot="" id="12" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="643" y="32">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "ä½ å¥½"
		sEnglish = "Do you want to leave the application ?"
		sFrench = "Voulez-vous quitter l'application ?"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "ããã«ã¡ã¯"
		sKorean = "ìëíì¸ì "
		sPortuguese = ""
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>ä½ å¥½</chinese>
                                                                        <english>Do you want to leave the application ?</english>
                                                                        <french>Voulez-vous quitter l&apos;application ?</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>ããã«ã¡ã¯</japanese>
                                                                        <korean>ìëíì¸ì </korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Choice" robot="" id="13" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="772" y="33">
                                                <bitmap>media/images/box/appu/voice_recognition.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="4" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="5" />
                                                <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="25" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="oui;non" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="yes;no" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="æ¯;ä¸" default_value="" custom_choice="0" tooltip="" id="12" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tÃªte de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                    <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                    <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                    <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                    <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                    <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                    <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                    <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                    <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                    <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                    <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                    <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                    <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                    <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                    <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                    <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                    <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                    <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                    <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                    <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                    <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                </Box>
                                                                <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                    <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                        <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                </Box>
                                                                <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="14" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="919" y="33">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="15" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="653" y="373">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("http://www.pcinpact.com/include/news.xml")
	def onInput_input_2(self):
			self.onStopped("http://www.cnbc.com/id/19746125/device/rss/rss.xml")
	def onInput_input_3(self):
			self.onStopped("http://feeds.bbci.co.uk/news/world/rss.xml")
	def onInput_input_4(self):
			self.onStopped("http://www.france-info.com/rss/accueil.xml")
	def onInput_input_5(self):
			self.onStopped("http://www.lemonde.fr/rss/tag/international.xml")
	def onInput_input_6(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;http://www.pcinpact.com/include/news.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.cnbc.com/id/19746125/device/rss/rss.xml&quot;</keyword>
                                                        <keyword>&quot;http://feeds.bbci.co.uk/news/world/rss.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.france-info.com/rss/accueil.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.lemonde.fr/rss/tag/international.xml&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Input name="input_5" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="7" />
                                            </Box>
                                            <Box name="Save" robot="" id="3" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="915" y="376">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="gotoCheckInternet" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="1084" y="373">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="CheckInternet" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Say" robot="" id="2" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="793" y="176">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "ä½ å¥½"
		sEnglish = "You can use my head to choose if you prefer"
		sFrench = "Tu peux utiliser ma tÃªte pour choisir si tu prÃ©fÃ¨res."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "ããã«ã¡ã¯"
		sKorean = "ìëíì¸ì "
		sPortuguese = "OlÃ¡"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>ä½ å¥½</chinese>
                                                                        <english>You can use my head to choose if you prefer</english>
                                                                        <french>Tu peux utiliser ma tÃªte pour choisir si tu prÃ©fÃ¨res.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>ããã«ã¡ã¯</japanese>
                                                                        <korean>ìëíì¸ì </korean>
                                                                        <portuguese>OlÃ¡</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="5" />
                                            <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="15" indexofinput="4" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="15" indexofinput="5" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="15" indexofinput="6" outputowner="1" indexofoutput="8" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="15" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="CheckInternet" index="8" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="gotoRss" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="932" y="111">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Rss" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="CheckInternet" robot="" id="9" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="197" y="111">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import urllib

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        try:
            handle = urllib.urlopen(self.getParameter("url"))
            self.onConnection(p)
        except:
            self.noConnection(p)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onConnection" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="noConnection" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="url" inherits_from_parent="0" content_type="3" value="http://www.google.com" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="2" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="323" y="173">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("http://www.pcinpact.com/include/news.xml")):
			self.output_1(p)
		elif(p == ("http://www.cnbc.com/id/19746125/device/rss/rss.xml")):
			self.output_2(p)
		elif(p == ("http://feeds.bbci.co.uk/news/world/rss.xml")):
			self.output_3(p)
		elif(p == ("http://www.france-info.com/rss/accueil.xml")):
			self.output_4(p)
		elif(p == ("http://www.lemonde.fr/rss/tag/international.xml")):
			self.output_5(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;http://www.pcinpact.com/include/news.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.cnbc.com/id/19746125/device/rss/rss.xml&quot;</keyword>
                                                        <keyword>&quot;http://feeds.bbci.co.uk/news/world/rss.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.france-info.com/rss/accueil.xml&quot;</keyword>
                                                        <keyword>&quot;http://www.lemonde.fr/rss/tag/international.xml&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="8" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="548" y="173">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("pcinpact.xml")
	def onInput_input_2(self):
			self.onStopped("cnbc.xml")
	def onInput_input_3(self):
			self.onStopped("bbc.xml")
	def onInput_input_4(self):
			self.onStopped("france-info.xml")
	def onInput_input_5(self):
			self.onStopped("le-monde.xml")
	def onInput_input_6(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;pcinpact.xml&quot;</keyword>
                                                        <keyword>&quot;cnbc.xml&quot;</keyword>
                                                        <keyword>&quot;bbc.xml&quot;</keyword>
                                                        <keyword>&quot;france-info.xml&quot;</keyword>
                                                        <keyword>&quot;le-monde.xml&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Input name="input_5" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="7" />
                                            </Box>
                                            <Box name="Read" robot="" id="12" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="67" y="81">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="SaveLocal" robot="" id="3" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="777" y="173">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), ALFrameManager.getBehaviorPath(self.behaviorId) + "/" + p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="4" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="5" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="8" indexofinput="6" outputowner="2" indexofoutput="8" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="7" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Rss" index="20" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Rss" robot="" id="1" tooltip="Opens a Rss flux." bitmap_expanded="1" plugin="" x="225" y="20">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.rss = None
        self.nIndex = None
        
    def onLoad(self):
        path1 = ALFrameManager.getBehaviorPath(self.behaviorId)
        if path1 not in sys.path:
            sys.path.append(path1)

    def onUnload(self):
        pass

    def get_title(self, step):
        if self.rss != None and len(self.rss.entries)>0:
            self.nIndex = self.nIndex % len(self.rss.entries)
            self.nIndex += step            
            return self.rss.entries[self.nIndex].title.encode('utf-8').replace("...", ".")
        
    def get_summary(self):
        if self.rss != None and len(self.rss.entries)>0:
            self.nIndex = self.nIndex % len(self.rss.entries)
            return self.rss.entries[self.nIndex].summary.encode('utf-8').replace("...", ".")
        
    def onInput_onNext(self):
        self.onTitle(self.get_title(1))

    def onInput_onPrevious(self):
        self.onTitle(self.get_title(-1))

    def onInput_onRead(self):
        self.onSummary(self.get_summary())
            
    def onInput_onStart(self, p):
        self.nIndex = 0
        self.rss = None        

        if p==None:
            p = self.getParameter("Feed url")
        if p != None:
            import feedparser as fp
            self.rss = fp.parse(p)
            title = self.get_title(0)
            self.onLanguage(title)
    
    def onInput_onStop(self):
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onPrevious" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="onRead" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="6" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                <Output name="onLanguage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="onTitle" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="onSummary" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                <Parameter name="Feed url" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="11" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="531" y="93">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Choice" robot="" id="6" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="535" y="242">
                                                <bitmap>media/images/box/appu/voice_recognition.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="4" />
                                                <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="5" />
                                                <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="5" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="Lecture;prÃ©cÃ©dent;Quitter/Sortir/Stop" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="Read;previous;Exit/Stop" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="è¯»;è¿å;éåº/åæ­¢" default_value="" custom_choice="0" tooltip="" id="12" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tÃªte de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                    <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                    <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                    <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                    <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                    <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                    <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                    <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                    <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                    <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                    <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                    <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                    <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                    <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                    <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                    <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                    <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                    <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                    <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                    <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                    <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                </Box>
                                                                <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="450" y="106">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        #~ self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                    <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                        <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="772" y="11">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                </Box>
                                                                <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="8" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Read" robot="" id="12" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="85" y="20">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="929" y="286">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="FindLanguage" robot="" id="3" tooltip="Guess the language of the input string. (French or English)" bitmap_expanded="1" plugin="" x="389" y="20">
                                                <bitmap>media/images/box/icons_appu/find_guess.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import sys

class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.bStarted = False
    self.languageProcessing = None
    
    def onLoad(self):
        path1 = ALFrameManager.getBehaviorPath(self.behaviorId)
        if path1 not in sys.path:
            sys.path.append(path1)
        self.bStarted = False

  def onUnload(self):
    pass

  def onInput_onStart(self, p):
    if self.bStarted:
      return
    self.bStarted = True
    if self.languageProcessing == None:
        import languageProcessing
        self.languageProcessing = languageProcessing.LanguageProcessing(ALFrameManager.getBehaviorPath(self.behaviorId))
        
    sLanguage = self.languageProcessing.findEnglishOrFrench(p)

    # Change current language according to the input text language        
    asr = ALProxy("ALSpeechRecognition")
    tts = ALProxy("ALTextToSpeech")
    asr.setLanguage( sLanguage )
    tts.setLanguage( sLanguage )

    self.bStarted = False
    self.onStopped(p)
      

  def onInput_onStop(self):
    pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="The text to analyse." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="The name of the language." id="4" />
                                            </Box>
                                            <Box name="gotoNoSnake" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="696" y="21">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="NoSnake" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="693" y="242">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="7" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="228" y="199">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" />
                                            <Link inputowner="1" indexofinput="2" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="5" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="9" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="10" />
                                            <Link inputowner="1" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="4" outputowner="8" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="Snake" index="8" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="HeadEffects" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="111" y="26">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="NoSnake" index="26" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
