<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="-1">
                        <Box name="UseBall" robot="" id="1" tooltip="Load the demos using a ball." bitmap_expanded="1" plugin="" x="177" y="63">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Start" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="2" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="82" y="206">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "�??可以追踪��?"
		sEnglish = "I can track a ball"
		sFrench = "Je peux suivre une balle"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>�??可以追踪��?</chinese>
                                                    <english>I can track a ball</english>
                                                    <french>Je peux suivre une balle</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="4" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="333" y="184">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="5" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="1013" y="22">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bRunning = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        if self.bRunning:
            return
            
        self.bRunning = True
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        self.bRunning = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="6" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="1023" y="133">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Stop" robot="" id="1" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." bitmap_expanded="1" plugin="" x="89" y="76">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.stopTimelineParent()

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="8" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="1036" y="357">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="LocalizedText" robot="" id="7" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="312" y="321">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "并��?�?���?��?示�?��??�??平衡�?�"
		sEnglish = "show you my balance"
		sFrench = "te montrer mon déhanché"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>并��?�?���?��?示�?��??�??平衡�?�</chinese>
                                                    <english>show you my balance</english>
                                                    <french>te montrer mon déhanché</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="9" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="593" y="300">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                            </Box>
                                            <Box name="Wait" robot="" id="3" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="730" y="118">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="LocalizedText" robot="" id="10" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="527" y="442">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "并��?�?���?��?示�?��??�??平衡�?�"
		sEnglish = "and even play soccer"
		sFrench = "et même jouer au foot"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>并��?�?���?��?示�?��??�??平衡�?�</chinese>
                                                    <english>and even play soccer</english>
                                                    <french>et même jouer au foot</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="11" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="1034" y="237">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait" robot="" id="12" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="856" y="203">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="13" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="883" y="353">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                            </Box>
                                            <Box name="Stand" robot="" id="15" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="67" y="405">
                                                <bitmap>media/images/box/movement/move_head.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232025" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406935" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Balance" index="9" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="WB Tracker" robot="" id="8" tooltip="This box is dedicated to track a target with Nao&apos;s camera using Whole Body (WB) constraints.&#x0A;In this mode, the robot try to keep an initial position and the feet are fixed on the ground.&#x0A;The target can be set in the parameters and could be a red ball with a radius of 6cm or a human face." bitmap_expanded="1" plugin="" x="475" y="79">
                                                <bitmap>media/images/box/tracker/whole_body_tracker.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import math
import motion
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.trackerProxy = None
        self.motionProxy =  ALProxy("ALMotion")
        self.running = False
        self.lost = True
        self.track = False
        self.threadTime = 0.2
        self.countLost = 0

    def onLoad(self):
        pass

    def onUnload(self):
        if self.running:
            self.running = False
            while self.trackerProxy != None:
                time.sleep(self.threadTime)
                self.log("Waiting for tracker to stop")

    def onInput_onStart(self):
        # When not yet running, create the tracker
        if not self.running:
            self.running = True        
            TargetName = self.getParameter("Target choice")
            if TargetName == "Red Ball":
                self.trackerProxy = ALProxy("ALRedBallTracker")
            elif TargetName == "Face":
                self.trackerProxy = ALProxy("ALFaceTracker")

            # Activate the tracker and start from init pose
            if self.trackerProxy != None:
                if self.trackerProxy.isActive() == False:
                    self.PoseInit()
                    self.trackerProxy.setWholeBodyOn(True)
                    self.trackerProxy.startTracker()
                    self.getTargetInformation()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def getTargetInformation(self):
        # If no valid tracker then return
        if self.trackerProxy == None:
            return
            
        while self.running:
            if self.trackerProxy.isNewData():
                self.countLost = 0
                if self.track == False:
                    self.track = True
                    self.lost = False
                    self.isTrack()
                self.trackerProxy.getPosition()
            else:
                self.countLost = self.countLost + 1
                if(self.countLost*self.threadTime > self.getParameter("Time before lost")):
                    if (self.lost == False):
                        self.lost = True
                        self.track = False
                        self.isLost()
            time.sleep(self.threadTime)

        # Stop tracker
        self.trackerProxy.stopTracker()
        self.trackerProxy = None

    def PoseInit(self):
        #Get the Number of Joints
        NumJoints = len(self.motionProxy.getJointNames("Body"))
        # Define The Initial Position
        kneeAngle = 40.0
        LeftArm  = [120,  15, -90, -80]
        LeftLeg  = [0, 0, -kneeAngle/2, kneeAngle, -kneeAngle/2, 0]
        RightLeg = [0, 0, -kneeAngle/2, kneeAngle, -kneeAngle/2,  0]
        RightArm = [120, -15,  90,  80]
        # If we have hands, we need to add angles for wrist and open/close hand
        if (NumJoints == 26):
            LeftArm  += [0, 0]
            RightArm += [0, 0]
        InitialPosition = LeftArm + LeftLeg + RightLeg + RightArm
        # Go back to radians:
        InitialPosition = [ x * motion.TO_RAD for x in InitialPosition]
        #We use the "Body" name to signify the collection of all joints
        pNames = self.motionProxy.getJointNames("LArm") + self.motionProxy.getJointNames("LLeg") + self.motionProxy.getJointNames("RLeg") + self.motionProxy.getJointNames("RArm")
        #We set the fraction of max speed
        pMaxSpeedFraction = 0.3
        #Ask motion to do this with a blocking call
        self.motionProxy.angleInterpolationWithSpeed(pNames, InitialPosition, pMaxSpeedFraction)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="isLost" type="1" type_size="1" nature="2" inner="0" tooltip='A signal is sent every time Nao looses the target. &#x0A;Note: the wait time before this signal is sent is defined in the &quot;Time before lost&quot; parameter.' id="5" />
                                                <Output name="isTrack" type="1" type_size="1" nature="2" inner="0" tooltip="A signal is sent when Nao begin to track the target. The signal is stimulated every time it starts the tracking of the target.&#x0A;&#x0A;" id="6" />
                                                <Parameter name="Target choice" inherits_from_parent="0" content_type="3" value="Red Ball" default_value="Red Ball" custom_choice="0" tooltip='This parameter is used to define which target to track.&#x0A;Possible choice is &quot;Red Ball&quot; or &quot;Face&quot;.' id="7">
                                                    <Choice value="Red Ball" />
                                                    <Choice value="Face" />
                                                </Parameter>
                                                <Parameter name="Time before lost" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5" tooltip='This parameter define a time in second.&#x0A;If the detection time between two targets is greater than the &quot;Time before lost&quot; the output of the box &quot;isLost&quot; is stimulated.&#x0A;' id="8" />
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="GreenEyes" robot="" id="7" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="629" y="147">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.5" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="122" y="82">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#00ff00</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="333" y="109">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="WhiteEyes" robot="" id="1" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="629" y="54">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.5" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="122" y="82">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="333" y="109">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="6" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="760" y="9">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Save" robot="" id="4" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="340" y="239">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Save
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/current" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="3" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="107" y="236">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Balance")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Balance</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Stand" robot="" id="2" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="301" y="82">
                                                <bitmap>media/images/positions/Stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232026" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406934" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Select Camera" robot="" id="14" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="120" y="88">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="6" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="WalkTracker" index="18" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="GreenEyes" robot="" id="7" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="611" y="142">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.5" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="122" y="82">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#00ff00</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="333" y="109">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="WhiteEyes" robot="" id="1" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="611" y="49">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.5" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="122" y="82">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="333" y="109">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="6" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="749" y="6">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Walk Tracker" robot="" id="2" tooltip="This box is dedicated to make NAO walk toward a predefined target.&#x0A;First, NAO tracks the target with his head and then sends information to the walk engine to make NAO&#x0A;walk toward the target.&#x0A;&#x0A;Note: The target can be set in the parameters and could be either a red ball with a radius of 6cm or a&#x0A;human face." bitmap_expanded="1" plugin="" x="457" y="85">
                                                <bitmap>media/images/box/tracker/walk_tracker.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                                <Output name="foundTarget" type="1" type_size="1" nature="2" inner="0" tooltip="A signal is sent when NAO starts to track the target. The signal is stimulated every&#x0A;time it starts the tracking of the target." id="5" />
                                                <Output name="isLost" type="1" type_size="1" nature="2" inner="0" tooltip='A signal is sent every time NAO looses the target. &#x0A;Note: the wait time before this signal is sent is defined in the &quot;Time before lost&quot; parameter.' id="6" />
                                                <Parameter name="Target choice" inherits_from_parent="0" content_type="3" value="Red Ball" default_value="Red Ball" custom_choice="0" tooltip="This parameter is used to define which target to track." id="7">
                                                    <Choice value="Red Ball" />
                                                    <Choice value="Face" />
                                                </Parameter>
                                                <Parameter name="Threshold for walk forward" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0" max="1" tooltip="This parameter defines the distance threshold in meters to make NAO walk&#x0A;forward." id="8" />
                                                <Parameter name="Threshold for walk backward" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="This parameter defines the distance threshold in meters to make NAO walk&#x0A;backward." id="9" />
                                                <Parameter name="Time before lost (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5" tooltip="If there is no detection of the target after this period of time, then the target is&#x0A;considered as lost and the isLost output is activated." id="10" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Tracker" robot="" id="7" tooltip="This box is dedicated to track a target using the two head joints.&#x0A;The target can be set in the parameters and could be either a red ball with a radius&#x0A;of 6cm or a human face." bitmap_expanded="1" plugin="" x="201" y="115">
                                                                    <bitmap>media/images/box/tracker/tracker.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.trackerProxy = None
        self.motionProxy =  ALProxy("ALMotion")
        self.lost = True
        self.track = False
        self.threadTime = 0.2
        self.countLost = 0

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bMustStop = True
        if (self.bIsRunning):
            time.sleep(self.threadTime)
            if(self.trackerProxy != None):
                if(self.trackerProxy.isActive()):
                    self.trackerProxy.stopTracker()
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        if(not self.bIsRunning):
            self.bIsRunning = True
            self.bMustStop = False
            try:
                TargetName = self.getParameter("Target choice")
                if (TargetName == "Red Ball"):
                    self.trackerProxy = ALProxy("ALRedBallTracker")
                else:
                    self.trackerProxy = ALProxy("ALFaceTracker")
                if( self.trackerProxy != None and not self.bMustStop ):
                    if( not self.trackerProxy.isActive() ):
                        self.trackerProxy.setWholeBodyOn(False)
                        self.trackerProxy.startTracker()
                        while( not self.bMustStop ):
                            self.getTargetInformation()
                            if( not self.bMustStop ):
                                time.sleep(self.threadTime)
            finally:
                self.onStopped()
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def getTargetInformation(self):
        if(self.trackerProxy != None):
            if (self.trackerProxy.isNewData()):
                self.countLost = 0
                if( not self.track ):
                    self.track = True
                    self.lost = False
                    self.foundTarget()
                targetPosition = self.trackerProxy.getPosition()
                #output target angle
                self.position(targetPosition)
            else:
                self.countLost = self.countLost + 1
                if(self.countLost*self.threadTime > self.getParameter("Time before lost (s)")):
                    if ( not self.lost ):
                        self.lost = True
                        self.track = False
                        self.isLost()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="foundTarget" type="1" type_size="1" nature="2" inner="0" tooltip="A signal is sent when NAO starts to track the target. The signal is stimulated every&#x0A;time it starts the tracking of the target." id="5" />
                                                                    <Output name="position" type="2" type_size="3" nature="2" inner="0" tooltip="This output is the target position (x, y, z) in NAO_SPACE." id="6" />
                                                                    <Output name="isLost" type="1" type_size="1" nature="2" inner="0" tooltip='A signal is sent every time NAO looses the target. &#x0A;Note: the wait time before this signal is sent is defined in the &quot;Time before lost&quot; parameter.' id="7" />
                                                                    <Parameter name="Target choice" inherits_from_parent="1" content_type="3" value="Red Ball" default_value="Red Ball" custom_choice="0" tooltip="This parameter is used to define which target to track." id="8">
                                                                        <Choice value="Red Ball" />
                                                                        <Choice value="Face" />
                                                                    </Parameter>
                                                                    <Parameter name="Time before lost (s)" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="0" max="5" tooltip="If there is no detection after this period of time, then the target is considered as lost&#x0A;and the isLost output is activated." id="9" />
                                                                </Box>
                                                                <Box name="WalkToTarget" robot="" id="11" tooltip="This box is dedicated to make NAO walk toward a target which position is received on its second&#x0A;input." bitmap_expanded="1" plugin="" x="375" y="19">
                                                                    <bitmap>media/images/box/tracker/walk_to_target.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time
import math
import motion

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motionProxy = ALProxy("ALMotion")
        self.threadTime = 0.1
        self.retard = 1.0 #second
        self.thresholdTheta  = 10*motion.TO_RAD
        self.stepFrequency = 1.0
        self.minStepPeriod = 21
        self.maxStepPeriod = 30
        self.stepPeriod = 21
        self.theta = 0.0
        self.targetTheta = 0.0
        self.maxTheta = 20*motion.TO_RAD
        self.maxSpeedTheta = self.maxTheta/(21*0.02)
        self.computeErrorTheta = False
        self.x = 0.0
        self.firstRobotPositionTheta = []
        
    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False

    def onUnload(self):
        self.bMustStop = True
        while( self.bIsRunning ):
            time.sleep( 0.2 )
            
    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True # launch thread
        self.bMustStop = False
        try:
            while( not self.bMustStop ):
                self.computeWalkVelocity()
                if( not self.bMustStop ):
                    time.sleep(self.threadTime)
            self.motionProxy.setWalkTargetVelocity(0.0, 0.0, 0.0, 1.0)
            self.motionProxy.setAngles("HeadYaw", 0.0, 0.2)
        finally:
            self.onStopped()
            self.bIsRunning = False

    def onInput_targetPosition(self, p):
        # Compute target distance
        targetDistance = math.sqrt( math.pow(p[0],2) +  math.pow(p[1],2) )
        targetDistance = int(targetDistance / 0.1) * 0.1
        if( targetDistance > self.getParameter("Threshold for walk forward") ):
            self.x = 1.0
        elif( targetDistance < self.getParameter("Threshold for walk backward") ):
            self.x = -1.0
        else:
            self.x = 0.0
        # Compute target angle
        targetAngle = math.atan2(p[1], p[0])
        targetAngle = int(targetAngle/(5.0*motion.TO_RAD))*(5.0*motion.TO_RAD)
        self.targetTheta = targetAngle
        self.computeErrorTheta = True
        self.firstRobotPositionTheta = self.motionProxy.getRobotPosition(False)

    def onInput_onStop(self):
        self.onUnload()

    def computeWalkVelocity(self):
        if( self.stepFrequency != self.getParameter("Step frequency") ):
            self.stepFrequency = self.getParameter("Step frequency")
            self.stepPeriod = self.maxStepPeriod - self.stepFrequency*(self.maxStepPeriod-self.minStepPeriod)
        currentRobotPosition = self.motionProxy.getRobotPosition(False)
        currentRobotVelocity = self.motionProxy.getRobotVelocity()
        # Compute theta velocity to send to the robot
        if (self.computeErrorTheta):
            # Compute Robot Position
            robotDeplacementTheta = currentRobotPosition[2] - self.firstRobotPositionTheta[2]
            # Compute robotPosition with retard second
            nextRobotTheta = currentRobotVelocity[2]*self.retard + robotDeplacementTheta
            errorTheta = self.targetTheta - nextRobotTheta
            dTheta = 0.0
            self.maxSpeedTheta = self.maxTheta/(self.stepPeriod*0.02)
            if(abs(errorTheta) <= self.thresholdTheta):
                self.computeErrorTheta = False
            else:
                self.computeErrorTheta = True
                if ( errorTheta/(self.stepPeriod*0.02) > self.maxSpeedTheta*0.5):
                    dTheta =self.maxSpeedTheta*0.5
                elif( errorTheta/(self.stepPeriod*0.02)  < -self.maxSpeedTheta*0.5):
                    dTheta = -self.maxSpeedTheta*0.5
                else:
                    dTheta = errorTheta/(self.stepPeriod*0.02)
            self.theta = dTheta/self.maxSpeedTheta
        else:
            self.theta = 0.0
        if( not self.bMustStop ):
            self.motionProxy.setWalkTargetVelocity(self.x, 0.0, self.theta, self.stepFrequency)
            if( self.x == 0 and self.theta == 0 ):
                self.motionProxy.setAngles("HeadYaw", 0.0, 0.2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="targetPosition" type="2" type_size="3" nature="1" inner="0" tooltip="The target position (x, y, z) in NAO_SPACE." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="Step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="This parameter defines the walk step frequency. Two particular values:&#x0A;* 0.0, then NAO walk slowly.&#x0A;* 1.0, then NAO walk as fast as he can." id="6" />
                                                                    <Parameter name="Threshold for walk forward" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0" max="1" tooltip="This parameter defines the distance threshold in meters to make NAO walk&#x0A;forward." id="7" />
                                                                    <Parameter name="Threshold for walk backward" inherits_from_parent="1" content_type="2" value="0.3" default_value="0.3" min="0" max="1" tooltip="This parameter defines the distance threshold in meters to make NAO walk&#x0A;backward." id="8" />
                                                                </Box>
                                                                <Link inputowner="11" indexofinput="4" outputowner="7" indexofoutput="7" />
                                                                <Link inputowner="11" indexofinput="4" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="7" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Save" robot="" id="4" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="309" y="260">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Save
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/current" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="3" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="98" y="249">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("WalkTracker")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>WalkTracker</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Stand" robot="" id="5" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="259" y="84">
                                                <bitmap>media/images/positions/Stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232026" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406934" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Select Camera" robot="" id="14" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="118" y="88">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Color" index="29" bitmap="">
                                        <Diagram scale="81">
                                            <Box name="gotoObject" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="945" y="232">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Object" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="527" y="232">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "请��?�??�??��?��?{color}��?"
		sEnglish = "Show me a {color} ball"
		sFrench = "Montre moi une balle {color}"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Enseñame una pelota {color}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>请��?�??�??��?��?{color}��?</chinese>
                                                    <english>Show me a {color} ball</english>
                                                    <french>Montre moi une balle {color}</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Enseñame una pelota {color}</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="SayColor" robot="" id="7" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="807" y="232">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        colorname = self.getParameter("colorname")
        self.log(sentence.format(color=colorname))
        id = self.tts.post.say(sentence.format(color=colorname))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Parameter name="colorname" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Multiplexer" robot="" id="8" tooltip="Depending on the stimulated input, tranmits the matching value through the main output." bitmap_expanded="1" plugin="multiplexer_plugin" x="720" y="17">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("Red")
	def onInput_input_2(self):
			self.onStopped("Yellow")
	def onInput_input_3(self):
			self.onStopped("Green")
	def onInput_input_4(self):
			self.onStopped("Blue")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Red&quot;</keyword>
                                                        <keyword>&quot;Yellow&quot;</keyword>
                                                        <keyword>&quot;Green&quot;</keyword>
                                                        <keyword>&quot;Blue&quot;</keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                            </Box>
                                            <Box name="Save" robot="" id="9" tooltip="Save head position in memory" bitmap_expanded="1" plugin="" x="932" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/soccer/ballcolor" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="ChoiceWithText" robot="" id="13" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="240" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onRecognizedIndex" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="11" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="337" y="21">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="2" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="66" y="21">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "请�??�?���?�??��?�?�"
		sEnglish = "Which color is the ball ?"
		sFrench = "De quelle couleur est la balle ?"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "De que color es la pelota ?"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>请�??�?���?�??��?�?�</chinese>
                                                                        <english>Which color is the ball ?</english>
                                                                        <french>De quelle couleur est la balle ?</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>De que color es la pelota ?</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Choice" robot="" id="4" tooltip="Configure speech recognition to select an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="476" y="37">
                                                                    <bitmap>media/images/box/icons_appu/voice_recognition.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# Choice
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="4" />
                                                                    <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="5" />
                                                                    <Output name="WordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="7" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="8" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="9" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Rouge;Jaune;Vert;Bleu" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Red/Red color;Yellow/Yellow color;Green/Green color;Blue/Blue color" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="11" />
                                                                    <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="12" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="红�?�;��?�?�;绿�?�;�?��?�" default_value="" custom_choice="0" tooltip="" id="13" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                                        <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                                        <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                        <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                                        <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                                        <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                                        <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                                        <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                                        <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                                        <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                                        <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                                        <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                                        <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                                        <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                                        <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                                        <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                                        <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                                        <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                                        <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                                        <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                                        <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                                        <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                                        <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                                        <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                                        <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                                    </Box>
                                                                                    <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                                        <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                                        <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                                            <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                                            <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                                        <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                    </Box>
                                                                                    <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            tmp = self.aArray[index-1].split("/")        
            if self.getParameter("Repeat choice"):
                self.onSay(tmp[0])
            self.WordRecognized(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                        <Output name="WordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="7" indexofoutput="7" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="10" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="502" y="14">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            </Box>
                                            <Box name="Save" robot="" id="4" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="289" y="240">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Save
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/current" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="90" y="243">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Color")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Color</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Stand" robot="" id="5" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="92" y="400">
                                                <bitmap>media/images/positions/Stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232026" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406934" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Select Camera" robot="" id="11" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="84" y="14">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Box name="Say" robot="" id="12" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="239" y="133">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "You can use my head to choose if you prefer"
		sFrench = "Tu peux utiliser ma tête pour choisir si tu préfères."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>你好</chinese>
                                                                        <english>You can use my head to choose if you prefer</english>
                                                                        <french>Tu peux utiliser ma tête pour choisir si tu préfères.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese>Olá</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="4" outputowner="10" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="5" outputowner="10" indexofoutput="7" />
                                            <Link inputowner="10" indexofinput="2" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="7" outputowner="13" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Object" index="36" bitmap="">
                                        <Diagram scale="89">
                                            <Box name="Save" robot="" id="7" tooltip="Save head position in memory" bitmap_expanded="1" plugin="" x="489" y="9">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="soccer/saturation_threshold" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="gotoRetry" robot="" id="12" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="491" y="104">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Retry" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoSoccer" robot="" id="1" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="761" y="9">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Soccer" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Eyes LEDs" robot="" id="5" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="626" y="9">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.01" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="99" y="18">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="310" y="18">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Read" robot="" id="3" tooltip="Read head position in memory" bitmap_expanded="1" plugin="" x="65" y="106">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/soccer/ballcolor" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="Wait" robot="" id="4" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="201" y="9">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="RemoteDebugging" robot="" id="11" tooltip="Draw a window from a internal module on some remote computer screen.&#x0A;&#x0A;v0.98" bitmap_expanded="1" plugin="" x="485" y="206">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# RemoteDebugging
# v0.9
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;
        
        try:    
            uv = ALProxy( "UsageViewer" );
        except BaseException, err:
            self.log( "WRN: %s: no module UsageViewer, can't debug. err: %s" % ( self.boxName, err ) );
            return;
        
        bRet = uv.addViewer( self.getParameter( 'strModuleName' ), self.getParameter( 'strMethodName' ), self.getParameter( 'nSizeX' ), self.getParameter( 'nSizeY' ), self.getParameter( 'nEncodingType' ), 0 );
        if( not bRet ):
            self.log( "WRN: %s: can't connect to %s for calling it" % ( self.boxName, self.getParameter( 'strModuleName' ) ) );
            return;        

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            try:
                uv.update();
            except BaseException, err:
                self.log( "WRN: %s: update error, exiting... (err: %s)" % ( self.boxName, err ) );
                self.bMustStop = True;
            except:
                self.log( "WRN: %s: update unknown error, exiting..." % ( self.boxName ) );
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        uv.removeViewer( self.getParameter( 'strModuleName' ), self.getParameter( 'strMethodName' ) );
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
        
# RemoteDebugging - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="strModuleName" inherits_from_parent="0" content_type="3" value="UsageOpenCV" default_value="" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="strMethodName" inherits_from_parent="0" content_type="3" value="getDebugBuffer" default_value="" custom_choice="0" tooltip="" id="6" />
                                                <Parameter name="nSizeX" inherits_from_parent="0" content_type="1" value="160" default_value="640" min="0" max="100000" tooltip="" id="7" />
                                                <Parameter name="nSizeY" inherits_from_parent="0" content_type="1" value="120" default_value="480" min="0" max="14000" tooltip="" id="8" />
                                                <Parameter name="nEncodingType" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="20" tooltip="0: rgb888&#x0A;1: grey8" id="9" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.5" min="0.02" max="100" tooltip="refresh period in second" id="10" />
                                            </Box>
                                            <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="351" y="206">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            </Box>
                                            <Box name="BallDetection" robot="" id="8" tooltip="Detect colored balls. The output describe each detected ball." bitmap_expanded="1" plugin="" x="348" y="9">
                                                <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 28/04/2011
#~ Version : 1.0.4

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        self.bMustStop = False
        self.aBallDetection = [0]*3 # [Saturation threshold (0..255), min hue, max hue]
        self.update()

    def onLoad(self):
        pass

    def onUnload(self):
         if self.bIsRunning:
            self.bMustStop = True

    def update(self):
        self.aBallDetection[0] = self.getParameter("Saturation threshold")
        ballColor = self.getParameter("Ball color")
        # Color ranges are overlapping to get rid of shadow and reflection problems.
        if ballColor == "Red":
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 50
        elif ballColor == "Yellow":
            self.aBallDetection[1] = 40
            self.aBallDetection[2] = 90
        elif ballColor == "Green":
            self.aBallDetection[1] = 80
            self.aBallDetection[2] = 160
        elif ballColor == "Blue":
            self.aBallDetection[1] = 150
            self.aBallDetection[2] = 280
        else:
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 360
        
    def onInput_onStart(self):
        self.ocv = ALProxy("BallModule")    
        self.ocv.setBallDetection(self.aBallDetection)
        self.ocv.setPeriod(self.getParameter("Period"))
        self.ocv.setVerbosity(self.getParameter("Verbosity"))
        
    def onInput_onSetup(self):
        if self.bIsRunning:
            self.bMustStop = True
            return
        self.bIsRunning = True
        
        while not self.bMustStop:        
            self.update()
            self.ocv.setBallDetection(self.aBallDetection)
            self.ocv.setPeriod(self.getParameter("Period"))
            self.ocv.setVerbosity(self.getParameter("Verbosity"))
            time.sleep(1.0)

        self.bIsRunning = False
        self.bMustStop = False
        
    def onInput_onStop(self):
        if self.bIsRunning:
            self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onSetup" type="1" type_size="1" nature="1" inner="0" tooltip="This is a toggle that enable/disable the real time update of the parameters." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Input name="BallDetected" type="0" type_size="1" nature="4" stm_value_name="BallDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Detected balls description in the form: [[x,y,diameter][x,y,diameter] ...]" id="6" />
                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Blue" default_value="Any" custom_choice="0" tooltip='Choose the color of the ball you want to detect. If you select &quot;Any&quot;, you will detect ball of any color.' id="8">
                                                    <Choice value="Red" />
                                                    <Choice value="Yellow" />
                                                    <Choice value="Green" />
                                                    <Choice value="Blue" />
                                                    <Choice value="Any" />
                                                </Parameter>
                                                <Parameter name="Saturation threshold" inherits_from_parent="0" content_type="1" value="255" default_value="90" min="0" max="255" tooltip="Higher value means that only very colorfull (saturated) objects will be detected. If too high, nothing will be detected. Lower value will detect more objects even though unexpected objects if too low." id="9" />
                                                <Parameter name="Verbosity" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="3" tooltip="Debugging level" id="10" />
                                                <Parameter name="Period" inherits_from_parent="0" content_type="1" value="50" default_value="100" min="1" max="1000" tooltip="Amount of time to wait between each frame analysis." id="11" />
                                                <Parameter name="Enable telepathe" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Enable/Disable visual debugging in Telepahte." id="12" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TrackBall" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="160" y="154">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):    
        if balls!=None:
            self.nLastTimeSeen = time.time()
            if self.bLost:
                self.BallSeen()
                self.bLost = False
        elif (time.time() - self.nLastTimeSeen)>=1.0 and not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="SpinThreshold" robot="" id="1" tooltip="Increase or decrease a threshold value in a limited range. On stop event, the value is output." bitmap_expanded="1" plugin="" x="471" y="219">
                                                                    <bitmap>media/images/box/icons_appu/spinbutton.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False    
        self.nValue = self.getParameter("Initial value")

    def onUnload(self):
        self.bMustStop = True

    def stop(self):
        if self.bIsRunning:
            self.bMustStop = True
            while self.bIsRunning:
                time.sleep(0.1)
            
    def changeValue(self, step):
        if self.getParameter("Minimum value") < self.nValue + step < self.getParameter("Maximum value"):
            self.nValue += step
            self.log("threshold = %d" % self.nValue)
            self.Changed(self.nValue)
        else:
            self.bMustStop = True
            self.onOutOfRange()
            
    def onInput_onIncrease(self):
        self.stop()
        self.bIsRunning = True
        while not self.bMustStop:
            self.changeValue(self.getParameter("Change step"))
            time.sleep(self.getParameter("Period"))            
        self.bIsRunning = False        
        
    def onInput_onDecrease(self):
        self.stop()
        self.bIsRunning = True
        while not self.bMustStop:
            self.changeValue(-self.getParameter("Change step"))
            time.sleep(self.getParameter("Period"))            
        self.bIsRunning = False        
        
    def onInput_onPause(self):
        self.stop()
        self.nValue = min(self.getParameter("Maximum value"), self.nValue)
        self.nValue = max(self.getParameter("Minimum value"), self.nValue)
        self.log("SpinThreshold value : %s" % self.nValue)
        
    def onInput_onStop(self):
        self.onInput_onPause()
        self.onStopped(self.nValue)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onIncrease" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onDecrease" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="onPause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                    <Output name="onOutOfRange" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                    <Output name="Changed" type="2" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="255" default_value="255" min="0" max="255" tooltip="" id="9" />
                                                                    <Parameter name="Change step" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="255" tooltip="" id="10" />
                                                                    <Parameter name="Maximum value" inherits_from_parent="0" content_type="1" value="255" default_value="255" min="0" max="1000" tooltip="" id="11" />
                                                                    <Parameter name="Minimum value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="" id="12" />
                                                                    <Parameter name="Period" inherits_from_parent="0" content_type="2" value="0.25" default_value="0.5" min="0" max="1" tooltip="Time to wait in seconds before the value is changed." id="13" />
                                                                </Box>
                                                                <Box name="FaceLeds" robot="" id="13" tooltip="Set the face leds. Note that you can enter this box to set other colors ! Very nice !" bitmap_expanded="1" plugin="" x="471" y="120">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                    <Input name="Stop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="duration" inherits_from_parent="0" content_type="2" value="0" default_value="2" min="0" max="5" tooltip="Fade duration in seconds." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Color" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="111" y="25">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        color = ALMemory.getData("soccer/ballcolor")
        if color == "Red":
            color = [255, 0, 0]
        elif color == "Yellow":
            color = [0, 255, 255]
        elif color == "Green":
            color = [0, 255, 0]
        elif color == "Blue":
            color = [0, 0, 255]
        self.Color(color)

    def onInput_onStop(self):
        self.Color([255, 255, 255])]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Color" type="2" type_size="3" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="FaceLeds" robot="" id="2" tooltip="Turns on and off the face LEDs." bitmap_expanded="1" plugin="" x="241" y="25">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"
        
    def onLoad(self):
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)
        
    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass
        
    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait" robot="" id="4" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="328" y="289">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="2" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Box name="ChangeThreshold" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="679" y="254">
                                                                    <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ocv = ALProxy("BallModule")

    def onUnload(self):
        pass

    def onInput_onStart(self, nValue):
        ballparams = self.ocv.getBallDetection()
        ballparams[0] = nValue
        self.ocv.setBallDetection(ballparams)
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="ColorDetected" type="0" type_size="1" nature="4" stm_value_name="ColorDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="Enable ball detection" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                                    <Parameter name="Enable color detection" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="7" />
                                                                    <Parameter name="Enable move detection" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="8" />
                                                                    <Parameter name="Color threshold" inherits_from_parent="0" content_type="1" value="98" default_value="85" min="0" max="255" tooltip="" id="9" />
                                                                    <Parameter name="Color count" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10" tooltip="" id="10" />
                                                                    <Parameter name="Ball threshold" inherits_from_parent="0" content_type="1" value="89" default_value="95" min="0" max="255" tooltip="" id="11" />
                                                                    <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Blue" default_value="All" custom_choice="0" tooltip="" id="12">
                                                                        <Choice value="Red" />
                                                                        <Choice value="Yellow" />
                                                                        <Choice value="Green" />
                                                                        <Choice value="Blue" />
                                                                        <Choice value="All" />
                                                                    </Parameter>
                                                                    <Parameter name="Move source" inherits_from_parent="0" content_type="3" value="Color" default_value="Ball" custom_choice="0" tooltip="" id="13">
                                                                        <Choice value="Color" />
                                                                        <Choice value="Ball" />
                                                                    </Parameter>
                                                                    <Parameter name="Move quality" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="255" tooltip="" id="14" />
                                                                    <Parameter name="Move minimum" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="255" tooltip="" id="15" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="2" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="471" y="25">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="13" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="8" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="7" />
                                            <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Retry" index="45" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="72" y="14">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "�??没�??�??�?���?��?请�?�让�??�??��?��?"
		sEnglish = "I could not see the ball. Let's do it again."
		sFrench = "Je n'ai pas vu la balle, on recommence."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "No pude ver la pelota, empezemos de nuevo."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>�??没�??�??�?���?��?请�?�让�??�??��?��?</chinese>
                                                    <english>I could not see the ball. Let&apos;s do it again.</english>
                                                    <french>Je n&apos;ai pas vu la balle, on recommence.</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>No pude ver la pelota, empezemos de nuevo.</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="2" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="345" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                            </Box>
                                            <Box name="gotoColor" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="481" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Color" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Soccer" index="52" bitmap="">
                                        <Diagram scale="90">
                                            <Box name="gotoLShoot" robot="" id="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="825" y="161">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="LShoot" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoRShoot" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="827" y="260">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="RShoot" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Select Camera" robot="" id="2" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="96" y="237">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Box name="Read" robot="" id="5" tooltip="Read saturation threshold defined in calibration stage" bitmap_expanded="1" plugin="" x="231" y="237">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="soccer/saturation_threshold" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="Wait" robot="" id="7" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="377" y="112">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="Read" robot="" id="9" tooltip="Read ball color defined in calibration stage" bitmap_expanded="1" plugin="" x="91" y="142">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/soccer/ballcolor" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="RemoteDebugging" robot="" id="11" tooltip="Draw a window from a internal module on some remote computer screen.&#x0A;&#x0A;v0.98" bitmap_expanded="1" plugin="" x="665" y="365">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# RemoteDebugging
# v0.9
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;
        
        try:    
            uv = ALProxy( "UsageViewer" );
        except BaseException, err:
            self.log( "WRN: %s: no module UsageViewer, can't debug. err: %s" % ( self.boxName, err ) );
            return;
        
        bRet = uv.addViewer( self.getParameter( 'strModuleName' ), self.getParameter( 'strMethodName' ), self.getParameter( 'nSizeX' ), self.getParameter( 'nSizeY' ), self.getParameter( 'nEncodingType' ), 0 );
        if( not bRet ):
            self.log( "WRN: %s: can't connect to %s for calling it" % ( self.boxName, self.getParameter( 'strModuleName' ) ) );
            return;        

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            try:
                uv.update();
            except BaseException, err:
                self.log( "WRN: %s: update error, exiting... (err: %s)" % ( self.boxName, err ) );
                self.bMustStop = True;
            except:
                self.log( "WRN: %s: update unknown error, exiting..." % ( self.boxName ) );
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        uv.removeViewer( self.getParameter( 'strModuleName' ), self.getParameter( 'strMethodName' ) );
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
        
# RemoteDebugging - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="strModuleName" inherits_from_parent="0" content_type="3" value="UsageOpenCV" default_value="" custom_choice="0" tooltip="" id="5" />
                                                <Parameter name="strMethodName" inherits_from_parent="0" content_type="3" value="getDebugBuffer" default_value="" custom_choice="0" tooltip="" id="6" />
                                                <Parameter name="nSizeX" inherits_from_parent="0" content_type="1" value="160" default_value="640" min="0" max="100000" tooltip="" id="7" />
                                                <Parameter name="nSizeY" inherits_from_parent="0" content_type="1" value="120" default_value="480" min="0" max="14000" tooltip="" id="8" />
                                                <Parameter name="nEncodingType" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="20" tooltip="0: rgb888&#x0A;1: grey8" id="9" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.5" min="0.02" max="100" tooltip="refresh period in second" id="10" />
                                            </Box>
                                            <Box name="Wait" robot="" id="12" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="529" y="369">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            </Box>
                                            <Box name="Walk2Ball" robot="" id="1" tooltip="Calculate ball position relative to Nao, and adapt walk speed and turn speed to approach it as fast as possible. The when the ball is close enough, trigger a shoot." bitmap_expanded="1" plugin="" x="661" y="163">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import motion
import math

def clamp(value, domain):
    value = max(domain[0], value)
    return min(domain[1], value)

def linearInterpolate(srcDomain, destDomain, value):
    value = clamp(value, srcDomain)
    alpha = (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0])
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]

def sqrtInterpolate(srcDomain, destDomain, value, expo = 0.5):
    value = clamp(value, srcDomain)
    alpha = math.pow( (value - srcDomain[0]) / (srcDomain[1] - srcDomain[0]), expo )
    return alpha * destDomain[1] + (1 - alpha) * destDomain[0]    
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nSpace = motion.SPACE_NAO
        self.nStepFrequency = self.getParameter("step frequency")
        self.nThetaSpeed = self.getParameter("max theta speed")
        self.nForwardSpeed = self.getParameter("max forward speed")
        self.bUseSensors = self.getParameter("use sensors")
        self.nShootDistance = self.getParameter("Shoot distance")
        self.nLooseDistance = self.getParameter("Loose distance")

        self.nHistoryIndex = 0
        self.nHistorySize = 1 
        self.nThetaHistory = [0.0] * self.nHistorySize
        self.nDistHistory = [0.20] * self.nHistorySize
        
    def onLoad(self):
        ALMotion.setMotionConfig([["WALK_MAX_STEP_THETA",40]])
        self.bHasShot = False

    def onUnload(self):
        ALMotion.setMotionConfig([["WALK_MAX_STEP_THETA",20]])    
        self.onInput_onStop()

    def onInput_onResetShoot(self):
        self.bHasShot = False
        
    def stopWalking(self):
        ALMotion.setWalkTargetVelocity(0.0,0.0,0.0,0.0)
        ALMotion.killWalk()
        ALMotion.waitUntilWalkIsFinished()
        
    def getTargetInfo(self, imgYaw, imgPitch):
        # Find out the camera position
        aCamPos = ALMotion.getPosition("CameraBottom", self.nSpace, self.bUseSensors)
        # Apply an offset to the height of the robot because it is errornous
        aCamPos[2] -= 0.01
        # Apply an offset to the bottom camera orientation because in v3.3, there is 10° less
        #~ aCamPos[4] -= 0.175

        # Since the ball has a 0.035m radius, we should reduce height of 0.035
        aCamPos[2] -= 0.035
        
        # dx is the distance where Nao is looking at on the ground
        dx = aCamPos[2] / math.tan(aCamPos[4] + imgPitch)
        return (dx, imgYaw+aCamPos[5], imgPitch+aCamPos[4])
        
    def onInput_onStart(self, p):
        (distance, yaw, pitch) = self.getTargetInfo(p[0], p[1])
        #~ self.log("distance = %f" % distance)
        
        # Interpolate rotation speed using an input angle from +/-25° to +/-nThetaSpeed
        theta = linearInterpolate([-1.0, 1.0], [-self.nThetaSpeed, self.nThetaSpeed], yaw)
        # Interpolate speed value with distance from 15cm to 60cm
        speed = sqrtInterpolate([self.nShootDistance, self.nLooseDistance], [0.0, self.nForwardSpeed], distance, 0.3)            

        self.log("distance = %f, speed = %f, theta = %f" % (distance, speed, theta))
        #~ return
        
        # Calculate a coefficient based on current speed to reduce theta when walking fast
        alpha = linearInterpolate([0.0, self.nForwardSpeed], [1.0, 0.2], speed)
        #~ self.log("theta = %f ==> new theta = %f" %(theta, theta * alpha))
        theta = alpha * theta
        #~ self.log("[dy = %f  => theta = %f] / [dx = %f => speed = %f]" % (dy, theta, dx, speed))        

        # Keep an history of the last values
        self.nThetaHistory[self.nHistoryIndex] = yaw
        self.nDistHistory[self.nHistoryIndex] = distance
        self.nHistoryIndex = (self.nHistoryIndex+1) % self.nHistorySize
        
        nMeanYaw = sum(self.nThetaHistory) / self.nHistorySize
        nMeanDist = sum(self.nDistHistory) / self.nHistorySize
        
        self.log("mean distance : %f => speed : %f, mean yaw : %f" % (nMeanDist, speed, nMeanYaw))
        
        if (nMeanDist > self.nShootDistance or abs(nMeanYaw) > 0.08) and not self.bHasShot:
            ALMotion.setWalkTargetVelocity(speed, 0.0, theta, self.nStepFrequency)
        elif not self.bHasShot:
            self.stopWalking()
            if nMeanYaw > 0:
                #~ self.log("[Shoot Left][dy = %f  => theta = %f => image yaw = %f] / [dx = %f => speed = %f]" % (dy, theta, p[0], dx, speed))
                self.ShootLeft()
            else:
                #~ self.log("[Shoot Right][dy = %f  => theta = %f => image yaw = %f] / [dx = %f => speed = %f]" % (dy, theta, p[0], dx, speed))
                self.ShootRight()                
            self.bHasShot = True
        
    def onInput_onStop(self):
        self.stopWalking()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onResetShoot" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="ShootLeft" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="ShootRight" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Parameter name="step frequency" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="8" />
                                                <Parameter name="max theta speed" inherits_from_parent="0" content_type="2" value="1" default_value="0.5" min="0" max="1" tooltip="" id="9" />
                                                <Parameter name="use sensors" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="10" />
                                                <Parameter name="max forward speed" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="11" />
                                                <Parameter name="Shoot distance" inherits_from_parent="0" content_type="2" value="0.16" default_value="0.16" min="0" max="1" tooltip="Distance from the ball that stop the walk and trigger a shoot" id="12" />
                                                <Parameter name="Loose distance" inherits_from_parent="0" content_type="2" value="0.6" default_value="0.6" min="0" max="1" tooltip="" id="13" />
                                            </Box>
                                            <Box name="BallDetection" robot="" id="4" tooltip="Detect colored balls. The output describe each detected ball." bitmap_expanded="1" plugin="" x="520" y="163">
                                                <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 28/04/2011
#~ Version : 1.0.4

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        self.bMustStop = False
        self.aBallDetection = [0]*3 # [Saturation threshold (0..255), min hue, max hue]
        self.update()

    def onLoad(self):
        pass

    def onUnload(self):
         if self.bIsRunning:
            self.bMustStop = True

    def update(self):
        self.aBallDetection[0] = self.getParameter("Saturation threshold")
        ballColor = self.getParameter("Ball color")
        # Color ranges are overlapping to get rid of shadow and reflection problems.
        if ballColor == "Red":
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 50
        elif ballColor == "Yellow":
            self.aBallDetection[1] = 40
            self.aBallDetection[2] = 90
        elif ballColor == "Green":
            self.aBallDetection[1] = 80
            self.aBallDetection[2] = 160
        elif ballColor == "Blue":
            self.aBallDetection[1] = 150
            self.aBallDetection[2] = 280
        else:
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 360
        
    def onInput_onStart(self):
        self.ocv = ALProxy("BallModule")    
        self.ocv.setBallDetection(self.aBallDetection)
        self.ocv.setPeriod(self.getParameter("Period"))
        self.ocv.setVerbosity(self.getParameter("Verbosity"))
        
    def onInput_onSetup(self):
        if self.bIsRunning:
            self.bMustStop = True
            return
        self.bIsRunning = True
        
        while not self.bMustStop:        
            self.update()
            self.ocv.setBallDetection(self.aBallDetection)
            self.ocv.setPeriod(self.getParameter("Period"))
            self.ocv.setVerbosity(self.getParameter("Verbosity"))
            time.sleep(1.0)

        self.bIsRunning = False
        self.bMustStop = False
        
    def onInput_onStop(self):
        if self.bIsRunning:
            self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onSetup" type="1" type_size="1" nature="1" inner="0" tooltip="This is a toggle that enable/disable the real time update of the parameters." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Input name="BallDetected" type="0" type_size="1" nature="4" stm_value_name="BallDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Detected balls description in the form: [[x,y,diameter][x,y,diameter] ...]" id="6" />
                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Blue" default_value="Any" custom_choice="0" tooltip='Choose the color of the ball you want to detect. If you select &quot;Any&quot;, you will detect ball of any color.' id="8">
                                                    <Choice value="Red" />
                                                    <Choice value="Yellow" />
                                                    <Choice value="Green" />
                                                    <Choice value="Blue" />
                                                    <Choice value="Any" />
                                                </Parameter>
                                                <Parameter name="Saturation threshold" inherits_from_parent="0" content_type="1" value="42" default_value="90" min="0" max="255" tooltip="Higher value means that only very colorfull (saturated) objects will be detected. If too high, nothing will be detected. Lower value will detect more objects even though unexpected objects if too low." id="9" />
                                                <Parameter name="Verbosity" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="3" tooltip="Debugging level" id="10" />
                                                <Parameter name="Period" inherits_from_parent="0" content_type="1" value="50" default_value="100" min="1" max="1000" tooltip="Amount of time to wait between each frame analysis." id="11" />
                                                <Parameter name="Enable telepathe" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Enable/Disable visual debugging in Telepahte." id="12" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="LogBall" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="98" y="207">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import colorsys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.cam = ALProxy("ALVideoDevice")
        try:
            self.CameraViewer = ALProxy("CameraViewer")
        except:
            self.CameraViewer = None

    def onLoad(self):
        if self.CameraViewer != None:
            self.CameraViewer.subscribeLog("usageopencv/ball")

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        if self.CameraViewer != None and p!=None and self.getParameter("Enable telepathe"):
            tab = []
            for point in p:
                #~ xy = self.cam.getImgPosFromAngPos(point[0:2])
                #~ tab.append([xy[0] , xy[1] , 10, 1, 0, 0, 0, 0, str(point[2])])
                tab.append([point[0] , point[1] , point[2], 1, 0, 0, 0, 0, str(point[2])])
            ALMemory.raiseEvent("usageopencv/ball", tab)

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="TrackBall" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="171" y="109">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.CameraModule = ALProxy("ALVideoDevice")        
        
    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0.0
        
    def onUnload(self):
        pass

    def onInput_onBall(self, balls):    
        if balls!=None:
            if self.bLost:
                self.BallSeen()
                self.bLost = False
            p = self.CameraModule.getAngPosFromImgPos(balls[0][0:2])
            ALMotion.changeAngles("Head", [x * self.getParameter("Damping") for x in p], self.getParameter("Speed"))
            self.Angles(p)
        else:
            if not self.bLost:
                self.BallLost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallLost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="Angles" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Parameter name="Speed" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="Damping" inherits_from_parent="0" content_type="2" value="0.8" default_value="0.8" min="0" max="1" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="1" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="453" y="214">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="2" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Box name="HeadRandom" robot="" id="4" tooltip="Random head behaviour - un nouveau trop sympa et corrigé ! - avec une très bonne réactivité sur le stop." bitmap_expanded="1" plugin="" x="608" y="114">
                                                                    <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.chain = "Head"
        self.duration = 0.8 # 1 second
        self.motionProxy = ALProxy('ALMotion')
        # Put adequate max
        self.nMaxPitch = self.getParameter( 'rPitchRangeMax' );
        self.nMaxYaw = self.getParameter( 'rYawRangeMax' );
        self.nPitchOffset = self.getParameter( 'rPitchOffset' ); # direction of look
        self.nSpeedMovement = self.getParameter( 'nSpeedMovement' ); # direction of look
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nCurrentMoveID = -1;
        self.nCurrentSleepID = -1;
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
    
    def onUnload(self):
        self.onInput_onStop()
    
    def onInput_onStart(self):
        #~ self.log( "%s: on start - begin" % self.boxName );
        if( self.bIsRunning ):
            #~ self.log( "%s: on start - already started" % self.boxName );
            return;
        self.bIsRunning = True;
        self.bMustStop = False;
        nMaxWait = self.getParameter( "nMaxWait" );
        bRegularTiming = self.getParameter( "bRegularTiming" );
        while True:
            if self.bMustStop:
                break;
            nValPitch = random.uniform( -self.nMaxPitch , self.nMaxPitch  );
            nValYaw = random.uniform( -self.nMaxYaw , self.nMaxYaw );
            angles = [nValYaw,nValPitch+self.nPitchOffset] # add an offset on pitch
            #if nValPitch*nValPitch + nValYaw*nValYaw > 0.04:
            self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed(self.chain, angles, self.nSpeedMovement / 100. );
            self.motionProxy.wait( self.nCurrentMoveID, 0 )
            self.nCurrentMoveID = -1;
            if( not self.bMustStop ):
                nTimeToWaitMs = 500 + random.randint(0,nMaxWait);
                if( bRegularTiming ):
                    nTimeToWaitMs = nMaxWait;
                self.nCurrentSleepID = -1;
        # while - end
        self.bIsRunning = False;
        self.onStopped();    
        #~ self.log( self.boxName + ": start - end" ); 
    # onInput_onStart - end
    
    def onInput_onStop(self):
            if( self.bIsRunning ):
                self.bMustStop = True;
            if( self.nCurrentMoveID != -1 ):
                try:
                    self.motionProxy.stop( self.nCurrentMoveID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentMoveID = -1;
            if( self.nCurrentSleepID != -1 ):
                self.nCurrentSleepID = -1;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="nMaxWait" inherits_from_parent="0" content_type="1" value="1000" default_value="3000" min="1" max="100000000" tooltip="Maximum milliseconds of wait between two movement" id="5" />
                                                                    <Parameter name="nSpeedMovement" inherits_from_parent="0" content_type="1" value="8" default_value="2" min="1" max="100" tooltip="speed movement in %" id="6" />
                                                                    <Parameter name="rPitchOffset" inherits_from_parent="0" content_type="2" value="0.3" default_value="-0.2" min="-2" max="2" tooltip="Offset to add to the barycentre of all position (to look around top or ...)" id="7" />
                                                                    <Parameter name="rPitchRangeMax" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="2" tooltip="max of movement range" id="8" />
                                                                    <Parameter name="rYawRangeMax" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="2" tooltip="max of movement range" id="9" />
                                                                    <Parameter name="bRegularTiming" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Enable this value to make a new movement at a regular timing (the maxwait parameter is then used as a regular time)" id="10" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Stand" robot="" id="3" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="516" y="64">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232026" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406934" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Save" robot="" id="10" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="251" y="354">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Save
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/current" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="13" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="68" y="353">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Soccer")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Soccer</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="BlinkTactile" robot="" id="14" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="90" y="23">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="7" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="3" outputowner="4" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="4" indexofinput="8" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="9" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="13" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="LShoot" index="60" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LShoot" robot="" id="1" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="87" y="19">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="400" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="29" value="-0.266079" />
                                                            <Key frame="67" value="0.0854875" />
                                                            <Key frame="80" value="-0.178188" />
                                                            <Key frame="106" value="2.81013" />
                                                            <Key frame="125" value="1.93121" />
                                                            <Key frame="145" value="1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="29" value="2.5" />
                                                            <Key frame="67" value="15" />
                                                            <Key frame="80" value="10" />
                                                            <Key frame="106" value="-16" />
                                                            <Key frame="125" value="-15" />
                                                            <Key frame="145" value="-13.8893" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="87.5378" />
                                                            <Key frame="63" value="83.6705" />
                                                            <Key frame="76" value="84.4615" />
                                                            <Key frame="102" value="71.102" />
                                                            <Key frame="121" value="87.0104" />
                                                            <Key frame="141" value="88.773" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="7.02893" />
                                                            <Key frame="63" value="2.37067" />
                                                            <Key frame="76" value="8.34731" />
                                                            <Key frame="102" value="7.99574" />
                                                            <Key frame="121" value="8.4352" />
                                                            <Key frame="141" value="2.28759" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-57.132" />
                                                            <Key frame="63" value="-49.4854" />
                                                            <Key frame="76" value="-52.1222" />
                                                            <Key frame="102" value="-36.2138" />
                                                            <Key frame="121" value="-48.6065" />
                                                            <Key frame="141" value="-85.7799" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-36.7363" />
                                                            <Key frame="63" value="-66.0922" />
                                                            <Key frame="76" value="-79.1001" />
                                                            <Key frame="102" value="-77.9576" />
                                                            <Key frame="121" value="-55.0178" />
                                                            <Key frame="141" value="-26.1062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="5" />
                                                            <Key frame="63" value="4.2164" />
                                                            <Key frame="76" value="2.89802" />
                                                            <Key frame="102" value="3.60116" />
                                                            <Key frame="121" value="-3.2544" />
                                                            <Key frame="141" value="-0.0854875" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="0.0738444" />
                                                            <Key frame="63" value="0.0778444" />
                                                            <Key frame="76" value="0.0756625" />
                                                            <Key frame="102" value="0.0731171" />
                                                            <Key frame="121" value="0.0760262" />
                                                            <Key frame="141" value="0.224025" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="85.1695" />
                                                            <Key frame="65" value="77.8745" />
                                                            <Key frame="78" value="81.2144" />
                                                            <Key frame="104" value="91.5856" />
                                                            <Key frame="123" value="93.8708" />
                                                            <Key frame="143" value="85.9557" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="-1.32078" />
                                                            <Key frame="65" value="-1.145" />
                                                            <Key frame="78" value="-7.56109" />
                                                            <Key frame="104" value="-6.77007" />
                                                            <Key frame="123" value="-1.32078" />
                                                            <Key frame="143" value="-2.01911" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="66.0922" />
                                                            <Key frame="65" value="54.6663" />
                                                            <Key frame="78" value="52.0295" />
                                                            <Key frame="104" value="70.4868" />
                                                            <Key frame="123" value="89.2077" />
                                                            <Key frame="143" value="65.5696" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="42.4541" />
                                                            <Key frame="65" value="59.2414" />
                                                            <Key frame="78" value="78.4897" />
                                                            <Key frame="104" value="58.4504" />
                                                            <Key frame="123" value="40.5205" />
                                                            <Key frame="143" value="21.619" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="-14" />
                                                            <Key frame="65" value="-13.7135" />
                                                            <Key frame="78" value="-12.6588" />
                                                            <Key frame="104" value="-11.6041" />
                                                            <Key frame="123" value="-10.901" />
                                                            <Key frame="143" value="7.29742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="0.181818" />
                                                            <Key frame="65" value="0.187662" />
                                                            <Key frame="78" value="0.188753" />
                                                            <Key frame="104" value="0.181844" />
                                                            <Key frame="123" value="0.186207" />
                                                            <Key frame="143" value="0.107299" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-10.3688" />
                                                            <Key frame="64" value="-14.4997" />
                                                            <Key frame="77" value="-3.60116" />
                                                            <Key frame="84" value="-2.89802" />
                                                            <Key frame="103" value="-10.7204" />
                                                            <Key frame="122" value="-13.9724" />
                                                            <Key frame="142" value="-18.2791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="25.9" />
                                                            <Key frame="64" value="30.9403" />
                                                            <Key frame="77" value="18.4597" />
                                                            <Key frame="84" value="7.03374" />
                                                            <Key frame="103" value="20.8327" />
                                                            <Key frame="122" value="22.5906" />
                                                            <Key frame="142" value="3.33748" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="9.31893" />
                                                            <Key frame="64" value="-22.7616" />
                                                            <Key frame="77" value="-64.1" />
                                                            <Key frame="84" value="-64.1586" />
                                                            <Key frame="103" value="-45" />
                                                            <Key frame="122" value="-16.697" />
                                                            <Key frame="142" value="12.2145" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-5.10012" />
                                                            <Key frame="64" value="113.202" />
                                                            <Key frame="71" value="113" />
                                                            <Key frame="77" value="71" />
                                                            <Key frame="84" value="14" />
                                                            <Key frame="103" value="88" />
                                                            <Key frame="122" value="35.7695" />
                                                            <Key frame="142" value="-4.39218" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="6" />
                                                            <Key frame="33" value="-5" />
                                                            <Key frame="44" value="-34" />
                                                            <Key frame="56" value="-23" />
                                                            <Key frame="64" value="7" />
                                                            <Key frame="71" value="-3" />
                                                            <Key frame="77" value="-7" />
                                                            <Key frame="84" value="14" />
                                                            <Key frame="92" value="-7" />
                                                            <Key frame="103" value="-27.3367" />
                                                            <Key frame="122" value="-13" />
                                                            <Key frame="142" value="6.50639" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-24" />
                                                            <Key frame="64" value="-6.23791" />
                                                            <Key frame="77" value="-7.90785" />
                                                            <Key frame="84" value="0" />
                                                            <Key frame="103" value="-10.3688" />
                                                            <Key frame="122" value="-16.0818" />
                                                            <Key frame="142" value="-2.90283" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="19.6902" />
                                                            <Key frame="64" value="21.0964" />
                                                            <Key frame="77" value="21.0964" />
                                                            <Key frame="84" value="20.9206" />
                                                            <Key frame="103" value="21.0085" />
                                                            <Key frame="122" value="20.9206" />
                                                            <Key frame="142" value="-5.80326" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="13.2692" />
                                                            <Key frame="64" value="6.06212" />
                                                            <Key frame="77" value="7" />
                                                            <Key frame="84" value="4.83164" />
                                                            <Key frame="103" value="5.18321" />
                                                            <Key frame="122" value="10.9841" />
                                                            <Key frame="142" value="12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-5" />
                                                            <Key frame="44" value="-5" />
                                                            <Key frame="64" value="-5.9" />
                                                            <Key frame="77" value="-4.56797" />
                                                            <Key frame="84" value="-4.56797" />
                                                            <Key frame="103" value="-4.48007" />
                                                            <Key frame="122" value="-4.39218" />
                                                            <Key frame="142" value="-5.27591" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="1.84813" />
                                                            <Key frame="44" value="1" />
                                                            <Key frame="64" value="1" />
                                                            <Key frame="103" value="2" />
                                                            <Key frame="122" value="2" />
                                                            <Key frame="142" value="6.58948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-20" />
                                                            <Key frame="44" value="-20" />
                                                            <Key frame="64" value="-19" />
                                                            <Key frame="103" value="-19" />
                                                            <Key frame="122" value="-15.2908" />
                                                            <Key frame="142" value="4.83164" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoSoccer" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="248" y="19">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Soccer" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="RShoot" index="70" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="RShoot" robot="" id="1" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="87" y="19">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="400" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="29" value="0.266079" />
                                                            <Key frame="67" value="-0.0854875" />
                                                            <Key frame="80" value="0.178188" />
                                                            <Key frame="106" value="-2.81013" />
                                                            <Key frame="125" value="-1.93121" />
                                                            <Key frame="145" value="-1.40867" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="29" value="2.5" />
                                                            <Key frame="67" value="15" />
                                                            <Key frame="80" value="10" />
                                                            <Key frame="106" value="-16" />
                                                            <Key frame="125" value="-15" />
                                                            <Key frame="145" value="-13.8893" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="85.1695" />
                                                            <Key frame="65" value="77.8745" />
                                                            <Key frame="78" value="81.2144" />
                                                            <Key frame="104" value="91.5856" />
                                                            <Key frame="123" value="93.8708" />
                                                            <Key frame="143" value="85.9557" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="1.32078" />
                                                            <Key frame="65" value="1.145" />
                                                            <Key frame="78" value="7.56109" />
                                                            <Key frame="104" value="6.77007" />
                                                            <Key frame="123" value="1.32078" />
                                                            <Key frame="143" value="2.01911" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="-66.0922" />
                                                            <Key frame="65" value="-54.6663" />
                                                            <Key frame="78" value="-52.0295" />
                                                            <Key frame="104" value="-70.4868" />
                                                            <Key frame="123" value="-89.2077" />
                                                            <Key frame="143" value="-65.5696" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="-42.4541" />
                                                            <Key frame="65" value="-59.2414" />
                                                            <Key frame="78" value="-78.4897" />
                                                            <Key frame="104" value="-58.4504" />
                                                            <Key frame="123" value="-40.5205" />
                                                            <Key frame="143" value="-21.619" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="14" />
                                                            <Key frame="65" value="13.7135" />
                                                            <Key frame="78" value="12.6588" />
                                                            <Key frame="104" value="11.6041" />
                                                            <Key frame="123" value="10.901" />
                                                            <Key frame="143" value="-7.29742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="27" value="0.181818" />
                                                            <Key frame="65" value="0.187662" />
                                                            <Key frame="78" value="0.188753" />
                                                            <Key frame="104" value="0.181844" />
                                                            <Key frame="123" value="0.186207" />
                                                            <Key frame="143" value="0.107299" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="87.5378" />
                                                            <Key frame="63" value="83.6705" />
                                                            <Key frame="76" value="84.4615" />
                                                            <Key frame="102" value="71.102" />
                                                            <Key frame="121" value="87.0104" />
                                                            <Key frame="141" value="88.773" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-7.02893" />
                                                            <Key frame="63" value="-2.37067" />
                                                            <Key frame="76" value="-8.34731" />
                                                            <Key frame="102" value="-7.99574" />
                                                            <Key frame="121" value="-8.4352" />
                                                            <Key frame="141" value="-2.28759" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="57.132" />
                                                            <Key frame="63" value="49.4854" />
                                                            <Key frame="76" value="52.1222" />
                                                            <Key frame="102" value="36.2138" />
                                                            <Key frame="121" value="48.6065" />
                                                            <Key frame="141" value="85.7799" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="36.7363" />
                                                            <Key frame="63" value="66.0922" />
                                                            <Key frame="76" value="79.1001" />
                                                            <Key frame="102" value="77.9576" />
                                                            <Key frame="121" value="55.0178" />
                                                            <Key frame="141" value="26.1062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-5" />
                                                            <Key frame="63" value="-4.2164" />
                                                            <Key frame="76" value="-2.89802" />
                                                            <Key frame="102" value="-3.60116" />
                                                            <Key frame="121" value="3.2544" />
                                                            <Key frame="141" value="0.0854875" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="0.0738444" />
                                                            <Key frame="63" value="0.0778444" />
                                                            <Key frame="76" value="0.0756625" />
                                                            <Key frame="102" value="0.0731171" />
                                                            <Key frame="121" value="0.0760262" />
                                                            <Key frame="141" value="0.224025" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-10.3688" />
                                                            <Key frame="64" value="-14.4997" />
                                                            <Key frame="77" value="-3.60116" />
                                                            <Key frame="84" value="-2.89802" />
                                                            <Key frame="103" value="-10.7204" />
                                                            <Key frame="122" value="-13.9724" />
                                                            <Key frame="142" value="-18.2791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-19.6902" />
                                                            <Key frame="64" value="-21.0964" />
                                                            <Key frame="77" value="-21.0964" />
                                                            <Key frame="84" value="-20.9206" />
                                                            <Key frame="103" value="-21.0085" />
                                                            <Key frame="122" value="-20.9206" />
                                                            <Key frame="142" value="5.80326" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="13.2692" />
                                                            <Key frame="64" value="6.06212" />
                                                            <Key frame="77" value="7" />
                                                            <Key frame="84" value="4.83164" />
                                                            <Key frame="103" value="5.18321" />
                                                            <Key frame="122" value="10.9841" />
                                                            <Key frame="142" value="12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-5" />
                                                            <Key frame="44" value="-5" />
                                                            <Key frame="64" value="-5.29104" />
                                                            <Key frame="77" value="-4.56797" />
                                                            <Key frame="84" value="-4.56797" />
                                                            <Key frame="103" value="-4.48007" />
                                                            <Key frame="122" value="-4.39218" />
                                                            <Key frame="142" value="-5.27591" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="1.84813" />
                                                            <Key frame="44" value="1" />
                                                            <Key frame="64" value="1" />
                                                            <Key frame="103" value="2" />
                                                            <Key frame="122" value="2" />
                                                            <Key frame="142" value="6.58948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="19" />
                                                            <Key frame="44" value="21" />
                                                            <Key frame="64" value="21" />
                                                            <Key frame="103" value="21" />
                                                            <Key frame="122" value="15.2908" />
                                                            <Key frame="142" value="-4.83164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-27" />
                                                            <Key frame="64" value="-30.9403" />
                                                            <Key frame="77" value="-18.4597" />
                                                            <Key frame="84" value="-7.03374" />
                                                            <Key frame="103" value="-20.8327" />
                                                            <Key frame="122" value="-22.5906" />
                                                            <Key frame="142" value="-3.33748" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="9.31893" />
                                                            <Key frame="64" value="-22.7616" />
                                                            <Key frame="77" value="-64.1" />
                                                            <Key frame="84" value="-64.1586" />
                                                            <Key frame="103" value="-45" />
                                                            <Key frame="122" value="-16.697" />
                                                            <Key frame="142" value="12.2145" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="-5.10012" />
                                                            <Key frame="64" value="113.202" />
                                                            <Key frame="71" value="113" />
                                                            <Key frame="77" value="71" />
                                                            <Key frame="84" value="14" />
                                                            <Key frame="103" value="88" />
                                                            <Key frame="122" value="35.7695" />
                                                            <Key frame="142" value="-4.39218" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="5" />
                                                            <Key frame="33" value="-5" />
                                                            <Key frame="44" value="-34" />
                                                            <Key frame="56" value="-23" />
                                                            <Key frame="64" value="7" />
                                                            <Key frame="71" value="-3" />
                                                            <Key frame="77" value="-7" />
                                                            <Key frame="84" value="14" />
                                                            <Key frame="92" value="-7" />
                                                            <Key frame="103" value="-27.3367" />
                                                            <Key frame="122" value="-13" />
                                                            <Key frame="142" value="6.50639" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="26" value="23" />
                                                            <Key frame="64" value="6.23791" />
                                                            <Key frame="77" value="7.90785" />
                                                            <Key frame="84" value="0" />
                                                            <Key frame="103" value="10.3688" />
                                                            <Key frame="122" value="16.0818" />
                                                            <Key frame="142" value="2.90283" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoSoccer" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="248" y="19">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Soccer" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Pause" index="80" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="keyframe88" index="88" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="Choice" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="gotoBalance" robot="" id="7" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="376" y="26">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Balance" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoWalkTracker" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="374" y="130">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="WalkTracker" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="TactileCodes" robot="" id="1" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="110" y="11">
                                                <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="17" />
                                                <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="18" />
                                                <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="19" />
                                                <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="20" />
                                                <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="21" />
                                                <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="28" />
                                                <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                            </Box>
                                            <Box name="gotoColor" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="374" y="236">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Color" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="932" y="82">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("TODO: allow the robot to finish his current move before going to another frame.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>TODO: allow the robot to finish his current move before going to another frame.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="keyframe88" index="88" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer3" mute="0">
                                    <BehaviorKeyframe name="OpenCV" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="ModuleC++" robot="" id="1" tooltip="Use a resource as a C++ module or python module, and register it for Naoqi." bitmap_expanded="1" plugin="" x="91" y="35">
                                                <bitmap>media/images/box/icons_appu/allauncher.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.launcher = ALProxy("ALLauncher")

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if not self.launcher.isModulePresent(self.getParameter("Module name")):
            self.fm = ALProxy("ALFrameManager")
            moduleList = self.launcher.launchLocal(self.fm.getBehaviorPath(self.behaviorId) + "/" + self.getParameter("Library"))
            self.log(str(moduleList))
        self.Loaded()

    def onInput_onStop(self):
        if self.launcher.isModulePresent(self.getParameter("Module name")):
            try:
                proxy = ALProxy(self.getParameter("Module name"))
                proxy.exit()
            except:
                self.log("Error while exiting module : %s" % self.getParameter("Module name"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="Loaded" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="Module name" inherits_from_parent="0" content_type="3" value="BallModule" default_value="UsageVisionInfo" custom_choice="1" tooltip="" id="6">
                                                    <Choice value="UsageNoiseExtractor" />
                                                    <Choice value="UsageOpenCV" />
                                                    <Choice value="UsageVisionInfo" />
                                                </Parameter>
                                                <Parameter name="Library" inherits_from_parent="0" content_type="3" value="libvisiondetection.1.10.37.so" default_value="libusageopencv.1.10.10.so" custom_choice="1" tooltip="" id="7">
                                                    <Choice value="libusagesound.1.8.11.so" />
                                                    <Choice value="libusageopencv.1.8.11.so" />
                                                    <Choice value="libusagevision.1.8.11.so" />
                                                    <Choice value="libusageopencv.1.10.10.so" />
                                                    <Choice value="libusagesound.1.10.6.so" />
                                                    <Choice value="libusagevision.1.10.6.so" />
                                                </Parameter>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="keyframe88" index="88" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer4" mute="0">
                                    <BehaviorKeyframe name="Watch state" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Subscribe" robot="" id="13" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="82" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="3" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="219" y="14">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("life")):
			self.output_1(p)
		elif(p == ("standup")):
			self.output_2(p)
		elif(p == ("sitdown")):
			self.output_3(p)
		elif(p == ("wait")):
			self.output_4(p)
		elif(p == ("rest")):
			self.output_5(p)
		elif(p == ("system")):
			self.output_6(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword>&quot;standup&quot;</keyword>
                                                        <keyword>&quot;sitdown&quot;</keyword>
                                                        <keyword>&quot;wait&quot;</keyword>
                                                        <keyword>&quot;rest&quot;</keyword>
                                                        <keyword>&quot;system&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                            </Box>
                                            <Box name="gotoPause" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="807" y="27">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        #~ self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Pause" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="5" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="424" y="221">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Read
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
        except:
            p = None
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="use_ball/current" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="6" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="541" y="225">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("WalkTracker")):
			self.output_1(p)
		elif(p == ("Balance")):
			self.output_2(p)
		elif(p == ("Soccer")):
			self.output_3(p)
		elif(p == ("Color")):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;WalkTracker&quot;</keyword>
                                                        <keyword>&quot;Balance&quot;</keyword>
                                                        <keyword>&quot;Soccer&quot;</keyword>
                                                        <keyword>&quot;Color&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            </Box>
                                            <Box name="gotoSoccer" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="823" y="454">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Soccer" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoBalance" robot="" id="7" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="818" y="359">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Balance" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoWalkTracker" robot="" id="8" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="815" y="267">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="WalkTracker" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoColor" robot="" id="9" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="821" y="551">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Color" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="10" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="813" y="167">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="7" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="7" />
                                            <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="keyframe88" index="88" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
