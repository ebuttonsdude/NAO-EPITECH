<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="100">
                        <Box name="launch_Demos" robot="" id="4" tooltip="If Nao is ready to interact, behaviors will be chosen here." bitmap_expanded="1" plugin="" x="632" y="38">
                            <bitmap>media/images/box/icons_appu/cpu.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="50" resources_acquisition="0" size="150" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="States" mute="0">
                                    <BehaviorKeyframe name="No face" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="356" y="88">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Here face detection is disabled")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Here face detection is disabled</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Face" index="10" bitmap="media/images/box/appu/face.png">
                                        <Diagram scale="-1">
                                            <Box name="FaceDetect" robot="" id="5" tooltip="Start FaceDetection extractor and subscribe on faces value. &#x0A;Depending on whether it saw a face or not, it will give the number of faces seen through onFaceDetected., or stimulate onNoFace." bitmap_expanded="1" plugin="" x="258" y="25">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="FaceDetected" type="0" type_size="1" nature="4" stm_value_name="FaceDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                <Output name="onFaceDetected" type="2" type_size="1" nature="2" inner="0" tooltip="Every time the number of faces change, stimulate this output with the number of faces. Can be 0 if no face detected !" id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="GetFacePos" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="212" y="96">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.MinFaceSize = self.getParameter("minimum face size")

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onInput_onStop()
        
    def onInput_onStart(self, p):
        # Check if any face has been detected and if size is greater than treshold
        if len(p) > 0 and len(p[1]) > 0 and p[1][0][0][3] > self.MinFaceSize and p[1][0][0][4] > self.MinFaceSize:
            self.log("size x : %f, size y : %f" % (p[1][0][0][3], p[1][0][0][4]))
            # Output alpha and beta angles
            self.Face([p[1][0][0][1], p[1][0][0][2]])

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Face" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="minimum face size" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.07" min="0" max="0.5" tooltip="" id="5" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoMenu" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="806" y="13">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Menu" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="BlinkEyes" robot="" id="7" tooltip="Fait clignoter les deux yeux entre deux couleurs." bitmap_expanded="1" plugin="" x="435" y="208">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nDelay = self.getParameter("delay")
        self.nFading = self.getParameter("fading")
        self.hColor1 = 0x0000FF
        self.hColor2 = 0xFFFFFF
        self.bIsRunning = False

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False
        
    def onUnload(self):
        self.onInput_onStop()
        
    def setLedsColors(self, color):
        for i in range(7):
            ALLeds.post.fadeRGB( "FaceLed%s%d" % ("Left", i) , color, self.nFading)
            ALLeds.post.fadeRGB( "FaceLed%s%d" % ("Right", i) , color, self.nFading)
        ALLeds.fadeRGB( "FaceLed%s%d" % ("Left", 7) , color, self.nFading)
        ALLeds.fadeRGB( "FaceLed%s%d" % ("Right", 7) , color, self.nFading)
        
    def onInput_onStart(self):
        if self.bIsRunning:
            return
        self.bIsRunning = True
            
        delay = self.getParameter("delay")
        #~ while not self.bMustStop:   
        # Color up blinking led in one color
        self.setLedsColors(self.hColor1)
        # Then wait a little
        time.sleep(delay)
        # And finally, color up leds with white
        self.setLedsColors(self.hColor2)
        # Then wait a little again
        time.sleep(delay)
       
        self.bIsRunning = False

    def onInput_onStop(self):
        self.setLedsColors(self.hColor2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="5" tooltip="" id="5" />
                                                <Parameter name="fading" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="5" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Select Camera" robot="" id="1" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="103" y="25">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18
        self.cameraModule = ALProxy( "ALVideoDevice" )

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setParam( self.kCameraSelectID, 1 )
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="225" y="207">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Here face detection is enabled. Send to menu only if not in lock mode.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Here face detection is enabled. Send to menu only if not in lock mode.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="9" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="435" y="33">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Read
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/lock" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="10" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="551" y="33">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Lock")):
			self.output_1(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Lock&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Menu" index="19" bitmap="media/images/box/appu/menu.png">
                                        <Diagram scale="102">
                                            <Box name="Save" robot="" id="1" tooltip="Save data value into ALMemory.&#x0A;Here we save the index of the demo recognized in /commercial/demo/recognized" bitmap_expanded="1" plugin="" x="247" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        #Debug
        #self.log("behavior id:")
        #self.log(p)
        #self.log("**********")
        #Debug
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="/commercial/demo/recognized" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="gotoAnim" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="395" y="167">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Animations" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="3" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="48" y="209">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Choose a demo. Save the name in memory, then go to the loading frame")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Choose a demo. Save the name in memory, then go to the loading frame</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="DynamicChoices" robot="" id="5" tooltip="This is were the demo that will be launched is selected" bitmap_expanded="1" plugin="" x="86" y="16">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="ReadMemory_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="A choice has been made and the robot has the index of the behavior he will need to start (as an array)" id="3" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="No choice was made.&#x0A;We do not have any demonstration to load." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="91">
                                                                <Box name="ReadMemory" robot="" id="1" tooltip="Read the list of sentences that can be understood by the robot and the list of associated sentences to pronounce." bitmap_expanded="1" plugin="" x="131" y="380">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")
        self.sLang = None
        self.aReco = None
        self.aSay = None
        
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        
        sLang = ALMemory.getData("/commercial/language")         
        if sLang != self.sLang:
            self.sLang = sLang
            self.aReco = ALMemory.getData("/commercial/reco/%s/" % sLang)
            self.aSay = ALMemory.getData("/commercial/say/%s/" % sLang)

        if self.tts.getLanguage() != sLang:        
            # Setup lang since lang can be changed during demo
            self.tts.loadVoicePreference("NaoOfficialVoice" + sLang)
                  
        self.Say(self.aSay)
        self.Reco(self.aReco)

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Reco" type="0" type_size="1" nature="1" inner="0" tooltip="Return the list of sentences to recognize" id="4" />
                                                                    <Output name="Say" type="0" type_size="1" nature="2" inner="0" tooltip="return the list of sentences to pronounce" id="5" />
                                                                </Box>
                                                                <Box name="Choice" robot="" id="5" tooltip="Configure speech recognition to select an answer from a set of sentences. Head tactile sensors can also be used to select a sentence.&#x0A;WARNING: customized for speed." bitmap_expanded="1" plugin="" x="584" y="227">
                                                                    <bitmap>media/images/box/icons_appu/voice_recognition.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recognition with an array of string as a dictionary." id="2" />
                                                                    <Input name="onDictionnary" type="0" type_size="1" nature="2" inner="0" tooltip="get the data to be recognized" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="4" />
                                                                    <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="5" />
                                                                    <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="6" />
                                                                    <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.21" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="7" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="20" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="8" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="9" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="11" />
                                                                    <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="12" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="80">
                                                                                    <Box name="TactileCodes" robot="" id="3" tooltip="Detection of a tactile sequence on Nao&apos;s head." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                                        <bitmap>media/images/box/icons_appu/fingerprint.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                                        <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                        <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                                        <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                                        <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                                        <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                                        <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                                        <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                                        <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                                        <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                                        <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                                        <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                                        <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                                        <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                                        <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                                        <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                                        <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                                        <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                                        <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                                        <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                                        <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                                        <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                                        <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                                        <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                                    </Box>
                                                                                    <Box name="Dictionary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="454" y="126">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None
        self.aDicoParam = None
        self.bDicoLoaded = False
        self.Asr = ALProxy("ALSpeechRecognition")    
   
    def onUnload(self):
        pass
    
    def onInput_onDictionnary(self, dico):
        # If no dico provided as parameter, use the one from parameters
        self.bDicoLoaded = False
        sLang = self.Asr.getLanguage()
        if dico == None:
            self.aDicoParam = self.getParameter(sLang).split(";")
        else:
            self.aDicoParam = dico     
         # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []        
        for answer in self.aDicoParam:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])      

        self.log(str(self.aDictionnary))
        #self.log(str(self.aAnswers))
        try:
            self.Asr.setWordListAsVocabulary(self.aDictionnary)
            self.Asr.setVisualExpression(True)
        except RuntimeError as e:
            self.log("Could not change current speech recognition dictionary: " + str(e)) 
        except Exception as e2:
            self.log("An Exception was caught: %s" % e2)
        self.bDicoLoaded = True
        
    def onInput_onStart(self):
        while not self.bDicoLoaded:
            #self.log("sleep")
            time.sleep(0.05)
        self.onReady(self.aDicoParam)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDictionnary" type="0" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" />
                                                                                        <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="Pass the list of sentences that can be understood." id="10" />
                                                                                    </Box>
                                                                                    <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="301">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                                        <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                                            <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                                            <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Logger" robot="" id="8" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="141" y="159">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.log(str(p))

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="767" y="398">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                                        <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                    </Box>
                                                                                    <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        #DEBUG
        #self.log("Word recognized : %s" % p)
        found = False
        index = 0
        
        # browse the list to find the index of the recognized word
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            # the robot is set to repeat the selection
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="7" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="18" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="10" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="10" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="CreateMenu" robot="" id="6" tooltip="Create a list of available choices at this step of the demonstration." bitmap_expanded="1" plugin="" x="405" y="399">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onTotalList(self, p):
        # save the list of all that can be recognized
        self.aInitList = p
        #init the index in the architecture
        self.aIndexList = []
        self.onInput_onGenerate(0)
        
        #browse the list of elements. Pick up the first word in a list associated to a menu and create the list of words that can be recognized
    def onInput_onGenerate(self, p):
        # something was recognized
        if p != -1:
            # if in a nested list, we are in a menu. shift to the right
            if len(self.aIndexList) > 0:
                p += 1
            self.aIndexList.append(p)     
        
        # get the list of elements (with menus and behaviors)
        aTmpList = self.aInitList
        for i in self.aIndexList:
            aTmpList = aTmpList[i]
    
        if type(aTmpList) != list:
            #we have found a behavior
            self.onFound(self.aIndexList)
        else:     
            #we are on a menu
            aTmpResult = []            

            # pronounce the text associated to the menu
            self.onPronounceMenu(self.aIndexList)
            
            #get the first elements in each possible sub menu     
            for j in range(1, len(aTmpList)):
                #if element is a menu. Take only the name of the menu
                if type(aTmpList[j]) == list:
                    aTmpElement = aTmpList[j][0]
                    aTmpResult.append(aTmpElement)
                else:
                    aTmpElement = aTmpList[j]
                    aTmpResult.append(aTmpElement)
                    
            self.onStopped(aTmpResult)
              
      
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGenerate" type="2" type_size="1" nature="2" inner="0" tooltip="Generate a menu based on the current index.&#x0A;TODO: add more details" id="2" />
                                                                    <Input name="onTotalList" type="0" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="onFound" type="0" type_size="1" nature="2" inner="0" tooltip="send the index (as an array) of the behavior to launch" id="6" />
                                                                    <Output name="onPronounceMenu" type="0" type_size="1" nature="2" inner="0" tooltip="send the index of the menu so we can pronounce the associated sentence" id="7" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="8" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="635" y="575">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="GetMenuSentence" robot="" id="10" tooltip="Get the sentence associated to a menu so the robot can pronounce it." bitmap_expanded="1" plugin="" x="424" y="584">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aSay = None

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    #save the list of sentences to pronounce
    def onInput_onTotalList(self, p):
        self.aSay = p

    # get the index of the menu. Send the associated sentence
    def onInput_onGenerate(self, p):
        aSentence = self.aSay
        #self.log(aSentence)
        for i in p:
            aSentence = aSentence[i]
            #self.log(aSentence)
        aSentence = aSentence[0]
        self.log(aSentence)

        try:                
            aQuestions = aSentence.split('/')
            nMax = len(aQuestions) - 1
            nIndex = random.randint(0, nMax)
            sToSay = aQuestions[nIndex]
        except Exception as e:
            self.log("An exception was caught: %s" %e)
            sToSay = "Error"
            self.Error()
            
        self.log(sToSay)
        self.onStopped(sToSay)

    def onInput_onStop(self):
        #self.onUnload() 
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGenerate" type="0" type_size="1" nature="2" inner="0" tooltip="Receive the index of the menu." id="2" />
                                                                    <Input name="onTotalList" type="0" type_size="1" nature="2" inner="0" tooltip="Receive the list of sentences to pronounce associated with the behaviors" id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Send the sentence to pronounce" id="5" />
                                                                    <Output name="Error" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" robot="" id="7" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="59" y="635">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("navigate in menus and select a behavior to launch")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>navigate in menus and select a behavior to launch</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="DidNotUnderstand" robot="" id="3" tooltip="In this box, we choose a random sentence to make the user understand Nao did not get the answer." bitmap_expanded="1" plugin="" x="370" y="229">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aMenu = None

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.sendMenu(self.aMenu)
        pass

    def onInput_onSaveList(self, p):
        self.aMenu = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onSaveList" type="0" type_size="1" nature="1" inner="0" tooltip="Save the list of elements of the current menu." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="sendMenu" type="0" type_size="1" nature="2" inner="0" tooltip="This is called directly by the box code. Do not link an inside box to this output." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="SayRandom" robot="" id="7" tooltip="Nao says something chosen from a list of localized sentences." bitmap_expanded="1" plugin="" x="216" y="62">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="SayRandom" robot="" id="14" tooltip="Randomly pick a sentence in the list of input sentence." bitmap_expanded="1" plugin="" x="428" y="188">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, list):
        p = list.split(";")
        self.onStopped( p[random.randint(0, len(p)-1)] )

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Say Text" robot="" id="15" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="572" y="190">
                                                                                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                                                                            <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                                                                            <Resource name="TTS" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="LocalizedText" robot="" id="2" tooltip='LocalizedText. Use &quot;;&quot; as a separator between the different sentences you want to chose from.' bitmap_expanded="1" plugin="localizationbox_plugin" x="143" y="191">
                                                                                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = "Sorry, I could not hear you.; Could you repeat, please?;Could you speak a little louder?"
		sFrench = "Désolé, je ne t'ai pas entendu; Peux tu répéter, s'il te plait?;Peux tu parler un peu plus fort?"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <chinese></chinese>
                                                                                                                <english>Sorry, I could not hear you.; Could you repeat, please?;Could you speak a little louder?</english>
                                                                                                                <french>Désolé, je ne t&apos;ai pas entendu; Peux tu répéter, s&apos;il te plait?;Peux tu parler un peu plus fort?</french>
                                                                                                                <german></german>
                                                                                                                <italian></italian>
                                                                                                                <japanese></japanese>
                                                                                                                <korean></korean>
                                                                                                                <portuguese></portuguese>
                                                                                                                <spanish></spanish>
                                                                                                                <language>1</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                                                        <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="CountTries" robot="" id="15" tooltip="Increased when Nao did not understand anything. Allows for multiple tries before exiting the audio recognition." bitmap_expanded="1" plugin="" x="581" y="59">
                                                                    <bitmap>media/images/box/icons_appu/spinbutton.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# SpinThreshold
#~ Author : Julien Amsellem
#~ Date : 13/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nValue = self.getParameter("Initial value")

    def onUnload(self):
        pass

    def changeValue(self, step):
        newvalue = self.nValue + step
        if self.getParameter("Minimum value") <= newvalue <= self.getParameter("Maximum value"):
            self.nValue = newvalue
            self.Changed(self.nValue)
        elif self.getParameter("Infinite loop"):
            if newvalue<self.getParameter("Minimum value"):
                self.nValue = self.getParameter("Maximum value")
            else:
                self.nValue = self.getParameter("Minimum value")
            self.Changed(self.nValue)
        else:
            self.onOutOfRange()
        self.log("threshold = %d" % self.nValue)
            
    def onInput_onIncrease(self):
        self.changeValue(self.getParameter("Change step"))
                
    def onInput_onReinit(self):
        self.onLoad()        
        
    def onInput_onStop(self):
        self.onStopped(self.nValue)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onIncrease" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onReinit" type="1" type_size="1" nature="1" inner="0" tooltip="Get the number of tries back to 0 for next reco." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Output name="onOutOfRange" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="Changed" type="2" type_size="1" nature="2" inner="0" tooltip="Nao did not understand, but you can still try." id="7" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="255" min="0" max="255" tooltip="" id="8" />
                                                                    <Parameter name="Change step" inherits_from_parent="0" content_type="1" value="1" default_value="10" min="1" max="255" tooltip="" id="9" />
                                                                    <Parameter name="Maximum value" inherits_from_parent="0" content_type="1" value="2" default_value="255" min="0" max="1000" tooltip="" id="10" />
                                                                    <Parameter name="Minimum value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="" id="11" />
                                                                    <Parameter name="Infinite loop" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If this option is checked, when the value increase to reach the maximum value, it restart from the minimum value. And if it decrease to the minimum value, then it restart from the maximum value." id="12" />
                                                                </Box>
                                                                <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="148" y="93">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("TODO: organize this better")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>TODO: organize this better</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="6" />
                                                                <Link inputowner="10" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="6" indexofoutput="6" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="15" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="5" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="AnimNoReco" robot="" id="12" tooltip="Use a code to make the user understand Nao did not hear." bitmap_expanded="1" plugin="" x="255" y="174">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Eyes LEDs_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="WaitSignals_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Eyes LEDs" robot="" id="8" tooltip="Set the LED color of NAO&apos;s eyes. Note that you must open the box to enter the color." bitmap_expanded="1" plugin="" x="105" y="163">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Eyes LEDs" robot="" id="15" tooltip="Set the color of LEDs of robot&apos;s eyes." bitmap_expanded="1" plugin="" x="281" y="41">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = ALLeds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                                    </Box>
                                                                                    <Box name="Color Edit" robot="" id="16" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." bitmap_expanded="1" plugin="coloredit_plugin" x="105" y="47">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <color>#ff0000</color>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                                    <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="6" tooltip="Set the LED color of NAO&apos;s eyes. Note that you must open the box to enter the color." bitmap_expanded="1" plugin="" x="495" y="161">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Eyes LEDs" robot="" id="15" tooltip="Set the color of LEDs of robot&apos;s eyes." bitmap_expanded="1" plugin="" x="281" y="41">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = ALLeds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                                    </Box>
                                                                                    <Box name="Color Edit" robot="" id="16" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." bitmap_expanded="1" plugin="coloredit_plugin" x="105" y="47">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 81, 255])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <color>#0051ff</color>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                                    <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Ears LEDs" robot="" id="9" tooltip="Set the intensity of all the LEDs of one of or both of NAO&apos;s ears." bitmap_expanded="1" plugin="" x="111" y="323">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftEarLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightEarLeds"
        else:
            sGroup = "EarLeds"
        id = ALLeds.post.fade(sGroup, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="LEDs intensity, from 0 (off) to 100 (max)." id="5" />
                                                                    <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                                </Box>
                                                                <Box name="Ears LEDs" robot="" id="10" tooltip="Set the intensity of all the LEDs of one of or both of NAO&apos;s ears." bitmap_expanded="1" plugin="" x="501" y="320">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftEarLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightEarLeds"
        else:
            sGroup = "EarLeds"
        id = ALLeds.post.fade(sGroup, self.getParameter("Intensity (%)")/100., self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the ear where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="LEDs intensity, from 0 (off) to 100 (max)." id="5" />
                                                                    <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="6" />
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="11" tooltip="Wait for multiple time activation. Define the number of time it must be activated to trigger the output." bitmap_expanded="1" plugin="" x="665" y="236">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# WaitSignals
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0
            
    def onInput_onStop(self):
        self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="3" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="5" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="1" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="369" y="242">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="2" tooltip="Wait for multiple time activation. Define the number of time it must be activated to trigger the output." bitmap_expanded="1" plugin="" x="248" y="243">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# WaitSignals
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0
            
    def onInput_onStop(self):
        self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="5" />
                                                                </Box>
                                                                <Box name="SayRandom" robot="" id="3" tooltip="Nao says something chosen from a list of localized sentences." bitmap_expanded="1" plugin="" x="106" y="595">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="SayRandom" robot="" id="14" tooltip="Randomly pick a sentence in the list of input sentence." bitmap_expanded="1" plugin="" x="428" y="188">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, list):
        p = list.split(";")
        self.onStopped( p[random.randint(0, len(p)-1)] )

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Say Text" robot="" id="15" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="572" y="190">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                                                        <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                                                        <Resource name="TTS" type="Lock" timeout="0" />
                                                                                    </Box>
                                                                                    <Box name="LocalizedText" robot="" id="2" tooltip='LocalizedText. Use &quot;;&quot; as a separator between the different sentences you want to chose from.' bitmap_expanded="1" plugin="localizationbox_plugin" x="143" y="191">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = "I am really sorry, I did not understand what you want. Please try to articulate better next time; I really could not hear you. Please try speaking a little louder next time."
		sFrench = "Je suis vraiment désolé, je n'ai pas compris ce que tu veux. Essaie d'articuler un peu mieux la prochaine fois; Je n'ai pas réussi à comprendre ce que tu dis. Essaie de parler un peu plus fort la prochaine fois."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <chinese></chinese>
                                                                                            <english>I am really sorry, I did not understand what you want. Please try to articulate better next time; I really could not hear you. Please try speaking a little louder next time.</english>
                                                                                            <french>Je suis vraiment désolé, je n&apos;ai pas compris ce que tu veux. Essaie d&apos;articuler un peu mieux la prochaine fois; Je n&apos;ai pas réussi à comprendre ce que tu dis. Essaie de parler un peu plus fort la prochaine fois.</french>
                                                                                            <german></german>
                                                                                            <italian></italian>
                                                                                            <japanese></japanese>
                                                                                            <korean></korean>
                                                                                            <portuguese></portuguese>
                                                                                            <spanish></spanish>
                                                                                            <language>2</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoLoad" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="387" y="18">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Load Demo" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="12" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Void" index="37" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="159" y="91">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("While standing up or sitting down, do nothing")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>While standing up or sitting down, do nothing</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Rest" index="44" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Event" robot="" id="8" tooltip="Create a new event, and trigger the event with input value." bitmap_expanded="1" plugin="" x="296" y="10">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="127" y="144">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Autonomous life put in rest mode")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Autonomous life put in rest mode</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="87" y="11">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("rest")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>rest</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Standby" index="52" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="571" y="26">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("breathe a little (for stabilization), then go to rest")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>breathe a little (for stabilization), then go to rest</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="2" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="91" y="84">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
        except:
            p = None
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="robotPoseChanged" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="3" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="215" y="84">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Stand")):
			self.output_1(p)
		elif(p == ("Sit")):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Stand&quot;</keyword>
                                                        <keyword>&quot;Sit&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            </Box>
                                            <Box name="Sit_Breathe" robot="" id="9" tooltip="This box can load a behavior, without playing it.&#x0A;And it can play the behavior later. If the behavior was not loaded before playing, it is loading on the fly.&#x0A;&#x0A;What is very usefull is that if you load a xar with this box, you can play it any where else in the behavior with a copy of this box !" bitmap_expanded="1" plugin="" x="469" y="223">
                                                <bitmap>media/images/box/icons_appu/Upload.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# v1.3
# 27/01/2011
# Need NaoQi version > 1.6.x
import sys
import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Loader = None
        
    def __del__(self):
        self.Loader.unload(self.getParameter("xar name"))
            
    def onLoad(self):
        self.path = ALFrameManager.getBehaviorPath(self.behaviorId)
        if self.path not in sys.path:
            sys.path.append(self.path)
        import LoadingManager3
        if self.Loader == None:
            self.Loader = LoadingManager3.LoadingManager()
        
    def onUnload(self):
        self.log("unload %s" % self.getParameter("xar name"))
        self.onInput_onStop()
        
    def onInput_onPreload(self):
        sXarName = self.getParameter("xar name")
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)
        
    def onInput_onPlay(self):
        sXarName = self.getParameter("xar name")
        self.log("path : %s, fullpath : %s " % (self.path, sXarName))
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)        
        oBehavior = eval(id)
        self.Loader.play(sXarName, id, oBehavior, self.getParameter("Delete after playing"), {})
        try:
            output = oBehavior.getParameter("output")
        except:
            output = None
        self.onStopped(output)
        
    def onInput_onStop(self):
        sXarName = self.getParameter("xar name")
        self.Loader.stop(sXarName)
        self.log("behavior stopped : %s" % sXarName)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPreload" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the loading process of the xar file." id="2" />
                                                <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Start playing a xar file. If it has been loaded before, it will start playing faster." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="XarLoaded" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="xar name" inherits_from_parent="0" content_type="3" value="/home/nao/behaviors/sit_breathe/behavior.xar" default_value="" custom_choice="0" tooltip="" id="7" />
                                                <Parameter name="Delete after playing" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="Stand_Breathe" robot="" id="1" tooltip="This box can load a behavior, without playing it.&#x0A;And it can play the behavior later. If the behavior was not loaded before playing, it is loading on the fly.&#x0A;&#x0A;What is very usefull is that if you load a xar with this box, you can play it any where else in the behavior with a copy of this box !" bitmap_expanded="1" plugin="" x="467" y="106">
                                                <bitmap>media/images/box/icons_appu/Upload.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# v1.3
# 27/01/2011
# Need NaoQi version > 1.6.x
import sys
import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Loader = None
        
    def __del__(self):
        self.Loader.unload(self.getParameter("xar name"))
            
    def onLoad(self):
        self.path = ALFrameManager.getBehaviorPath(self.behaviorId)
        if self.path not in sys.path:
            sys.path.append(self.path)
        import LoadingManager3
        if self.Loader == None:
            self.Loader = LoadingManager3.LoadingManager()
        
    def onUnload(self):
        self.onInput_onStop()
        
    def onInput_onPreload(self):
        sXarName = self.getParameter("xar name")
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)
        
    def onInput_onPlay(self):
        sXarName = self.getParameter("xar name")
        self.log("path : %s, fullpath : %s " % (self.path, sXarName))
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)        
        oBehavior = eval(id)
        self.Loader.play(sXarName, id, oBehavior, self.getParameter("Delete after playing"), {})
        try:
            output = oBehavior.getParameter("output")
        except:
            output = None
        self.onStopped(output)
        
    def onInput_onStop(self):
        sXarName = self.getParameter("xar name")
        self.Loader.stop(sXarName)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPreload" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the loading process of the xar file." id="2" />
                                                <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Start playing a xar file. If it has been loaded before, it will start playing faster." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="XarLoaded" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="xar name" inherits_from_parent="0" content_type="3" value="/home/nao/behaviors/stand_breathe/behavior.xar" default_value="" custom_choice="0" tooltip="" id="7" />
                                                <Parameter name="Delete after playing" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="Wait" robot="" id="5" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="94" y="355">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            </Box>
                                            <Box name="gotoRest" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="474" y="354">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Rest" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="3" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="4" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="4" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Load Demo" index="61" bitmap="media/images/box/appu/Upload.png">
                                        <Diagram scale="97">
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="866" y="373">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Box name="DemoName" robot="" id="11" tooltip="Get the demo name into memory from the index output by Choice box. And also try to find some text to say during loading time." bitmap_expanded="1" plugin="" x="78" y="110">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            sLang = self.tts.getLanguage()
            # Retrieve the behavior name from index
            aNames = ALMemory.getData("/commercial/names")
            aSay = ALMemory.getData("/commercial/say/%s/" % sLang)            
            aDemoIndex = ALMemory.getData("/commercial/demo/recognized")
            
            #aDemoIndex is a list.browse the lists to get the necessary elements
            text = aSay
            demo = aNames
            for i in aDemoIndex:
                text = text[i]
                demo = demo[i]
                #self.log(demo)               

            if demo == "shutup":
                self.Rest()
            elif demo == "standing":
                self.Stand()
            elif demo ==  "sitting":
                self.Sit()
            elif demo == "exit":
                self.Exit()
            else:
                self.Name(demo)
                if len(text)>0:
                    #self.log(text)
                    aSentences = text.split('/')
                    nMax = len(aSentences) - 1
                    nIndex = random.randint(0, nMax)
                    sToSay = aSentences[nIndex]
                    self.Say(sToSay)
        except:
            self.Invalid()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Rest" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="Exit" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="Invalid" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                <Output name="Stand" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                <Output name="Sit" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                <Output name="Name" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" />
                                                <Output name="Say" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Load&amp;Play" robot="" id="20" tooltip="Allow user to play any installed behavior." bitmap_expanded="1" plugin="" x="673" y="180">
                                                <bitmap>media/images/box/icons_appu/Upload.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# v1.1
# 17/12/2010
# Need NaoQi version > 1.6.x
import sys
import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Loader = None
        self.bBehaviorFail = False
        self.sBehaviorName = None

    def __del__(self):
        self.Loader.unload(self.sXarName)
            
    def onLoad(self):
        self.bRest = False   
        path1 = ALFrameManager.getBehaviorPath(self.behaviorId)
        if path1 not in sys.path:
            sys.path.append(path1)
        import LoadingManager3
        if self.Loader == None:
            self.Loader = LoadingManager3.LoadingManager()
        self.sXarName = None            
        
    def onUnload(self):
        self.log("Warning: unload Load&Play (%s)" % self.sXarName)
        self.onInput_onStop()
        
    def onInput_onPreload(self, p):
        self.sXarName = "/home/nao/behaviors/%s/behavior.xar" % p
        if os.path.isfile(self.sXarName):
            self.log(self.sXarName)
            id = self.Loader.load(self.sXarName)
            self.log(id)
            self.XarLoaded()
        else:
            self.log("Could not find behavior : %s" % self.sXarName)
            self.bBehaviorFail = True
            self.sBehaviorName = p
            self.XarLoaded()            
        
    def onInput_onPlay(self):
        id = self.Loader.load(self.sXarName)
        self.XarLoaded()
        if id != None and not self.bBehaviorFail:
            self.log("try to play the behavior %s" % self.sXarName)
            oBehavior = eval(id)
            self.Loader.play(self.sXarName, id, oBehavior, True, {})
            self.log("Play Load&Play : %s finished" % self.sXarName)
            self.onStopped()        
        else:
            self.log("Could not play : %s . Check the list of behaviors" % self.sXarName)
            self.LoadingFailed(self.sBehaviorName)
        
    def onInput_onStop(self):
        self.log("stop Load&Play")
        if self.sXarName != None:
            self.log("stop Load&Play : %s" % self.sXarName)
            self.Loader.unload(self.sXarName)
            self.log("stop Load&Play : %s OK" % self.sXarName)
            self.sXarName = None]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Start playing the chosen demo." id="2" />
                                                <Input name="onPreload" type="3" type_size="1" nature="2" inner="0" tooltip="Preloads the demo to make it start playing faster." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the current playing demo." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output is activated when the demo has finished playing." id="5" />
                                                <Output name="LoadingFailed" type="3" type_size="1" nature="1" inner="0" tooltip="Activated if the loading failed." id="6" />
                                                <Output name="XarLoaded" type="1" type_size="1" nature="2" inner="0" tooltip="This output is activated when the demo has finished loading (if it worked or not)" id="7" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="9" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="997" y="14">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("life")
	def onInput_input_2(self):
			self.onStopped("standup")
	def onInput_input_3(self):
			self.onStopped("sitdown")
	def onInput_input_4(self):
			self.onStopped("rest")
	def onInput_input_5(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword>&quot;standup&quot;</keyword>
                                                        <keyword>&quot;sitdown&quot;</keyword>
                                                        <keyword>&quot;rest&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="6" />
                                            </Box>
                                            <Box name="Event" robot="" id="8" tooltip="Create a new event, and trigger the event with input value." bitmap_expanded="1" plugin="" x="1210" y="45">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="gotoAnim" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="1305" y="165">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Animations" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoRest" robot="" id="7" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="264" y="11">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Rest" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Subscribe" robot="" id="3" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="684" y="456">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="6" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="817" y="476">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("life")):
			self.output_1(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            </Box>
                                            <Box name="Resume" robot="" id="13" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="78" y="11">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            ALMemory.removeData(self.getParameter("var name"))
        except:
            pass
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="demo/current_frame" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Standup" robot="" id="17" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="304" y="242">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onOk" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot managed to get up." id="4" />
                                                <Output name="onNotOk" type="1" type_size="1" nature="1" inner="0" tooltip="Called when the robot could not manage to get up." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Event" robot="" id="1" tooltip="Create a new event, and trigger the event with input value." bitmap_expanded="1" plugin="" x="416" y="58">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="222" y="56">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("wait")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>wait</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Stand" robot="" id="3" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="741" y="7">
                                                                    <bitmap>media/images/positions/Stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-0.266079" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-10.7252" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="91.2292" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="9.4899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-70.3158" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-33.6601" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="6.23791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="0.232026" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="85.1695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-6.4185" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="67.6742" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="24.9637" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="9.92936" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="0.406934" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-9.22623" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="6.4185" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="11.692" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-5.18802" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="4.04062" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-6.15002" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-3.86483" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="10.8083" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="-4.2164" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="3.60596" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="20" value="3.78175" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                    <Resource name="HeadYaw" type="Lock" timeout="5" />
                                                                    <Resource name="HeadPitch" type="Lock" timeout="5" />
                                                                    <Resource name="LShoulderPitch" type="Lock" timeout="5" />
                                                                    <Resource name="LShoulderRoll" type="Lock" timeout="5" />
                                                                    <Resource name="LElbowRoll" type="Lock" timeout="5" />
                                                                    <Resource name="LElbowYaw" type="Lock" timeout="5" />
                                                                    <Resource name="LWristYaw" type="Lock" timeout="5" />
                                                                    <Resource name="LHand" type="Lock" timeout="5" />
                                                                    <Resource name="RShoulderPitch" type="Lock" timeout="5" />
                                                                    <Resource name="RShoulderRoll" type="Lock" timeout="5" />
                                                                    <Resource name="RElbowRoll" type="Lock" timeout="5" />
                                                                    <Resource name="RElbowYaw" type="Lock" timeout="5" />
                                                                    <Resource name="RWristYaw" type="Lock" timeout="5" />
                                                                    <Resource name="RHand" type="Lock" timeout="5" />
                                                                    <Resource name="LHipYawPitch" type="Lock" timeout="5" />
                                                                    <Resource name="LHipRoll" type="Lock" timeout="5" />
                                                                    <Resource name="LHipPitch" type="Lock" timeout="5" />
                                                                    <Resource name="LKneePitch" type="Lock" timeout="5" />
                                                                    <Resource name="LAnklePitch" type="Lock" timeout="5" />
                                                                    <Resource name="LAnkleRoll" type="Lock" timeout="5" />
                                                                    <Resource name="RHipRoll" type="Lock" timeout="5" />
                                                                    <Resource name="RHipPitch" type="Lock" timeout="5" />
                                                                    <Resource name="RKneePitch" type="Lock" timeout="5" />
                                                                    <Resource name="RAnklePitch" type="Lock" timeout="5" />
                                                                    <Resource name="RAnkleRoll" type="Lock" timeout="5" />
                                                                </Box>
                                                                <Box name="Stand Up" robot="" id="6" tooltip="NAO tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." bitmap_expanded="1" plugin="" x="574" y="63">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when NAO succeed in standing up." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="2" default_value="3" min="1" max="10" tooltip="The maximum number that the robot tries to stand up and fails before the failure&#x0A;output is stimulated." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="StandUpBehavior" mute="0">
                                                                            <BehaviorKeyframe name="DetectRobotPose" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Check Count" robot="" id="7" tooltip="Check number of tries. If the current try number is higher than the maximum&#x0A;number of tries set in parent box parameters, then the failed output is&#x0A;stimulated, else the tryAgain output is stimulated." bitmap_expanded="1" plugin="" x="863" y="179">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTries = 0

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.nTries += 1
        if (self.nTries > self.getParameter("Maximum of tries")):
            self.failed()
        else:
            self.tryAgain()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="failed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the current try number is higher than the maximum number of tries&#x0A;set in parent box parameters." id="3" />
                                                                                        <Output name="tryAgain" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the current try number is smaller than or equal to the maximum&#x0A;number of tries set in parent box parameters." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Switch Case" robot="" id="10" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;output matching, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="444" y="86">
                                                                                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Stand")):
			self.output_1(p)
		elif(p == ("Unknown")):
			self.output_2(p)
		elif(p == ("HeadBack")):
			self.output_3(p)
		else:
			self.onDefault()]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <keywords>
                                                                                                <keyword>&quot;Stand&quot;</keyword>
                                                                                                <keyword>&quot;Unknown&quot;</keyword>
                                                                                                <keyword>&quot;HeadBack&quot;</keyword>
                                                                                                <keyword></keyword>
                                                                                            </keywords>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to test." id="2" />
                                                                                        <Output name="onDefault" type="1" type_size="1" nature="1" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Stand Motion" robot="" id="20" tooltip="The robot makes the right motion to stand up depending on its current position." bitmap_expanded="1" plugin="" x="563" y="381">
                                                                                        <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.count = 0
        pass

    def onInput_onStop(self):
        self.onUnload()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent after a step to sit down is done." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="SitDownBehavior" mute="0">
                                                                                                <BehaviorKeyframe name="DetectRobotPose" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Switch Case" robot="" id="9" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;output matching, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="230" y="73">
                                                                                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Left")):
			self.output_1(p)
		elif(p == ("Right")):
			self.output_2(p)
		elif(p == ("Back")):
			self.output_3(p)
		elif(p == ("Knee")):
			self.output_4(p)
		elif(p == ("Frog")):
			self.output_5(p)
		elif(p == ("Belly")):
			self.output_6(p)
		elif(p == ("Crouch")):
			self.output_7(p)
		elif(p == ("Sit")):
			self.output_8(p)
		else:
			self.onDefault()]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <keywords>
                                                                                                                    <keyword>&quot;Left&quot;</keyword>
                                                                                                                    <keyword>&quot;Right&quot;</keyword>
                                                                                                                    <keyword>&quot;Back&quot;</keyword>
                                                                                                                    <keyword>&quot;Knee&quot;</keyword>
                                                                                                                    <keyword>&quot;Frog&quot;</keyword>
                                                                                                                    <keyword>&quot;Belly&quot;</keyword>
                                                                                                                    <keyword>&quot;Crouch&quot;</keyword>
                                                                                                                    <keyword>&quot;Sit&quot;</keyword>
                                                                                                                    <keyword></keyword>
                                                                                                                </keywords>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to test." id="2" />
                                                                                                            <Output name="onDefault" type="1" type_size="1" nature="1" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                                                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                                                                            <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                                                                            <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                                                                                            <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                                                                                                            <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                                                                                                        </Box>
                                                                                                        <Box name="SitToCrouch" robot="" id="12" tooltip="First motion to Stand up from a sitting position" bitmap_expanded="1" plugin="" x="689" y="627">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="25" resources_acquisition="1" size="300" enable="1" start_frame="0" end_frame="180" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="0.0854875" />
                                                                                                                        <Key frame="28" value="-16" />
                                                                                                                        <Key frame="39" value="-19.9538" />
                                                                                                                        <Key frame="55" value="-27" />
                                                                                                                        <Key frame="75" value="-30" />
                                                                                                                        <Key frame="94" value="-16.4382" />
                                                                                                                        <Key frame="126" value="-0.538656" />
                                                                                                                        <Key frame="180" value="-0.538656" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="21.2674" />
                                                                                                                        <Key frame="28" value="21.1795" />
                                                                                                                        <Key frame="39" value="13" />
                                                                                                                        <Key frame="55" value="15.8" />
                                                                                                                        <Key frame="75" value="9" />
                                                                                                                        <Key frame="94" value="20.0369" />
                                                                                                                        <Key frame="126" value="21.707" />
                                                                                                                        <Key frame="180" value="21.707" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="31.9902" />
                                                                                                                        <Key frame="28" value="45.6134" />
                                                                                                                        <Key frame="39" value="45.2618" />
                                                                                                                        <Key frame="55" value="58.094" />
                                                                                                                        <Key frame="64" value="44.4708" />
                                                                                                                        <Key frame="75" value="43.0645" />
                                                                                                                        <Key frame="94" value="73.6509" />
                                                                                                                        <Key frame="109" value="82.44" />
                                                                                                                        <Key frame="126" value="90.8776" />
                                                                                                                        <Key frame="180" value="71.5415" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="13.9724" />
                                                                                                                        <Key frame="21" value="28.3" />
                                                                                                                        <Key frame="28" value="23.8163" />
                                                                                                                        <Key frame="39" value="29.2" />
                                                                                                                        <Key frame="55" value="43.2" />
                                                                                                                        <Key frame="64" value="35" />
                                                                                                                        <Key frame="75" value="29.2655" />
                                                                                                                        <Key frame="94" value="4.39218" />
                                                                                                                        <Key frame="109" value="8.87466" />
                                                                                                                        <Key frame="126" value="39.461" />
                                                                                                                        <Key frame="180" value="33.9238" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-31.204" />
                                                                                                                        <Key frame="28" value="-40.7842" />
                                                                                                                        <Key frame="39" value="-42.1904" />
                                                                                                                        <Key frame="55" value="-46.8487" />
                                                                                                                        <Key frame="64" value="-17.0534" />
                                                                                                                        <Key frame="75" value="-9.31893" />
                                                                                                                        <Key frame="94" value="-49.837" />
                                                                                                                        <Key frame="109" value="-58.0988" />
                                                                                                                        <Key frame="126" value="-52.7374" />
                                                                                                                        <Key frame="180" value="-20.9206" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-60.9066" />
                                                                                                                        <Key frame="28" value="-53.5237" />
                                                                                                                        <Key frame="39" value="-45.4376" />
                                                                                                                        <Key frame="55" value="-53.9631" />
                                                                                                                        <Key frame="64" value="-61.1702" />
                                                                                                                        <Key frame="75" value="-35.7695" />
                                                                                                                        <Key frame="94" value="-51.0627" />
                                                                                                                        <Key frame="109" value="-48.7775" />
                                                                                                                        <Key frame="126" value="-70.8383" />
                                                                                                                        <Key frame="180" value="-61.7855" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-42.542" />
                                                                                                                        <Key frame="28" value="-44.2119" />
                                                                                                                        <Key frame="39" value="-42.1904" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="0.0181527" />
                                                                                                                        <Key frame="28" value="0.0665718" />
                                                                                                                        <Key frame="39" value="0.0720262" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="32.4344" />
                                                                                                                        <Key frame="21" value="42" />
                                                                                                                        <Key frame="28" value="76.0287" />
                                                                                                                        <Key frame="39" value="112.68" />
                                                                                                                        <Key frame="55" value="119.496" />
                                                                                                                        <Key frame="75" value="118.48" />
                                                                                                                        <Key frame="85" value="119.496" />
                                                                                                                        <Key frame="94" value="116.195" />
                                                                                                                        <Key frame="109" value="92.4645" />
                                                                                                                        <Key frame="126" value="81.5659" />
                                                                                                                        <Key frame="180" value="69.7005" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-20.1296" />
                                                                                                                        <Key frame="28" value="-38.6748" />
                                                                                                                        <Key frame="39" value="-36.5654" />
                                                                                                                        <Key frame="48" value="-36" />
                                                                                                                        <Key frame="55" value="-0.498473" />
                                                                                                                        <Key frame="75" value="-29.1825" />
                                                                                                                        <Key frame="85" value="-31.7313" />
                                                                                                                        <Key frame="94" value="-32.3466" />
                                                                                                                        <Key frame="109" value="-38.1474" />
                                                                                                                        <Key frame="126" value="-33.0497" />
                                                                                                                        <Key frame="180" value="-15.0319" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="27.5077" />
                                                                                                                        <Key frame="28" value="104.413" />
                                                                                                                        <Key frame="39" value="117.685" />
                                                                                                                        <Key frame="55" value="-5" />
                                                                                                                        <Key frame="75" value="-4.66067" />
                                                                                                                        <Key frame="85" value="-4.39699" />
                                                                                                                        <Key frame="94" value="-3.78175" />
                                                                                                                        <Key frame="109" value="18.1033" />
                                                                                                                        <Key frame="126" value="96.239" />
                                                                                                                        <Key frame="180" value="55.3694" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="69.7005" />
                                                                                                                        <Key frame="28" value="58.9778" />
                                                                                                                        <Key frame="39" value="39.0263" />
                                                                                                                        <Key frame="48" value="49" />
                                                                                                                        <Key frame="55" value="0.498473" />
                                                                                                                        <Key frame="75" value="4.57277" />
                                                                                                                        <Key frame="85" value="3.43018" />
                                                                                                                        <Key frame="94" value="0.969213" />
                                                                                                                        <Key frame="109" value="19.0749" />
                                                                                                                        <Key frame="126" value="28.4793" />
                                                                                                                        <Key frame="180" value="55.7258" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="61.6097" />
                                                                                                                        <Key frame="28" value="62.7523" />
                                                                                                                        <Key frame="39" value="62.3128" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="0.0181527" />
                                                                                                                        <Key frame="28" value="0.126571" />
                                                                                                                        <Key frame="39" value="0.140026" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-38.7578" />
                                                                                                                        <Key frame="28" value="-37.3412" />
                                                                                                                        <Key frame="39" value="-43.0541" />
                                                                                                                        <Key frame="75" value="-28.5959" />
                                                                                                                        <Key frame="82" value="-36.9896" />
                                                                                                                        <Key frame="94" value="-49.2155" />
                                                                                                                        <Key frame="126" value="-24.871" />
                                                                                                                        <Key frame="145" value="-16.1697" />
                                                                                                                        <Key frame="180" value="-9.92936" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="8.00055" />
                                                                                                                        <Key frame="28" value="8.30857" />
                                                                                                                        <Key frame="39" value="8.48435" />
                                                                                                                        <Key frame="55" value="31" />
                                                                                                                        <Key frame="75" value="8.87947" />
                                                                                                                        <Key frame="82" value="-1.44741" />
                                                                                                                        <Key frame="94" value="-10" />
                                                                                                                        <Key frame="126" value="10.4615" />
                                                                                                                        <Key frame="145" value="25.2273" />
                                                                                                                        <Key frame="180" value="7.4732" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-89.9987" />
                                                                                                                        <Key frame="28" value="-90" />
                                                                                                                        <Key frame="39" value="-90" />
                                                                                                                        <Key frame="55" value="-90" />
                                                                                                                        <Key frame="75" value="-49.1057" />
                                                                                                                        <Key frame="82" value="-34.1405" />
                                                                                                                        <Key frame="94" value="-3" />
                                                                                                                        <Key frame="109" value="-23" />
                                                                                                                        <Key frame="126" value="-39.5489" />
                                                                                                                        <Key frame="145" value="-43.2403" />
                                                                                                                        <Key frame="180" value="-41.8341" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="41.4825" />
                                                                                                                        <Key frame="28" value="54.9601" />
                                                                                                                        <Key frame="39" value="67.8801" />
                                                                                                                        <Key frame="55" value="96" />
                                                                                                                        <Key frame="75" value="126.122" />
                                                                                                                        <Key frame="82" value="125.098" />
                                                                                                                        <Key frame="94" value="130" />
                                                                                                                        <Key frame="126" value="114.696" />
                                                                                                                        <Key frame="145" value="121.039" />
                                                                                                                        <Key frame="180" value="92.7234" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="44.4708" />
                                                                                                                        <Key frame="28" value="43.2822" />
                                                                                                                        <Key frame="39" value="43.2822" />
                                                                                                                        <Key frame="55" value="38" />
                                                                                                                        <Key frame="75" value="-26" />
                                                                                                                        <Key frame="82" value="-39" />
                                                                                                                        <Key frame="94" value="-63" />
                                                                                                                        <Key frame="126" value="-68.1542" />
                                                                                                                        <Key frame="145" value="-68.1542" />
                                                                                                                        <Key frame="180" value="-42.1904" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-2.89802" />
                                                                                                                        <Key frame="28" value="-0.315349" />
                                                                                                                        <Key frame="39" value="1.53038" />
                                                                                                                        <Key frame="55" value="-10" />
                                                                                                                        <Key frame="75" value="-22.6737" />
                                                                                                                        <Key frame="82" value="-4.97361" />
                                                                                                                        <Key frame="94" value="-5.94664" />
                                                                                                                        <Key frame="126" value="0.617646" />
                                                                                                                        <Key frame="145" value="-0.964405" />
                                                                                                                        <Key frame="180" value="-5.09532" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-8.25942" />
                                                                                                                        <Key frame="28" value="-7.64074" />
                                                                                                                        <Key frame="39" value="-12.0353" />
                                                                                                                        <Key frame="55" value="-31" />
                                                                                                                        <Key frame="75" value="-31.9952" />
                                                                                                                        <Key frame="82" value="-42.0943" />
                                                                                                                        <Key frame="94" value="-35" />
                                                                                                                        <Key frame="126" value="-14.5876" />
                                                                                                                        <Key frame="145" value="-4.65586" />
                                                                                                                        <Key frame="180" value="-4.30429" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-88.9488" />
                                                                                                                        <Key frame="28" value="-90" />
                                                                                                                        <Key frame="39" value="-90" />
                                                                                                                        <Key frame="55" value="-90" />
                                                                                                                        <Key frame="75" value="-87.3668" />
                                                                                                                        <Key frame="82" value="-90" />
                                                                                                                        <Key frame="94" value="-89.3612" />
                                                                                                                        <Key frame="126" value="-48.6944" />
                                                                                                                        <Key frame="145" value="-38.8505" />
                                                                                                                        <Key frame="180" value="-37.1806" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="48.3429" />
                                                                                                                        <Key frame="28" value="54.6752" />
                                                                                                                        <Key frame="39" value="69.6168" />
                                                                                                                        <Key frame="55" value="96" />
                                                                                                                        <Key frame="75" value="70" />
                                                                                                                        <Key frame="82" value="72.9567" />
                                                                                                                        <Key frame="94" value="63" />
                                                                                                                        <Key frame="126" value="34.1044" />
                                                                                                                        <Key frame="145" value="82.5327" />
                                                                                                                        <Key frame="180" value="90.5309" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="45.003" />
                                                                                                                        <Key frame="28" value="43.5603" />
                                                                                                                        <Key frame="39" value="43.5603" />
                                                                                                                        <Key frame="55" value="38" />
                                                                                                                        <Key frame="75" value="45" />
                                                                                                                        <Key frame="82" value="38.3747" />
                                                                                                                        <Key frame="94" value="45" />
                                                                                                                        <Key frame="109" value="45" />
                                                                                                                        <Key frame="118" value="31" />
                                                                                                                        <Key frame="126" value="27.6004" />
                                                                                                                        <Key frame="145" value="-21.1795" />
                                                                                                                        <Key frame="180" value="-45.1739" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="2.81494" />
                                                                                                                        <Key frame="28" value="0.0417638" />
                                                                                                                        <Key frame="39" value="-0.0461279" />
                                                                                                                        <Key frame="55" value="10" />
                                                                                                                        <Key frame="75" value="0.532261" />
                                                                                                                        <Key frame="82" value="4.26057" />
                                                                                                                        <Key frame="88" value="-9" />
                                                                                                                        <Key frame="94" value="-6" />
                                                                                                                        <Key frame="109" value="14" />
                                                                                                                        <Key frame="118" value="20" />
                                                                                                                        <Key frame="126" value="25.2273" />
                                                                                                                        <Key frame="145" value="24.2605" />
                                                                                                                        <Key frame="180" value="5.18802" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                            <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="CrouchToStand" robot="" id="3" tooltip="From the old bad position" bitmap_expanded="1" plugin="" x="1206" y="505">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="3.86483" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-2.37548" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="90.8776" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="12.8298" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-58.5383" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-37.791" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-43.0693" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="0.26148" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="84.1148" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-8.44001" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="52.1174" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="21.2722" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="60.4671" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="0.218207" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-13.7087" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="8.5279" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="12.1315" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-5.18802" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="4.65586" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-7.64418" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-3.33748" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="12.1267" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="-4.39218" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="4.57277" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="30" value="3.43018" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                            <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="BellyToStand" robot="" id="16" tooltip="First motion to Stand up from the belly" bitmap_expanded="1" plugin="" x="1199" y="347">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="10" />
                                                                                                                        <Key frame="20" value="-13" />
                                                                                                                        <Key frame="34" value="16.4" />
                                                                                                                        <Key frame="45" value="17" />
                                                                                                                        <Key frame="58" value="-28.4" />
                                                                                                                        <Key frame="65" value="-17" />
                                                                                                                        <Key frame="76" value="3" />
                                                                                                                        <Key frame="89" value="-22.4" />
                                                                                                                        <Key frame="100" value="3.86483" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-33.0497" />
                                                                                                                        <Key frame="20" value="-31.3797" />
                                                                                                                        <Key frame="34" value="6.15002" />
                                                                                                                        <Key frame="45" value="29.5" />
                                                                                                                        <Key frame="58" value="21.8" />
                                                                                                                        <Key frame="65" value="21.2674" />
                                                                                                                        <Key frame="76" value="-6" />
                                                                                                                        <Key frame="89" value="-30.5887" />
                                                                                                                        <Key frame="100" value="7.3" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="4.83164" />
                                                                                                                        <Key frame="20" value="-86.6" />
                                                                                                                        <Key frame="34" value="-71.6342" />
                                                                                                                        <Key frame="45" value="4.12851" />
                                                                                                                        <Key frame="58" value="73" />
                                                                                                                        <Key frame="65" value="43.3" />
                                                                                                                        <Key frame="76" value="43" />
                                                                                                                        <Key frame="89" value="74" />
                                                                                                                        <Key frame="100" value="91.3171" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="89.0319" />
                                                                                                                        <Key frame="20" value="0.964405" />
                                                                                                                        <Key frame="34" value="4.39218" />
                                                                                                                        <Key frame="45" value="4.04062" />
                                                                                                                        <Key frame="58" value="8.96255" />
                                                                                                                        <Key frame="65" value="53.8" />
                                                                                                                        <Key frame="76" value="38.8" />
                                                                                                                        <Key frame="89" value="48.5" />
                                                                                                                        <Key frame="100" value="12.4782" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-119" />
                                                                                                                        <Key frame="20" value="-90.5309" />
                                                                                                                        <Key frame="34" value="-91.9371" />
                                                                                                                        <Key frame="45" value="-102.396" />
                                                                                                                        <Key frame="58" value="-76.0287" />
                                                                                                                        <Key frame="65" value="-71.5" />
                                                                                                                        <Key frame="76" value="-55.7258" />
                                                                                                                        <Key frame="89" value="-55" />
                                                                                                                        <Key frame="100" value="-58.3625" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-0.5" />
                                                                                                                        <Key frame="20" value="-20.2127" />
                                                                                                                        <Key frame="34" value="-36.5606" />
                                                                                                                        <Key frame="45" value="-48.7775" />
                                                                                                                        <Key frame="58" value="-88.8561" />
                                                                                                                        <Key frame="65" value="-42" />
                                                                                                                        <Key frame="76" value="-42.2" />
                                                                                                                        <Key frame="89" value="-66.1801" />
                                                                                                                        <Key frame="100" value="-39.0215" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-88.8609" />
                                                                                                                        <Key frame="20" value="-88.8609" />
                                                                                                                        <Key frame="34" value="-86.9273" />
                                                                                                                        <Key frame="45" value="-82.9722" />
                                                                                                                        <Key frame="58" value="-80.5112" />
                                                                                                                        <Key frame="65" value="-80.687" />
                                                                                                                        <Key frame="76" value="-80.687" />
                                                                                                                        <Key frame="89" value="-31.2" />
                                                                                                                        <Key frame="100" value="-40.6963" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="0.0585718" />
                                                                                                                        <Key frame="20" value="0.0196627" />
                                                                                                                        <Key frame="34" value="0.0407536" />
                                                                                                                        <Key frame="45" value="0.0545718" />
                                                                                                                        <Key frame="58" value="0.0574809" />
                                                                                                                        <Key frame="65" value="0.0574809" />
                                                                                                                        <Key frame="76" value="0.0549355" />
                                                                                                                        <Key frame="89" value="0.0574809" />
                                                                                                                        <Key frame="100" value="0.260753" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-1.57965" />
                                                                                                                        <Key frame="20" value="-86.6" />
                                                                                                                        <Key frame="34" value="-70.0473" />
                                                                                                                        <Key frame="45" value="-13.5329" />
                                                                                                                        <Key frame="58" value="12.483" />
                                                                                                                        <Key frame="65" value="25.7547" />
                                                                                                                        <Key frame="76" value="52.3859" />
                                                                                                                        <Key frame="89" value="55.0226" />
                                                                                                                        <Key frame="100" value="84.73" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-87.982" />
                                                                                                                        <Key frame="20" value="-11" />
                                                                                                                        <Key frame="34" value="-4.74856" />
                                                                                                                        <Key frame="45" value="-4.74856" />
                                                                                                                        <Key frame="58" value="-13.0104" />
                                                                                                                        <Key frame="65" value="-10.4615" />
                                                                                                                        <Key frame="76" value="-0.498473" />
                                                                                                                        <Key frame="89" value="-7.56109" />
                                                                                                                        <Key frame="100" value="-8.5279" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="119" />
                                                                                                                        <Key frame="20" value="89.4714" />
                                                                                                                        <Key frame="34" value="92.4597" />
                                                                                                                        <Key frame="45" value="96.5906" />
                                                                                                                        <Key frame="58" value="112.323" />
                                                                                                                        <Key frame="65" value="111.796" />
                                                                                                                        <Key frame="76" value="38.1426" />
                                                                                                                        <Key frame="89" value="22.6737" />
                                                                                                                        <Key frame="100" value="52.1174" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="6" />
                                                                                                                        <Key frame="20" value="21.8874" />
                                                                                                                        <Key frame="34" value="36.3896" />
                                                                                                                        <Key frame="45" value="89.2125" />
                                                                                                                        <Key frame="58" value="0.498473" />
                                                                                                                        <Key frame="65" value="0.498473" />
                                                                                                                        <Key frame="76" value="24.2605" />
                                                                                                                        <Key frame="89" value="37.2" />
                                                                                                                        <Key frame="100" value="22.5027" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="86.4831" />
                                                                                                                        <Key frame="20" value="86.4831" />
                                                                                                                        <Key frame="34" value="85.7799" />
                                                                                                                        <Key frame="45" value="81.8248" />
                                                                                                                        <Key frame="58" value="82.2643" />
                                                                                                                        <Key frame="65" value="82.5279" />
                                                                                                                        <Key frame="76" value="82.7037" />
                                                                                                                        <Key frame="89" value="82.5279" />
                                                                                                                        <Key frame="100" value="62.2249" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="0.0185718" />
                                                                                                                        <Key frame="20" value="0.0127537" />
                                                                                                                        <Key frame="34" value="0.0262082" />
                                                                                                                        <Key frame="45" value="0.0469355" />
                                                                                                                        <Key frame="58" value="0.0494809" />
                                                                                                                        <Key frame="65" value="0.04839" />
                                                                                                                        <Key frame="76" value="0.0472991" />
                                                                                                                        <Key frame="89" value="0.04839" />
                                                                                                                        <Key frame="100" value="0.217844" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-1.93121" />
                                                                                                                        <Key frame="20" value="2" />
                                                                                                                        <Key frame="34" value="-24.9588" />
                                                                                                                        <Key frame="45" value="-44.6466" />
                                                                                                                        <Key frame="58" value="-59.6761" />
                                                                                                                        <Key frame="65" value="-65.621" />
                                                                                                                        <Key frame="76" value="-65.621" />
                                                                                                                        <Key frame="89" value="-32.5175" />
                                                                                                                        <Key frame="100" value="-13.5329" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="3.60596" />
                                                                                                                        <Key frame="20" value="0.00240423" />
                                                                                                                        <Key frame="34" value="0.090296" />
                                                                                                                        <Key frame="45" value="-21.619" />
                                                                                                                        <Key frame="58" value="-17.0486" />
                                                                                                                        <Key frame="65" value="-17.0486" />
                                                                                                                        <Key frame="76" value="11.1647" />
                                                                                                                        <Key frame="89" value="7.29742" />
                                                                                                                        <Key frame="100" value="8.5279" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="3.51807" />
                                                                                                                        <Key frame="20" value="0.00240423" />
                                                                                                                        <Key frame="34" value="-89.9108" />
                                                                                                                        <Key frame="45" value="-73.3872" />
                                                                                                                        <Key frame="58" value="-59.4124" />
                                                                                                                        <Key frame="65" value="-66.4437" />
                                                                                                                        <Key frame="76" value="-67.7621" />
                                                                                                                        <Key frame="89" value="-72.7719" />
                                                                                                                        <Key frame="100" value="12.2194" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="6.9" />
                                                                                                                        <Key frame="20" value="114" />
                                                                                                                        <Key frame="34" value="121.039" />
                                                                                                                        <Key frame="45" value="16.1697" />
                                                                                                                        <Key frame="58" value="23.201" />
                                                                                                                        <Key frame="65" value="20.4764" />
                                                                                                                        <Key frame="76" value="41.2188" />
                                                                                                                        <Key frame="89" value="115.399" />
                                                                                                                        <Key frame="100" value="-5.18802" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="52.8205" />
                                                                                                                        <Key frame="20" value="-59" />
                                                                                                                        <Key frame="34" value="-65.9212" />
                                                                                                                        <Key frame="45" value="12.3903" />
                                                                                                                        <Key frame="58" value="40.6915" />
                                                                                                                        <Key frame="65" value="52.8695" />
                                                                                                                        <Key frame="76" value="47.2833" />
                                                                                                                        <Key frame="89" value="-28.743" />
                                                                                                                        <Key frame="100" value="4.39218" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-0.0854875" />
                                                                                                                        <Key frame="20" value="0.00240423" />
                                                                                                                        <Key frame="34" value="-0.0854875" />
                                                                                                                        <Key frame="45" value="-25.9257" />
                                                                                                                        <Key frame="58" value="-17.2244" />
                                                                                                                        <Key frame="65" value="-6.76526" />
                                                                                                                        <Key frame="76" value="-2.37067" />
                                                                                                                        <Key frame="89" value="-6.94104" />
                                                                                                                        <Key frame="100" value="-7.73207" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="1.8" />
                                                                                                                        <Key frame="20" value="0.00240423" />
                                                                                                                        <Key frame="34" value="0.090296" />
                                                                                                                        <Key frame="45" value="17.8444" />
                                                                                                                        <Key frame="58" value="14.5924" />
                                                                                                                        <Key frame="65" value="18.3718" />
                                                                                                                        <Key frame="76" value="13.0104" />
                                                                                                                        <Key frame="89" value="-4.30429" />
                                                                                                                        <Key frame="100" value="-3.42537" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="4.39218" />
                                                                                                                        <Key frame="20" value="-0.00240423" />
                                                                                                                        <Key frame="34" value="-90.3551" />
                                                                                                                        <Key frame="45" value="-95.1891" />
                                                                                                                        <Key frame="58" value="-68.7337" />
                                                                                                                        <Key frame="65" value="-91.5856" />
                                                                                                                        <Key frame="76" value="-18.4597" />
                                                                                                                        <Key frame="89" value="-40.6963" />
                                                                                                                        <Key frame="100" value="12.0388" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-4.48007" />
                                                                                                                        <Key frame="20" value="114" />
                                                                                                                        <Key frame="34" value="119.535" />
                                                                                                                        <Key frame="45" value="99.8474" />
                                                                                                                        <Key frame="58" value="121.478" />
                                                                                                                        <Key frame="65" value="121.478" />
                                                                                                                        <Key frame="76" value="121.478" />
                                                                                                                        <Key frame="89" value="121.478" />
                                                                                                                        <Key frame="100" value="-4.39218" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="53.2648" />
                                                                                                                        <Key frame="20" value="-59" />
                                                                                                                        <Key frame="34" value="-65.2133" />
                                                                                                                        <Key frame="45" value="-67.9785" />
                                                                                                                        <Key frame="58" value="-67.9785" />
                                                                                                                        <Key frame="65" value="-33.748" />
                                                                                                                        <Key frame="76" value="-67.9785" />
                                                                                                                        <Key frame="89" value="-67.9785" />
                                                                                                                        <Key frame="100" value="4.92434" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="10.8" />
                                                                                                                        <Key frame="20" value="0.00240423" />
                                                                                                                        <Key frame="34" value="0.353971" />
                                                                                                                        <Key frame="45" value="-0.261271" />
                                                                                                                        <Key frame="58" value="-5.62267" />
                                                                                                                        <Key frame="65" value="-0.788621" />
                                                                                                                        <Key frame="76" value="-5.44688" />
                                                                                                                        <Key frame="89" value="2.02391" />
                                                                                                                        <Key frame="100" value="3.51807" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                            <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="BackToStand" robot="" id="5" tooltip="First motion to Stand up from the back" bitmap_expanded="1" plugin="" x="1194" y="231">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="1" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-1.40867" />
                                                                                                                        <Key frame="20" value="-2.73208e-05" />
                                                                                                                        <Key frame="28" value="2.37067" />
                                                                                                                        <Key frame="36" value="3.86374e-05" />
                                                                                                                        <Key frame="43" value="1.93188e-05" />
                                                                                                                        <Key frame="48" value="1.93187e-05" />
                                                                                                                        <Key frame="56" value="-29.4461" />
                                                                                                                        <Key frame="65" value="-17.3171" />
                                                                                                                        <Key frame="74" value="15.1" />
                                                                                                                        <Key frame="80" value="6.9" />
                                                                                                                        <Key frame="86" value="-0.538656" />
                                                                                                                        <Key frame="105" value="3.77694" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="3.60116" />
                                                                                                                        <Key frame="20" value="0" />
                                                                                                                        <Key frame="28" value="29.5016" />
                                                                                                                        <Key frame="36" value="-38.5028" />
                                                                                                                        <Key frame="43" value="0" />
                                                                                                                        <Key frame="48" value="20" />
                                                                                                                        <Key frame="56" value="9.84147" />
                                                                                                                        <Key frame="65" value="19.7732" />
                                                                                                                        <Key frame="74" value="0.6" />
                                                                                                                        <Key frame="80" value="1.7" />
                                                                                                                        <Key frame="86" value="21.707" />
                                                                                                                        <Key frame="105" value="-2.28759" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="119.496" />
                                                                                                                        <Key frame="20" value="119.5" />
                                                                                                                        <Key frame="26" value="116.806" />
                                                                                                                        <Key frame="36" value="119.496" />
                                                                                                                        <Key frame="43" value="119.496" />
                                                                                                                        <Key frame="48" value="119.496" />
                                                                                                                        <Key frame="56" value="116.454" />
                                                                                                                        <Key frame="65" value="73.7388" />
                                                                                                                        <Key frame="74" value="54.842" />
                                                                                                                        <Key frame="80" value="42.0098" />
                                                                                                                        <Key frame="86" value="42.0098" />
                                                                                                                        <Key frame="105" value="91.2292" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="56.1604" />
                                                                                                                        <Key frame="20" value="21" />
                                                                                                                        <Key frame="26" value="20" />
                                                                                                                        <Key frame="36" value="20" />
                                                                                                                        <Key frame="43" value="21" />
                                                                                                                        <Key frame="48" value="0.498473" />
                                                                                                                        <Key frame="56" value="17.1365" />
                                                                                                                        <Key frame="60" value="25.4" />
                                                                                                                        <Key frame="65" value="4.04062" />
                                                                                                                        <Key frame="74" value="15.2908" />
                                                                                                                        <Key frame="80" value="28.5624" />
                                                                                                                        <Key frame="86" value="28.5624" />
                                                                                                                        <Key frame="105" value="12.5661" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-43.5967" />
                                                                                                                        <Key frame="20" value="9" />
                                                                                                                        <Key frame="26" value="7.02893" />
                                                                                                                        <Key frame="36" value="5" />
                                                                                                                        <Key frame="43" value="5" />
                                                                                                                        <Key frame="48" value="5" />
                                                                                                                        <Key frame="56" value="-112.328" />
                                                                                                                        <Key frame="65" value="-48.9581" />
                                                                                                                        <Key frame="74" value="-14.3288" />
                                                                                                                        <Key frame="80" value="4.75993" />
                                                                                                                        <Key frame="86" value="4.75993" />
                                                                                                                        <Key frame="105" value="-59.0656" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-35.7695" />
                                                                                                                        <Key frame="20" value="-2" />
                                                                                                                        <Key frame="26" value="-88.5" />
                                                                                                                        <Key frame="36" value="-89.5017" />
                                                                                                                        <Key frame="43" value="-40" />
                                                                                                                        <Key frame="48" value="-0.498473" />
                                                                                                                        <Key frame="52" value="-11" />
                                                                                                                        <Key frame="56" value="-59.9398" />
                                                                                                                        <Key frame="65" value="-50.008" />
                                                                                                                        <Key frame="74" value="-47.547" />
                                                                                                                        <Key frame="80" value="-46.1434" />
                                                                                                                        <Key frame="86" value="-46.1434" />
                                                                                                                        <Key frame="105" value="-39.0215" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-40.4326" />
                                                                                                                        <Key frame="26" value="-102.484" />
                                                                                                                        <Key frame="56" value="-41.5752" />
                                                                                                                        <Key frame="65" value="-41.2236" />
                                                                                                                        <Key frame="74" value="-41.3994" />
                                                                                                                        <Key frame="105" value="-40.7842" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="0.0502082" />
                                                                                                                        <Key frame="26" value="0.0763898" />
                                                                                                                        <Key frame="56" value="0.125481" />
                                                                                                                        <Key frame="65" value="0.154208" />
                                                                                                                        <Key frame="74" value="0.166208" />
                                                                                                                        <Key frame="105" value="0.258207" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="119.496" />
                                                                                                                        <Key frame="20" value="119.5" />
                                                                                                                        <Key frame="26" value="111.889" />
                                                                                                                        <Key frame="36" value="119.496" />
                                                                                                                        <Key frame="43" value="119.496" />
                                                                                                                        <Key frame="48" value="119.496" />
                                                                                                                        <Key frame="56" value="119.008" />
                                                                                                                        <Key frame="65" value="116.723" />
                                                                                                                        <Key frame="74" value="82.5327" />
                                                                                                                        <Key frame="80" value="51.0681" />
                                                                                                                        <Key frame="86" value="51.0681" />
                                                                                                                        <Key frame="105" value="84.2027" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-61.5266" />
                                                                                                                        <Key frame="20" value="-21" />
                                                                                                                        <Key frame="26" value="-20" />
                                                                                                                        <Key frame="36" value="-20" />
                                                                                                                        <Key frame="43" value="-21" />
                                                                                                                        <Key frame="48" value="-0.498473" />
                                                                                                                        <Key frame="56" value="-26.1941" />
                                                                                                                        <Key frame="65" value="-32.3466" />
                                                                                                                        <Key frame="74" value="-40.4326" />
                                                                                                                        <Key frame="80" value="-50" />
                                                                                                                        <Key frame="86" value="-39" />
                                                                                                                        <Key frame="105" value="-8.61579" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="43.8556" />
                                                                                                                        <Key frame="20" value="-9" />
                                                                                                                        <Key frame="26" value="-14.7682" />
                                                                                                                        <Key frame="36" value="-5" />
                                                                                                                        <Key frame="43" value="-5" />
                                                                                                                        <Key frame="48" value="-5" />
                                                                                                                        <Key frame="56" value="-4.66067" />
                                                                                                                        <Key frame="65" value="-3.95753" />
                                                                                                                        <Key frame="74" value="-1.49656" />
                                                                                                                        <Key frame="80" value="0.0352695" />
                                                                                                                        <Key frame="86" value="0.0352695" />
                                                                                                                        <Key frame="105" value="52.2932" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="40.6963" />
                                                                                                                        <Key frame="20" value="2" />
                                                                                                                        <Key frame="26" value="88.5" />
                                                                                                                        <Key frame="36" value="89.5017" />
                                                                                                                        <Key frame="43" value="40" />
                                                                                                                        <Key frame="48" value="0.498473" />
                                                                                                                        <Key frame="56" value="5.53958" />
                                                                                                                        <Key frame="65" value="1.23289" />
                                                                                                                        <Key frame="74" value="10.901" />
                                                                                                                        <Key frame="80" value="26" />
                                                                                                                        <Key frame="86" value="32.0829" />
                                                                                                                        <Key frame="105" value="21.7996" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="66.0043" />
                                                                                                                        <Key frame="26" value="98.8758" />
                                                                                                                        <Key frame="56" value="61.8734" />
                                                                                                                        <Key frame="65" value="61.7855" />
                                                                                                                        <Key frame="74" value="61.8734" />
                                                                                                                        <Key frame="105" value="62.137" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="0" />
                                                                                                                        <Key frame="20" value="0" />
                                                                                                                        <Key frame="26" value="0.0182082" />
                                                                                                                        <Key frame="43" value="0" />
                                                                                                                        <Key frame="56" value="0.16439" />
                                                                                                                        <Key frame="65" value="0.171662" />
                                                                                                                        <Key frame="74" value="0.176753" />
                                                                                                                        <Key frame="105" value="0.215298" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-26.9804" />
                                                                                                                        <Key frame="20" value="0" />
                                                                                                                        <Key frame="32" value="0.441863" />
                                                                                                                        <Key frame="36" value="-2.73208e-05" />
                                                                                                                        <Key frame="43" value="-37.5274" />
                                                                                                                        <Key frame="56" value="-28.5624" />
                                                                                                                        <Key frame="65" value="-49.217" />
                                                                                                                        <Key frame="74" value="-39.9" />
                                                                                                                        <Key frame="80" value="-23.0475" />
                                                                                                                        <Key frame="86" value="-23.0475" />
                                                                                                                        <Key frame="105" value="-13.1814" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="2.55126" />
                                                                                                                        <Key frame="20" value="8.991e-06" />
                                                                                                                        <Key frame="32" value="3.34229" />
                                                                                                                        <Key frame="36" value="8.991e-06" />
                                                                                                                        <Key frame="43" value="-3.71174" />
                                                                                                                        <Key frame="48" value="31" />
                                                                                                                        <Key frame="56" value="8.87947" />
                                                                                                                        <Key frame="65" value="-10.0173" />
                                                                                                                        <Key frame="74" value="0.529755" />
                                                                                                                        <Key frame="80" value="11" />
                                                                                                                        <Key frame="86" value="10" />
                                                                                                                        <Key frame="105" value="8.70368" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="14.3288" />
                                                                                                                        <Key frame="20" value="-10" />
                                                                                                                        <Key frame="32" value="21.448" />
                                                                                                                        <Key frame="36" value="-10" />
                                                                                                                        <Key frame="43" value="-67.4992" />
                                                                                                                        <Key frame="48" value="-90" />
                                                                                                                        <Key frame="56" value="-49.1291" />
                                                                                                                        <Key frame="65" value="-3.24959" />
                                                                                                                        <Key frame="74" value="-26.1014" />
                                                                                                                        <Key frame="80" value="-49" />
                                                                                                                        <Key frame="86" value="-47.8986" />
                                                                                                                        <Key frame="105" value="12.2194" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="5.2711" />
                                                                                                                        <Key frame="20" value="96" />
                                                                                                                        <Key frame="32" value="115.751" />
                                                                                                                        <Key frame="36" value="96" />
                                                                                                                        <Key frame="43" value="61.7515" />
                                                                                                                        <Key frame="48" value="96" />
                                                                                                                        <Key frame="56" value="120.937" />
                                                                                                                        <Key frame="65" value="121.024" />
                                                                                                                        <Key frame="74" value="121.039" />
                                                                                                                        <Key frame="80" value="121.039" />
                                                                                                                        <Key frame="86" value="121.039" />
                                                                                                                        <Key frame="105" value="-5.10012" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="47.2833" />
                                                                                                                        <Key frame="20" value="14" />
                                                                                                                        <Key frame="32" value="-26.0184" />
                                                                                                                        <Key frame="36" value="14" />
                                                                                                                        <Key frame="43" value="38.8165" />
                                                                                                                        <Key frame="48" value="38" />
                                                                                                                        <Key frame="56" value="-26.1062" />
                                                                                                                        <Key frame="65" value="-63.1087" />
                                                                                                                        <Key frame="74" value="-68.1542" />
                                                                                                                        <Key frame="80" value="-68.1542" />
                                                                                                                        <Key frame="86" value="-68.1542" />
                                                                                                                        <Key frame="105" value="4.65586" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-1.93121" />
                                                                                                                        <Key frame="20" value="0" />
                                                                                                                        <Key frame="32" value="-1.93121" />
                                                                                                                        <Key frame="36" value="0" />
                                                                                                                        <Key frame="43" value="9.80246" />
                                                                                                                        <Key frame="48" value="-6" />
                                                                                                                        <Key frame="56" value="-22.6737" />
                                                                                                                        <Key frame="65" value="-5.71056" />
                                                                                                                        <Key frame="74" value="2.46337" />
                                                                                                                        <Key frame="80" value="6.76691" />
                                                                                                                        <Key frame="86" value="5" />
                                                                                                                        <Key frame="105" value="-7.81996" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="-8.52309" />
                                                                                                                        <Key frame="20" value="0" />
                                                                                                                        <Key frame="32" value="-1.31597" />
                                                                                                                        <Key frame="36" value="0" />
                                                                                                                        <Key frame="43" value="3.54635" />
                                                                                                                        <Key frame="48" value="-31" />
                                                                                                                        <Key frame="56" value="-31.9902" />
                                                                                                                        <Key frame="65" value="-34.9785" />
                                                                                                                        <Key frame="74" value="-35.9" />
                                                                                                                        <Key frame="80" value="-17" />
                                                                                                                        <Key frame="86" value="-1" />
                                                                                                                        <Key frame="105" value="-3.60116" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="10.6325" />
                                                                                                                        <Key frame="20" value="-10" />
                                                                                                                        <Key frame="32" value="16.1697" />
                                                                                                                        <Key frame="36" value="-10" />
                                                                                                                        <Key frame="43" value="-66.7243" />
                                                                                                                        <Key frame="48" value="-90" />
                                                                                                                        <Key frame="56" value="-87.3668" />
                                                                                                                        <Key frame="65" value="-89.3883" />
                                                                                                                        <Key frame="74" value="-59" />
                                                                                                                        <Key frame="80" value="-51.9" />
                                                                                                                        <Key frame="86" value="-51.9" />
                                                                                                                        <Key frame="105" value="11.9509" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="10.9889" />
                                                                                                                        <Key frame="20" value="96" />
                                                                                                                        <Key frame="32" value="116.107" />
                                                                                                                        <Key frame="36" value="96" />
                                                                                                                        <Key frame="43" value="62.6734" />
                                                                                                                        <Key frame="48" value="96" />
                                                                                                                        <Key frame="56" value="69.9642" />
                                                                                                                        <Key frame="65" value="63.0208" />
                                                                                                                        <Key frame="74" value="62.1" />
                                                                                                                        <Key frame="80" value="50.2" />
                                                                                                                        <Key frame="86" value="101" />
                                                                                                                        <Key frame="105" value="-4.39218" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="26.7215" />
                                                                                                                        <Key frame="20" value="14" />
                                                                                                                        <Key frame="32" value="-21.4432" />
                                                                                                                        <Key frame="36" value="14" />
                                                                                                                        <Key frame="43" value="41.102" />
                                                                                                                        <Key frame="48" value="38" />
                                                                                                                        <Key frame="56" value="45.003" />
                                                                                                                        <Key frame="65" value="44.9151" />
                                                                                                                        <Key frame="74" value="25.3" />
                                                                                                                        <Key frame="80" value="23.1" />
                                                                                                                        <Key frame="86" value="-33.2" />
                                                                                                                        <Key frame="105" value="4.66067" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="10" value="9.5826" />
                                                                                                                        <Key frame="20" value="4.94951e-06" />
                                                                                                                        <Key frame="32" value="-2.28278" />
                                                                                                                        <Key frame="36" value="4.94951e-06" />
                                                                                                                        <Key frame="43" value="-9.21535" />
                                                                                                                        <Key frame="48" value="6" />
                                                                                                                        <Key frame="56" value="0.529755" />
                                                                                                                        <Key frame="65" value="-5.62267" />
                                                                                                                        <Key frame="74" value="25.4" />
                                                                                                                        <Key frame="80" value="38.9384" />
                                                                                                                        <Key frame="86" value="15.9" />
                                                                                                                        <Key frame="105" value="3.60596" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                            <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="SideToBelly" robot="" id="4" tooltip="Lie down on the back or the belly from an other lie down position (on the side)." bitmap_expanded="1" plugin="" x="656" y="93">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="41.3067" />
                                                                                                                        <Key frame="10" value="41.3067" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="8.52309" />
                                                                                                                        <Key frame="10" value="8.52309" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="108.72" />
                                                                                                                        <Key frame="10" value="108.72" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="45.965" />
                                                                                                                        <Key frame="10" value="45.965" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-56.8684" />
                                                                                                                        <Key frame="10" value="-56.8684" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-26.8046" />
                                                                                                                        <Key frame="10" value="-26.8046" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-38.8505" />
                                                                                                                        <Key frame="10" value="-38.8505" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="0.200389" />
                                                                                                                        <Key frame="10" value="0.200389" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="113.383" />
                                                                                                                        <Key frame="10" value="113.383" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-44.6514" />
                                                                                                                        <Key frame="10" value="-44.6514" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="52.9084" />
                                                                                                                        <Key frame="10" value="52.9084" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="19.5144" />
                                                                                                                        <Key frame="10" value="19.5144" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="37" />
                                                                                                                        <Key frame="10" value="37" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="0.146571" />
                                                                                                                        <Key frame="10" value="0.146571" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-65.5648" />
                                                                                                                        <Key frame="10" value="-65.5648" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="14.4166" />
                                                                                                                        <Key frame="10" value="14.4166" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="2.02391" />
                                                                                                                        <Key frame="10" value="2.02391" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-5.27591" />
                                                                                                                        <Key frame="10" value="-5.27591" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="20.3885" />
                                                                                                                        <Key frame="10" value="20.3885" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="19.6902" />
                                                                                                                        <Key frame="10" value="19.6902" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-1.75543" />
                                                                                                                        <Key frame="10" value="-1.75543" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="23.8163" />
                                                                                                                        <Key frame="10" value="23.8163" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-5.2711" />
                                                                                                                        <Key frame="10" value="-5.2711" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="29.9735" />
                                                                                                                        <Key frame="10" value="29.9735" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="5" value="-3.86483" />
                                                                                                                        <Key frame="10" value="-3.86483" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                            <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHand" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                                                                            <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                                                                            <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                                                                                        </Box>
                                                                                                        <Box name="Switch Case" robot="" id="1" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;output matching, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="923" y="96">
                                                                                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Back")):
			self.output_1(p)
		elif(p == ("Knee")):
			self.output_2(p)
		elif(p == ("Frog")):
			self.output_3(p)
		elif(p == ("Belly")):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <keywords>
                                                                                                                    <keyword>&quot;Back&quot;</keyword>
                                                                                                                    <keyword>&quot;Knee&quot;</keyword>
                                                                                                                    <keyword>&quot;Frog&quot;</keyword>
                                                                                                                    <keyword>&quot;Belly&quot;</keyword>
                                                                                                                    <keyword></keyword>
                                                                                                                </keywords>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to test." id="2" />
                                                                                                            <Output name="onDefault" type="1" type_size="1" nature="1" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                                                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                                                                        </Box>
                                                                                                        <Box name="Switch Case" robot="" id="7" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;output matching, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="955" y="621">
                                                                                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Crouch")):
			self.output_1(p)
		elif(p == ("Stand")):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <keywords>
                                                                                                                    <keyword>&quot;Crouch&quot;</keyword>
                                                                                                                    <keyword>&quot;Stand&quot;</keyword>
                                                                                                                    <keyword></keyword>
                                                                                                                </keywords>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to test." id="2" />
                                                                                                            <Output name="onDefault" type="1" type_size="1" nature="1" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="Get Robot Pose" robot="" id="8" tooltip="Return NAO&apos;s current pose.&#x0A;&#x0A;Note: The box waits for the robot pose to be stabilized. You can set the maximum&#x0A;time to wait in parameters. After this time is ellapsed, the current pose is sent to the&#x0A;output anyway." bitmap_expanded="1" plugin="" x="89" y="41">
                                                                                                            <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.robotPoseProxy = ALProxy("ALRobotPose")
        self.threadTime = 0.1 #seconds

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        beginTime = time.time()
        RobotPoseAndTime = ["Unknown", 0.]
        while( not self.bMustStop ):
            RobotPoseAndTime = self.robotPoseProxy.getActualPoseAndTime()
            # as soon as the robot is not moving anymore from its position, give its position
            if( RobotPoseAndTime[1] > 0.5 or time.time() - beginTime > self.getParameter("Time to wait for pose stabilization (s)") ):
                self.bMustStop = True
            if( not self.bMustStop ):
                time.sleep(self.threadTime)
        self.robotPose(RobotPoseAndTime[0])
        self.bIsRunning = False]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="robotPose" type="3" type_size="1" nature="2" inner="0" tooltip='NAO&apos;s current pose. It can be:&#x0A;- &quot;Unknown&quot;&#x0A;- &quot;Stand&quot;&#x0A;- &quot;Sit&quot;&#x0A;- &quot;Crouch&quot;&#x0A;- &quot;Knee&quot;&#x0A;- &quot;Frog&quot;&#x0A;- &quot;Back&quot;&#x0A;- &quot;Belly&quot;&#x0A;- &quot;Left&quot;&#x0A;- &quot;Right&quot;&#x0A;- &quot;HeadBack&quot;' id="3" />
                                                                                                            <Parameter name="Time to wait for pose stabilization (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.5" max="10" tooltip="Maximum time to wait NAO&apos;s pose stabilization. After this time is ellapsed,&#x0A;the current pose is sent to the output even though it is not stabilized." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Get Robot Pose" robot="" id="10" tooltip="Return NAO&apos;s current pose.&#x0A;&#x0A;Note: The box waits for the robot pose to be stabilized. You can set the maximum&#x0A;time to wait in parameters. After this time is ellapsed, the current pose is sent to the&#x0A;output anyway." bitmap_expanded="1" plugin="" x="794" y="96">
                                                                                                            <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.robotPoseProxy = ALProxy("ALRobotPose")
        self.threadTime = 0.1 #seconds

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        beginTime = time.time()
        RobotPoseAndTime = ["Unknown", 0.]
        while( not self.bMustStop ):
            RobotPoseAndTime = self.robotPoseProxy.getActualPoseAndTime()
            # as soon as the robot is not moving anymore from its position, give its position
            if( RobotPoseAndTime[1] > 0.5 or time.time() - beginTime > self.getParameter("Time to wait for pose stabilization (s)") ):
                self.bMustStop = True
            if( not self.bMustStop ):
                time.sleep(self.threadTime)
        self.robotPose(RobotPoseAndTime[0])
        self.bIsRunning = False]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="robotPose" type="3" type_size="1" nature="2" inner="0" tooltip='NAO&apos;s current pose. It can be:&#x0A;- &quot;Unknown&quot;&#x0A;- &quot;Stand&quot;&#x0A;- &quot;Sit&quot;&#x0A;- &quot;Crouch&quot;&#x0A;- &quot;Knee&quot;&#x0A;- &quot;Frog&quot;&#x0A;- &quot;Back&quot;&#x0A;- &quot;Belly&quot;&#x0A;- &quot;Left&quot;&#x0A;- &quot;Right&quot;&#x0A;- &quot;HeadBack&quot;' id="3" />
                                                                                                            <Parameter name="Time to wait for pose stabilization (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.5" max="10" tooltip="Maximum time to wait NAO&apos;s pose stabilization. After this time is ellapsed,&#x0A;the current pose is sent to the output even though it is not stabilized." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Get Robot Pose" robot="" id="2" tooltip="Return NAO&apos;s current pose.&#x0A;&#x0A;Note: The box waits for the robot pose to be stabilized. You can set the maximum&#x0A;time to wait in parameters. After this time is ellapsed, the current pose is sent to the&#x0A;output anyway." bitmap_expanded="1" plugin="" x="828" y="626">
                                                                                                            <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.robotPoseProxy = ALProxy("ALRobotPose")
        self.threadTime = 0.1 #seconds

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        beginTime = time.time()
        RobotPoseAndTime = ["Unknown", 0.]
        while( not self.bMustStop ):
            RobotPoseAndTime = self.robotPoseProxy.getActualPoseAndTime()
            # as soon as the robot is not moving anymore from its position, give its position
            if( RobotPoseAndTime[1] > 0.5 or time.time() - beginTime > self.getParameter("Time to wait for pose stabilization (s)") ):
                self.bMustStop = True
            if( not self.bMustStop ):
                time.sleep(self.threadTime)
        self.robotPose(RobotPoseAndTime[0])
        self.bIsRunning = False]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="robotPose" type="3" type_size="1" nature="2" inner="0" tooltip='NAO&apos;s current pose. It can be:&#x0A;- &quot;Unknown&quot;&#x0A;- &quot;Stand&quot;&#x0A;- &quot;Sit&quot;&#x0A;- &quot;Crouch&quot;&#x0A;- &quot;Knee&quot;&#x0A;- &quot;Frog&quot;&#x0A;- &quot;Back&quot;&#x0A;- &quot;Belly&quot;&#x0A;- &quot;Left&quot;&#x0A;- &quot;Right&quot;&#x0A;- &quot;HeadBack&quot;' id="3" />
                                                                                                            <Parameter name="Time to wait for pose stabilization (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.5" max="10" tooltip="Maximum time to wait NAO&apos;s pose stabilization. After this time is ellapsed,&#x0A;the current pose is sent to the output even though it is not stabilized." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Set Stiffness" robot="" id="6" tooltip="Set motors stiffness." bitmap_expanded="1" plugin="" x="241" y="275">
                                                                                                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            ALMotion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            ALMotion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            ALMotion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            ALMotion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            ALMotion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                                                                                                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                                                                                                            <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                                                                                                            <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                                                                                                            <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                                                                                                            <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                                                                                                            <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                                                                                                            <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                                                                                                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.02" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="3" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="9" indexofoutput="7" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="9" indexofoutput="8" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="9" indexofoutput="9" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="6" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="6" />
                                                                                                        <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="10" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                                        <Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="11" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                        <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Only Once" robot="" id="4" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is." bitmap_expanded="1" plugin="" x="111" y="45">
                                                                                        <bitmap>media/images/box/box-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                                        <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                                    </Box>
                                                                                    <Box name="Set Stiffness" robot="" id="2" tooltip="Set motors stiffness." bitmap_expanded="1" plugin="" x="716" y="177">
                                                                                        <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            ALMotion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            ALMotion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            ALMotion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            ALMotion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            ALMotion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                                                                                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                                                                                        <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                                                                                        <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                                                                                        <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                                                                                        <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                                                                                        <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                                                                                        <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                                                                                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                                                                                    </Box>
                                                                                    <Box name="Get Robot Pose" robot="" id="9" tooltip="Return NAO&apos;s current pose.&#x0A;&#x0A;Note: The box waits for the robot pose to be stabilized. You can set the maximum&#x0A;time to wait in parameters. After this time is ellapsed, the current pose is sent to the&#x0A;output anyway." bitmap_expanded="1" plugin="" x="305" y="73">
                                                                                        <bitmap>media/images/box/sensors/inertial_unit.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.robotPoseProxy = ALProxy("ALRobotPose")
        self.threadTime = 0.1 #seconds

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False

    def onUnload(self):
        self.bMustStop = True

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        beginTime = time.time()
        RobotPoseAndTime = ["Unknown", 0.]
        while( not self.bMustStop ):
            RobotPoseAndTime = self.robotPoseProxy.getActualPoseAndTime()
            # as soon as the robot is not moving anymore from its position, give its position
            if( RobotPoseAndTime[1] > 0.5 or time.time() - beginTime > self.getParameter("Time to wait for pose stabilization (s)") ):
                self.bMustStop = True
            if( not self.bMustStop ):
                time.sleep(self.threadTime)
        self.robotPose(RobotPoseAndTime[0])
        self.bIsRunning = False]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="robotPose" type="3" type_size="1" nature="2" inner="0" tooltip='NAO&apos;s current pose. It can be:&#x0A;- &quot;Unknown&quot;&#x0A;- &quot;Stand&quot;&#x0A;- &quot;Sit&quot;&#x0A;- &quot;Crouch&quot;&#x0A;- &quot;Knee&quot;&#x0A;- &quot;Frog&quot;&#x0A;- &quot;Back&quot;&#x0A;- &quot;Belly&quot;&#x0A;- &quot;Left&quot;&#x0A;- &quot;Right&quot;&#x0A;- &quot;HeadBack&quot;' id="3" />
                                                                                        <Parameter name="Time to wait for pose stabilization (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.5" max="10" tooltip="Maximum time to wait NAO&apos;s pose stabilization. After this time is ellapsed,&#x0A;the current pose is sent to the output even though it is not stabilized." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="20" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="10" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="10" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="3" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="3" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="20" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="ConfirmExit" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="414" y="34">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Yes" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="No" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="326" y="189">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="72" y="191">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "Are you sure you want to exit the demo?"
		sFrench = "Etes vous sûr de vouloir quitter la démo ?"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>你好</chinese>
                                                                        <english>Are you sure you want to exit the demo?</english>
                                                                        <french>Etes vous sûr de vouloir quitter la démo ?</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese>Olá</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Box name="Choice" robot="" id="6" tooltip="Configure speech recognition to select an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="456" y="189">
                                                                    <bitmap>media/images/box/icons_appu/voice_recognition.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# Choice
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="4" />
                                                                    <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="5" />
                                                                    <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="30" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="oui;non" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="yes;no" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                                    <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                                        <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                                        <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                        <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                                        <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                                        <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                                        <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                                        <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                                        <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                                        <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                                        <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                                        <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                                        <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                                        <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                                        <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                                        <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                                        <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                                        <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                                        <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                                        <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                                        <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                                        <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                                        <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                                        <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                                        <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                                    </Box>
                                                                                    <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                                        <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                                        <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                                            <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                                            <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                                        <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                    </Box>
                                                                                    <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Switch Case" robot="" id="1" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="524" y="10">
                                                                    <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>0</keyword>
                                                                            <keyword>1</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                </Box>
                                                                <Box name="Say" robot="" id="3" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="460" y="371">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "You can use my head to choose if you prefer"
		sFrench = "Tu peux utiliser ma tête pour choisir si tu préfères."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <chinese>你好</chinese>
                                                                                            <english>You can use my head to choose if you prefer</english>
                                                                                            <french>Tu peux utiliser ma tête pour choisir si tu préfères.</french>
                                                                                            <german>Hallo</german>
                                                                                            <italian>Ciao</italian>
                                                                                            <japanese>こんにちは</japanese>
                                                                                            <korean>안녕하세요 </korean>
                                                                                            <portuguese>Olá</portuguese>
                                                                                            <spanish>Hola</spanish>
                                                                                            <language>2</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoExit" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="592" y="8">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Exit" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="BehaviorNotFound" robot="" id="14" tooltip="If something went wrong while loading a behavior, tell the user it won&apos;t work.&#x0A;We could put some animation here to make this less technical and help lower the impact of the issue." bitmap_expanded="1" plugin="" x="864" y="212">
                                                <bitmap>media/images/box/icons_appu/break.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Receive the name of the behavior that could not be loaded." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="578" y="137">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onName(self, s):
        self.sName = s
        
    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if self.sName != None:
                sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
                sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
                sentence += str(p)
                sentence +=  "\RST\ "
                sentence = sentence.format(name=self.sName)
                
                id = self.tts.post.say(str(sentence))
                self.ids.append(id)
                self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onName" type="3" type_size="1" nature="1" inner="0" tooltip="get the name of the behavior that could not be loaded." id="2" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="6" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="7" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="234" y="192">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "I could not execute {name}. You might want to connect me to choregraphe to check what happened."
		sFrench = "Je n'arrive pas à exécuter {name}. Il faudrait peut être me connecter à chorégraphe pour vérifier ce qui s'est passé."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>你好</chinese>
                                                                        <english>I could not execute {name}. You might want to connect me to choregraphe to check what happened.</english>
                                                                        <french>Je n&apos;arrive pas à exécuter {name}. Il faudrait peut être me connecter à chorégraphe pour vérifier ce qui s&apos;est passé.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese>Olá</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="3" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Text Edit" robot="" id="10" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="999" y="294">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Try to launch the selected behavior. Once finished, go back to autonomous life.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Try to launch the selected behavior. Once finished, go back to autonomous life.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="15" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="685" y="570">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Read
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
        except:
            p = None
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="DistractionTextParam" robot="" id="16" tooltip="Pronounce sentences one after the other. Can be interrupted when no need to continue speaking." bitmap_expanded="1" plugin="" x="312" y="397">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="StartTalking" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="stopTalking" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="SplitText" robot="" id="2" tooltip="Split the text given as parameter, and send each part after the previous one was said if the box was not stopped.&#x0A;Each part is separated by a * sign." bitmap_expanded="1" plugin="" x="367" y="129">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bQuit = False
        self.nIndex = 0

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.aListSentences = p.split("*")
        self.onInput_sendNextText()        

    def onInput_sendNextText(self):
        if (self.nIndex < len(self.aListSentences)) and not self.bQuit:
            self.sendText(self.aListSentences[self.nIndex])
            self.nIndex += 1
        else:
            self.onStopped()

    def onInput_stopSendingText(self):
        self.bQuit = True

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="sendNextText" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="stopSendingText" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                    <Output name="sendText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="371" y="288">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="4" indexofinput="3" outputowner="11" indexofoutput="9" />
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="20" indexofoutput="7" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="3" outputowner="11" indexofoutput="7" />
                                            <Link inputowner="20" indexofinput="3" outputowner="11" indexofoutput="9" />
                                            <Link inputowner="9" indexofinput="4" outputowner="11" indexofoutput="8" />
                                            <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="3" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="20" indexofinput="4" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="17" indexofinput="2" outputowner="11" indexofoutput="9" />
                                            <Link inputowner="20" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="2" outputowner="20" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="17" indexofoutput="5" />
                                            <Link inputowner="16" indexofinput="2" outputowner="11" indexofoutput="10" />
                                            <Link inputowner="16" indexofinput="3" outputowner="20" indexofoutput="7" />
                                            <Link inputowner="9" indexofinput="2" outputowner="20" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Exit" index="71" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="403" y="17">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="92" y="17">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "I am leaving the demonstration"
		sFrench = "Je quitte la démonstration"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>你好</chinese>
                                                    <english>I am leaving the demonstration</english>
                                                    <french>Je quitte la démonstration</french>
                                                    <german>Hallo</german>
                                                    <italian>Ciao</italian>
                                                    <japanese>こんにちは</japanese>
                                                    <korean>안녕하세요 </korean>
                                                    <portuguese>Olá</portuguese>
                                                    <spanish>Hola</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="1" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="238" y="143">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Quit the demonstration.\nWARNING. If there is no launcher, the robot will need to be restarted to get out of autonomous life.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Quit the demonstration.&#x0A;WARNING. If there is no launcher, the robot will need to be restarted to get out of autonomous life.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="Events" mute="0">
                                    <BehaviorKeyframe name="Animations" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Event" robot="" id="8" tooltip="Create a new event, and trigger the event with input value.&#x0A;&#x0A;Set the value of autonomous/animations to true so Nao knows it must be animated here." bitmap_expanded="1" plugin="" x="332" y="18">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/animations" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="1" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="86" y="21">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped(True)
	def onInput_input_2(self):
			self.onStopped(False)
	def onInput_input_3(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>True</keyword>
                                                        <keyword>False</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="97" y="136">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("In this state, animation are enabled")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>In this state, animation are enabled</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="No animations" index="19" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Event" robot="" id="8" tooltip="Create a new event, and trigger the event with input value.&#x0A;&#x0A;Set the value of autonomous/animations to false so Nao knows it must not be animated here." bitmap_expanded="1" plugin="" x="321" y="23">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/animations" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="1" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="94" y="23">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped(True)
	def onInput_input_2(self):
			self.onStopped(False)
	def onInput_input_3(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>True</keyword>
                                                        <keyword>False</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="119" y="152">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("In this state, animation are disabled")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>In this state, animation are disabled</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="tactile_sensors" mute="0">
                                    <BehaviorKeyframe name="Autonomous internal state" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Subscribe" robot="" id="12" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="73" y="190">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/internal_state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="gotoFace" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="445" y="61">
                                                <bitmap>media/images/box/icons_appu/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Face" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="4" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="214" y="129">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("breathe")):
			self.output_1(p)
		elif(p == ("play")):
			self.output_2(p)
		elif(p == ("talk")):
			self.output_3(p)
		elif(p == (None)):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;breathe&quot;</keyword>
                                                        <keyword>&quot;play&quot;</keyword>
                                                        <keyword>&quot;talk&quot;</keyword>
                                                        <keyword>None</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            </Box>
                                            <Box name="gotoNoFace" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="450" y="190">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="No face" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoMenu" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="218" y="291">
                                                <bitmap>media/images/box/icons_appu/menu.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Menu" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="TactileCodes" robot="" id="1" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="73" y="289">
                                                <bitmap>media/images/box/icons_appu/fingerprint.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                <Output name="SecretCode" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="18" />
                                                <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="19" />
                                                <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="20" />
                                                <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="21" />
                                                <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="22" />
                                                <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="29" />
                                                <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="30" />
                                            </Box>
                                            <Box name="Stop" robot="" id="6" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." bitmap_expanded="1" plugin="" x="73" y="5">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="ReadInternalState" robot="" id="8" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="74" y="98">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
            self.onStopped(p)
        except:
            pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/internal_state" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Read" robot="" id="16" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="223" y="415">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Read
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/lock" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="17" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="411" y="419">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Unlock")):
			self.output_1(p)
		elif(p == ("Lock")):
			self.output_2(p)
		elif(p == (None)):
			self.output_3(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Unlock&quot;</keyword>
                                                        <keyword>&quot;Lock&quot;</keyword>
                                                        <keyword>None</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                            </Box>
                                            <Box name="Multi Edit" robot="" id="20" tooltip="Send the value in front of the input stimulated (can be all python language&#x0A;types: string, int, float, array, etc).&#x0A;&#x0A;You can edit a value by left double-clicking on the line. You can add a&#x0A;value by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a value by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="multiplexer_plugin" x="651" y="421">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("Lock")
	def onInput_input_2(self):
			self.onStopped("Unlock")
	def onInput_input_3(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Lock&quot;</keyword>
                                                        <keyword>&quot;Unlock&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Value correponding to the input stimulated (in front if it)." id="4" />
                                            </Box>
                                            <Box name="SaveLock" robot="" id="21" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="889" y="424">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Save
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/lock" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="3" />
                                            <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="17" />
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="20" indexofinput="3" outputowner="17" indexofoutput="5" />
                                            <Link inputowner="20" indexofinput="2" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="7" />
                                            <Link inputowner="20" indexofinput="2" outputowner="17" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="19" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="watch_state" mute="0">
                                    <BehaviorKeyframe name="Autonomous state" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Subscribe" robot="" id="9" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="101" y="129">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Read" robot="" id="10" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="98" y="15">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
            self.onStopped(p)
        except:
            pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="11" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="245" y="86">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("system")):
			self.output_1(p)
		elif(p == ("standup")):
			self.output_2(p)
		elif(p == ("sitdown")):
			self.output_3(p)
		elif(p == ("rest")):
			self.output_4(p)
		elif(p == ("life")):
			self.output_5(p)
		elif(p == ("wait")):
			self.output_6(p)
		elif(p == (None)):
			self.output_7(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;system&quot;</keyword>
                                                        <keyword>&quot;standup&quot;</keyword>
                                                        <keyword>&quot;sitdown&quot;</keyword>
                                                        <keyword>&quot;rest&quot;</keyword>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword>&quot;wait&quot;</keyword>
                                                        <keyword>None</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                                <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                                            </Box>
                                            <Box name="gotoVoid" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="498" y="77">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Void" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoNoFace" robot="" id="1" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="498" y="171">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="No face" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="6" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="8" />
                                            <Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="10" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="61" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="standby" mute="0">
                                    <BehaviorKeyframe name="Check" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="WaitStandby" robot="" id="1" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again.&#x0A;Reads the time to wait from the memory." bitmap_expanded="1" plugin="" x="192" y="52">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if self.tb:
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        try:
            nTime = ALMemory.getData("/commercial/standby")
            #self.log("read timeout = %s mins" %nTime) 
        except:
            self.log("reading timeout problem")
            nTime = 120
        #transform minutes seconds and start the timer
        self.startTimer(nTime * 60)

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                            </Box>
                                            <Box name="gotoStandby" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="359" y="51">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Standby" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Empty" index="37" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="SelectUser" robot="" id="7" tooltip="Selection of the user that will be used for the demonstration." bitmap_expanded="1" plugin="" x="77" y="46">
                            <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_SetLanguage_onStart(self):
        #~ Initialize memory data
        for sLang in ["English", "French", "Spanish", "Chinese"]:
            ALMemory.insertData("/commercial/reco/%s/" % sLang, [])
            ALMemory.insertData("/commercial/say/%s/" % sLang, [])
                
        ALMemory.insertData("/commercial/names", [])
        ALMemory.insertData("pauseBehavior", False)

        #~ Select user
        self.onStopped(self.getParameter("UserName"))]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="SetLanguage_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="UserName" inherits_from_parent="0" content_type="3" value="Final" default_value="Final" custom_choice="1" tooltip="You can select different user that will lead to a different setup of demos. You can also add your own user, then you should add an entry in the next box too." id="4">
                                <Choice value="NoMenu" />
                                <Choice value="Menu" />
                                <Choice value="Final" />
                            </Parameter>
                        </Box>
                        <Box name="User" robot="" id="8" tooltip="Dispatch an event carrying an information, depending on the information value. The information will be tested against all the values of the table, and the matching output will be stimulated!" bitmap_expanded="1" plugin="dispatcher_plugin" x="222" y="47">
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("NoMenu")):
			self.output_1(p)
		elif(p == ("Menu")):
			self.output_2(p)
		elif(p == ("Final")):
			self.output_3(p)
		else:
			self.onDefault()]]>
</content>
                            </script>
                            <pluginContent>
                                <keywords>
                                    <keyword>&quot;NoMenu&quot;</keyword>
                                    <keyword>&quot;Menu&quot;</keyword>
                                    <keyword>&quot;Final&quot;</keyword>
                                    <keyword></keyword>
                                </keywords>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                            <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                        </Box>
                        <Box name="Stop Fan" robot="" id="16" tooltip="Stop fan during speech recognition process." bitmap_expanded="1" plugin="" x="83" y="164">
                            <bitmap>media/images/box/icons_appu/500px-Shuffle_icon.svg.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Disable fan during speech recognition        
        asr = ALProxy("ALSpeechRecognition")
        asr.setParameter("ShutDownFan", 0)

    def onInput_onStart(self):
        # Disable fan during speech recognition        
        asr = ALProxy("ALSpeechRecognition")
        asr.setParameter("ShutDownFan", 1)
        self.onStopped()
        
    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Text Edit" robot="" id="2" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="258" y="315">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Modify the content of final to add or modify a demo.")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>Modify the content of final to add or modify a demo.</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="InstallAbcdkOnNao" robot="" id="3" tooltip="This box will install the enclosed abcdk on the robot" bitmap_expanded="1" plugin="" x="84" y="279">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.strInstallPath = "/home/nao/naoqi/lib/python";
       

    def onLoad(self):
        #~ puts code for box initialization here
        self.strCurrentBehaviorPath = ALFrameManager.getBehaviorPath(self.behaviorId);        


    def onUnload(self):
        #~ puts code for box cleanup here
        pass
        
        
    def find_abcdk( self ):
        "find somewhere an abcdk and make it usable with import <abcdk_module>"

        if( os.path.exists( self.strInstallPath + "/abcdk" ) ):
            # ok, nothing to do
            pass
        else:
            sys.path.append( self.strCurrentBehaviorPath );
    # find_abcdk - end
    
    def getAbcdkVersion( self, strLibPath ):
        import abcdk.filetools as filetools
        import abcdk.stringtools as stringtools
        strFile = strLibPath + "/abcdk/__init__.py";
        enclosedFileData = filetools.getFileContents( strFile );
        nPick = enclosedFileData.find( "__version__" );
        if( nPick == -1 ):
            print( "INF: LifeData.getFileVersion: no version number found in %s (file size: %d)" % ( strFile, len( enclosedFileData ) ) );
            return "0.0";
        strVersion = stringtools.findBetween( enclosedFileData[nPick:], "'", "'" ); # look for string contents between ' and '
        print( "strVersion: '%s'" % str( strVersion ) );
        return strVersion;
    # getAbcdkVersion - end
        
    def getInstalledVersion( self ):
        "get current installed version of abcdk in the system"
        return self.getAbcdkVersion( self.strInstallPath );
    # getInstalledVersion - end
    
    
    def getEnclosedVersion( self ):
        "get enclosed version of abcdk"
        return self.getAbcdkVersion( self.strCurrentBehaviorPath );
    # getEnclosedVersion - end    
        
    def install_abcdk(self):
        "install enclosed version on system"
        self.log( "Installing a new abcdk" );
        print( "cwd: %s" % os.getcwd() );
        try:
            os.makedirs( self.strInstallPath );        
        except BaseException, err:
            print( "%s: WRN: this warning should be something that told the directory already exists: %s" % ( self.boxName, str( err ) ) );
        
        import abcdk.filetools as filetools
        import abcdk.misc as misc
        filetools.copyDirectory( self.strCurrentBehaviorPath + "/abcdk/", self.strInstallPath + "/abcdk" );
        misc.reloadAllModules();
    # install_abcdk - end    

    def onInput_onStart(self):
        self.find_abcdk();
        strInstalledVersion = self.getInstalledVersion();
        strEnclosedVersion = self.getEnclosedVersion();        
        self.log( "%s: strInstalledVersion: %s" % ( self.boxName,strInstalledVersion ) );
        self.log( "%s: strEnclosedVersion: %s" % ( self.boxName, strEnclosedVersion ) );        
        import abcdk.stringtools as stringtools        
        if( stringtools.isVersionFresher( strInstalledVersion, strEnclosedVersion ) ):
            self.install_abcdk();
            pass
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="demos_Menu" robot="" id="5" tooltip='Contains the settings and description of all available demos for &quot;Menu&quot; user.&#x0A;THIS IS AN EXAMPLE OF WHAT COULD BE DONE WITH THE MENUS. NOT THE DEFAULT COMMERCIAL DEMONSTRATION.' bitmap_expanded="1" plugin="" x="478" y="154">
                            <bitmap>media/images/box/icons_appu/checklist.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Auto" default_value="Auto" custom_choice="0" tooltip="" id="4">
                                <Choice value="English" />
                                <Choice value="French" />
                                <Choice value="Spanish" />
                                <Choice value="Auto" />
                            </Parameter>
                            <Parameter name="Volume" inherits_from_parent="0" content_type="1" value="95" default_value="95" min="0" max="100" tooltip="" id="5" />
                            <Parameter name="Standby timeout (min)" inherits_from_parent="0" content_type="1" value="30" default_value="20" min="0" max="300" tooltip="If noone interacts with Nao during this amount of time, Nao will go to rest.&#x0A;In minutes." id="6" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="98">
                                            <Box name="Mandatory settings" robot="" id="24" tooltip="These behaviors are mandatory for the demonstration to work fine.&#x0A;Be careful before modifying it." bitmap_expanded="1" plugin="" x="186" y="121">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        asr = ALProxy("ALSpeechRecognition")
        tts = ALProxy("ALTextToSpeech")
        ad = ALProxy("ALAudioDevice")
        
        sLang = self.getParameter("Language")
        if sLang == "Auto":
            sLang = tts.getLanguage()
        ALMemory.insertData("/commercial/language", sLang)
        tts.loadVoicePreference("NaoOfficialVoice" + sLang)
        asr.setLanguage(sLang)
        
        ad.setOutputVolume(self.getParameter("Volume"))
        ALMemory.insertData("/commercial/standby", self.getParameter("Standby timeout (min)"))
        ALMemory.insertData("autonomous/lock", "Unlock")
        self.onStopped()
        

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="WriteListInMemory" robot="" id="25" tooltip="Save the list of behaviors that was created in ALMemory.&#x0A;Internal operations.&#x0A;Be careful before editing." bitmap_expanded="1" plugin="" x="602" y="121">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)        
        self.aLanguages =["English", "French", "Spanish", "Chinese"]

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        # insert the list of names in the memory
        ALMemory.insertData("/commercial/names", p[0])

        # insert the list of sentences to recognize / pronounce        
        nLanguageIndex = 0
        for sLang in self.aLanguages:
            ALMemory.insertData("/commercial/reco/%s/" %sLang, p[1][nLanguageIndex])
            ALMemory.insertData("/commercial/say/%s/" %sLang, p[2][nLanguageIndex])                        
            nLanguageIndex += 1
            
        self.onStopped() 

    def onInput_onStop(self):
        #self.onUnload()
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Root" robot="" id="14" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="391" y="120">
                                                <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Your last menu / behavior box MUST be linked to this output only." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="This output MUST NOT be linked to any behavior / menu of the list. It is called internally.&#x0A;" id="5" />
                                                <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reco_menu;Que veux-tu que je fasse ?/Veux-tu que je fasse autre chose ?/Dis-moi ce que tu veux que je fasse !/Tu peux me demander quelque chose !/Alors que fait-t&apos;on maintenant?/Que puis-je faire pour toi?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="Reco_menu;What do you want me to do ?/Do you want me to do something else ?/Tell me what to do/You can ask something !/So what do we do now?/What can I do for you?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="96">
                                                                <Box name="MenuEntertainment" robot="" id="14" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="143" y="78">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Divertissement/ Amusons nous/ Amuses nous/ Divertis nous;Super, on va s&apos;amuser" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Entertainment/ Entertain us; Cool, let&apos;s have fun" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="100">
                                                                                    <Box name="DanceLoader" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="223" y="33">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="dance_loader" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Danses/Je voudrais que tu danses; Ok, laisses moi me concentrer./ il faut que je rassemble mon grouve!/  Tu es prêt à être ébahi?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Dance/I would like you to dance; Ok, let me concentrate./ I need to gather my groove!/  Are you ready to be amazed?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="MenuEducation" robot="" id="3" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="283" y="75">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="éducation/ Apprends nous des choses / Tu t&apos;y connais en éducation?;Je peux aider dans une salle de classe./Les enfants m&apos;adorent alors imaginez ce que je pourrais faire dans une salle de classe./ Je pourrais faire un très bon professeur, une fois que j&apos;aurai révisé un peu mes leçons." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Education/ Could you teach children?; I can help in a classroom./ Children love me. Imagine what I could do in a classroom./ I could be a really good teacher." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Sports" robot="" id="15" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="332" y="30">
                                                                                        <bitmap>media/images/box/icons_appu/tennis.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="guess_sport" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Imite des sports;Super, on va faire un jeu" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Mimic a sport;Great, we&apos;re gonna play a funny game" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="猜运动;太好了，大家一起来做游戏" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="LeftRight" robot="" id="11" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="183" y="31">
                                                                                        <bitmap>media/images/box/icons_appu/hands.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="left_and_right" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Gauche droite;C&apos;est très intéressant pour les enfants autistes" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Left and right;This is very useful for autistic kids" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Mano derecha e izquierda" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="左手右手;这个游戏对自闭症孩子的治疗很有帮助" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="StarWars" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="480" y="28">
                                                                                        <bitmap>media/images/box/icons_appu/starwars.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="starwars" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Raconte une histoire;D&apos;accord, assayez-vous et écoutez mon histoire./ Je vais vous raconter mon histoire préférée./ Prenez place et écoutez / Vous la connaissez peut être déjà, mais je suis bien meilleur acteur." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Tell us a story;Yes, just take a seat and listen to me./  I will tell you my favorite story/ Maybe you already know it, but I am a better actor" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Cuentanos una historia" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="讲故事;好的，请坐好注意听" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="Powerpoint" robot="" id="2" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="422" y="164">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="temp_powerpoint" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="slides: Je vais te faire une présentation" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="slides; I am going to make you a presentation" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="MenuRobotics" robot="" id="1" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="410" y="74">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Robotique / Montre nous tes capacités; Parlons de sujets plus techniques./ Tu vas voir pourquoi je suis très utilisé pour la recherche." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Robotics / Be serious please.; Let&apos;s talk about more technical subjects./ You will see why I am widely used for research." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Languages" robot="" id="15" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="220" y="36">
                                                                                        <bitmap>media/images/box/icons_appu/languages.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="languages2" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Parle plusieurs langues;Facile pour moi, je suis \RSPD=80\ polyglotte./ Je voyage beaucoup, c&apos;est la raison pour laquelle je parle tant de langues./  Ce n&apos;est pas un problème pour moi, je suis toujours curieux d&apos;aprendre une nouvelle langue." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Speak in different languages;Easy for me, I&apos;m polyglot/ I&apos;m travelling a lot, that&apos;s why i can speak so many languages./  It is not a problem for me, I am always eager to learn new languages." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Habla diferentes idiomas" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="说外语;太容易了，我通晓多国语言" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="Presentation" robot="" id="11" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="86" y="37">
                                                                                        <bitmap>media/images/box/icons_appu/info.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="presentation" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Présente toi;D&apos;accord, Parlons un peu de moi/ J&apos;adore parler de moi !/ Je vais te donner quelques détails sur moi." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Presentation; Sure, let&apos;s talk about me./ I love talking about me./ I am going to give you some details about me." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Presentate" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="自我介绍;好的，让我介绍一下自己" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="FaceReco" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="504" y="184">
                                                                                        <bitmap>media/images/box/icons_appu/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="facerecognition" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reconnais des visages;C&apos;est, je suis capable de reconnaitre des visages" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Activate face recognition;Indeed, I can recognize faces" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Nos reconoces?" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="面部识别;当然，我能够识别人脸。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="UseBall" robot="" id="5" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="359" y="36">
                                                                                        <bitmap>media/images/box/icons_appu/redball.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="use_ball" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Joue avec la balle; Ok, prépares ta balle/Ok, j&apos;espère que tu n&apos;as pas oublié ta balle./ Je suis très doué avec une balle./ J&apos;espère que tu n&apos;as pas oublié ta balle cette fois-ci./ Tu as bien pensé à prendre ta balle aujourd&apos;hui?/ Je peux faire plein de choses avec une balle." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Play with a ball; Ok, get your ball ready./Ok, I hope you did not forget your ball./ I am really good with a ball/ I hope you did not forget your ball this time./ You thought about taking your ball today, right?/ I can do lots of things with a ball. " default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="Replay" robot="" id="2" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="375" y="184">
                                                                                        <bitmap>media/images/box/icons_appu/recorder.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="moverecorder" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Rejoue tes mouvements;Fais bouger mes bras et ma tête et regarde ce qui se passe." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Replay;\Pau=500\ You can move my arms or my head and see what happen" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Registra tus movimientos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="动作模仿;请移动我的手臂和头，看看会发生什么事情？" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="FollowMe" robot="" id="4" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="504" y="36">
                                                                                        <bitmap>media/images/box/movement/walk_arc.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="followme" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi la main;D&apos;accord je te suis." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Follow me;Ok, I give you my hand." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Sigueme" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="Exploration" robot="" id="6" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="231" y="184">
                                                                                        <bitmap>media/images/box/icons_appu/find_guess.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="explore4" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Va te promener;Bonne idée, je vais me promener un peu/Rien de mieux qu&apos;une promenade pour s&apos;oxygéner./ Je vais visiter un peu/ Laissez moi visiter. Je vais me débrouiller tout seul." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Exploration;Good idea, I&apos;m going to explore the surrounding./There is nothing like a good walk./ I am going to visit this place./ Let me visit, I can handle myself." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Exploracion" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="漫步;好主意，我出去转转。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Standup" robot="" id="7" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="281" y="208">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="standing" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="lève toi/debout" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="stand up" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="起立" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Sitdown" robot="" id="4" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="415" y="208">
                                                                    <bitmap>media/images/box/movement/sit_ground.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="sitting" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="assied toi/assis" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="sit down" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="坐下" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Shutup" robot="" id="5" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="539" y="208">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="shutup" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="silence" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="keep quiet/rest" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="请安静;好的，我先休息一会儿" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Exit" robot="" id="8" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="486" y="441">
                                                                    <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="exit" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="quitter" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="exit" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="MenuAssistance" robot="" id="2" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="529" y="75">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Assistance/ Aide moi/ Aide moi s&apos;il te plait/Assistes moi;Très bien, de quoi as tu besoin?/Que-puis-je pour toi?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Assistance/ Could you help me?/ Assist me; How can I help you?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Email" robot="" id="15" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="332" y="29">
                                                                                        <bitmap>media/images/box/internet/email.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="email" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="As tu des mails?;Donne moi le temps de me connecter à ton compte" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Do I have mail?;Let me connect to your account" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Tienes correos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读邮件;好的，我马上查看您的新邮件。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Box name="Rss" robot="" id="11" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="181" y="32">
                                                                                        <bitmap>media/images/box/icons_appu/rssfeed.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi les informations;Je vais regarder sur internet quelles sont les nouvelles." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="Read me the news; I&apos;m going to get the news from the internet" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读新闻;好的，我将通过互联网查找您喜欢的新闻" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="MenuDialog" robot="" id="9" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="148" y="205">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Conversation/ Une petite conversation?/ Discutons un peu; Tu as un petit peu de temps? Je peux être très bavard./ Combien de temps m&apos;accordes tu?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Conversation/ You want to talk? / Let&apos;s discuss/ Do you want to talk?; How much time do you have?/ You have some time? I can be really talkative." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="DialogIntel" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="201" y="59">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="dialog_intel" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="5 minutes / Tu as 5 minutes;Très bien, écoutez moi bien./ Laisse moi réfléchir à ce que je vais vous dire/Tu vas m&apos;aider à me présenter." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="5 minutes/ I give you 5 minutes.;You will help me present myself." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="24" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="25" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="3" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="25" indexofinput="2" outputowner="14" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="demos_noMenu" robot="" id="6" tooltip='Contains the settings and description of all available demos for &quot;NoMenu&quot; user.&#x0A;LEGACY' bitmap_expanded="1" plugin="" x="470" y="26">
                            <bitmap>media/images/box/icons_appu/checklist.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Auto" default_value="Auto" custom_choice="0" tooltip="" id="4">
                                <Choice value="English" />
                                <Choice value="French" />
                                <Choice value="Spanish" />
                                <Choice value="Auto" />
                            </Parameter>
                            <Parameter name="Volume" inherits_from_parent="0" content_type="1" value="95" default_value="95" min="0" max="100" tooltip="" id="5" />
                            <Parameter name="Standby timeout (min)" inherits_from_parent="0" content_type="1" value="30" default_value="20" min="0" max="300" tooltip="If noone interacts with Nao during this amount of time, Nao will go to rest.&#x0A;In minutes." id="6" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="98">
                                            <Box name="WriteListInMemory" robot="" id="1" tooltip="Save the list of behaviors that was created in ALMemory.&#x0A;Internal operations.&#x0A;Be careful before editing." bitmap_expanded="1" plugin="" x="610" y="66">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)        
        self.aLanguages =["English", "French", "Spanish", "Chinese"]

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        # insert the list of names in the memory
        ALMemory.insertData("/commercial/names", p[0])

        # insert the list of sentences to recognize / pronounce        
        nLanguageIndex = 0
        for sLang in self.aLanguages:
            ALMemory.insertData("/commercial/reco/%s/" %sLang, p[1][nLanguageIndex])
            ALMemory.insertData("/commercial/say/%s/" %sLang, p[2][nLanguageIndex])                        
            nLanguageIndex += 1
            
        self.onStopped() 

    def onInput_onStop(self):
        #self.onUnload()
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Root" robot="" id="2" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="426" y="66">
                                                <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Link your last box to this output." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Do no link ANYTHING to this output." id="5" />
                                                <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reco_menu;Que veux-tu que je fasse ?/Veux-tu que je fasse autre chose ?/Dis-moi ce que tu veux que je fasse !/Tu peux me demander quelque chose !" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="Reco_menu;What do you want me to do ?/Do you want me to do something else ?/Tell me what to do?/You can ask something !" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="96">
                                                                <Box name="DanceLoader" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="234" y="698">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="dance_loader" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Danses/Je voudrais que tu danses; Ok, laisses moi me concentrer." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Dance/I would like you to dance; Ok, let me concentrate" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Sports" robot="" id="15" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="604" y="167">
                                                                    <bitmap>media/images/box/icons_appu/tennis.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="guess_sport" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Imite des sports;Super, on va faire un jeu" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Mimic a sport;Great, we&apos;re gonna play a funny game" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="猜运动;太好了，大家一起来做游戏" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="LeftRight" robot="" id="11" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="460" y="174">
                                                                    <bitmap>media/images/box/icons_appu/hands.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="left_and_right" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Gauche droite;C&apos;est très intéressant pour les enfants autistes" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Left and right;This is very useful for autistic kids" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Mano derecha e izquierda" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="左手右手;这个游戏对自闭症孩子的治疗很有帮助" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="StarWars" robot="" id="2" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="154" y="299">
                                                                    <bitmap>media/images/box/icons_appu/starwars.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="starwars" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Raconte une histoire;D&apos;accord, assayez-vous et écoutez mon histoire./ Je vais vous raconter mon histoire préférée./ Prenez place et écoutez / Vous la connaissez peut être déjà, mais je suis bien meilleur acteur." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Tell us a story;Yes, just take a seat and listen to me./  I will tell you my favorite story/ Maybe you already know it, but I am a better actor" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Cuentanos una historia" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="讲故事;好的，请坐好注意听" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Languages" robot="" id="3" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="327" y="295">
                                                                    <bitmap>media/images/box/icons_appu/languages.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="languages2" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Parle plusieurs langues;Facile pour moi, je suis \RSPD=80\ polyglotte./ Je voyage beaucoup, c&apos;est la raison pour laquelle je parle tant de langues./  Ce n&apos;est pas un problème pour moi, je suis toujours curieux d&apos;aprendre une nouvelle langue." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Speak in different languages;Easy for me, I&apos;m polyglot/ I&apos;m travelling a lot, that&apos;s why i can speak so many languages./  It is not a problem for me, I am always eager to learn new languages." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Habla diferentes idiomas" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="说外语;太容易了，我通晓多国语言" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Presentation" robot="" id="4" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="150" y="50">
                                                                    <bitmap>media/images/box/icons_appu/info.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="presentation" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Présente toi;D&apos;accord, Parlons un peu de moi/ J&apos;adore parler de moi !/ Je vais te donner quelques détails sur moi." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Presentation; Sure, let&apos;s talk about me/ I love talking about me./ I am going to give you some details about me." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Presentate" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="自我介绍;好的，让我介绍一下自己" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="FaceReco" robot="" id="5" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="458" y="427">
                                                                    <bitmap>media/images/box/icons_appu/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="facerecognition" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reconnais des visages;C&apos;est, je suis capable de reconnaitre des visages" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Activate face recognition;Indeed, I can recognize faces" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Nos reconoces?" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="面部识别;当然，我能够识别人脸。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="UseBall" robot="" id="6" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="465" y="300">
                                                                    <bitmap>media/images/box/icons_appu/redball.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="use_ball" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Joue avec la balle; Ok, prépares ta balle/Ok, j&apos;espère que tu n&apos;as pas oublié ta balle./ Je suis très doué avec une balle./ J&apos;espère que tu n&apos;as pas oublié ta balle cette fois-ci./ Tu as bien pensé à prendre ta balle aujourd&apos;hui?/ Je peux faire plein de choses avec une balle." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Play with a ball; Ok, get your ball ready./Ok, I hope you did not forget your ball./ I am really good with a ball/ I hope you did not forget your ball this time./ You thought about taking your ball today, right?/ I can do lots of things with a ball. " default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Replay" robot="" id="7" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="313" y="428">
                                                                    <bitmap>media/images/box/icons_appu/recorder.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="moverecorder" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Rejoue tes mouvements;Fais bouger mes bras et ma tête et regarde ce qui se passe." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Replay;\Pau=500\ You can move my arms or my head and see what happens." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Registra tus movimientos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="动作模仿;请移动我的手臂和头，看看会发生什么事情？" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="FollowMe" robot="" id="8" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="611" y="289">
                                                                    <bitmap>media/images/box/movement/walk_arc.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="followme" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi la main;D&apos;accord je te suis." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Follow me;Ok, I give you my hand." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Sigueme" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Exploration" robot="" id="9" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="147" y="427">
                                                                    <bitmap>media/images/box/icons_appu/find_guess.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="explore4" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Va te promener;Bonne idée, je vais me promener un peu/Rien de mieux qu&apos;une promenade pour s&apos;oxygéner./ Je vais visiter un peu/ Laissez moi visiter. Je vais me débrouiller tout seul." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Exploration;Good idea, I&apos;m going to explore the surrounding./There is nothing like a good walk./ I am going to visit this place./ Let me visit, I can handle myself." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Exploracion" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="漫步;好主意，我出去转转。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Email" robot="" id="10" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="150" y="560">
                                                                    <bitmap>media/images/box/internet/email.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="email" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="As tu des mails?;Oui, donne moi le temps de me connecter à ton compte" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Do I have mail?;Yes, let me connect to your account" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Tienes correos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读邮件;好的，我马上查看您的新邮件。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Rss" robot="" id="12" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="608" y="427">
                                                                    <bitmap>media/images/box/icons_appu/rssfeed.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi les informations;Ok, je vais regarder sur internet quelles sont les nouvelles." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Read me the news;Ok, I&apos;m going to get the news from the internet" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读新闻;好的，我将通过互联网查找您喜欢的新闻" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Standup" robot="" id="14" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="296" y="565">
                                                                    <bitmap>media/images/box/movement/stand.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="standing" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="lève toi/debout" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="stand up" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="起立" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Sitdown" robot="" id="16" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="420" y="565">
                                                                    <bitmap>media/images/box/movement/sit_ground.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="sitting" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="assied toi/assis" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="sit down" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="坐下" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Shutup" robot="" id="17" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="562" y="566">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="shutup" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="silence" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="keep quiet/rest" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="请安静;好的，我先休息一会儿" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="vangelis" robot="" id="18" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="426" y="48">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="vangelis" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Impressionne nous;Je suis vraiment fier de cette danse.*J&apos;espère que je vais vous impressionner*Soyez attentifs." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Impress us;I am really proud of this dance.*I hope I will impress you.*Pay attention." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Sorprendenos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="来个惊喜;我的芭蕾舞跳的可好呢" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="taichii" robot="" id="19" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="298" y="49">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="taichii" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Fais du taïchi;J&apos;aime beaucoup le ta i chii*ça m&apos;aide à me relaxer*et c&apos;est bon pour le corps" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Favorite dance;I really like taichii*It helps me relax*And It is good for the body" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="baile favorito" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="中国舞;当然，我很喜欢跳舞。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="thriller" robot="" id="20" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="148" y="173">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="thriller" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Danse thriller; Vous savez, j&apos;aime beaucoup Maykeul Jackçone.*J&apos;aurais aimé danser avec lui.*C&apos;est dommage que je n&apos;ai  pas été né pour le clip." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Famous dance; You know, I really like Michael Jackson.*I would have liked to dance with him.*Too bad I was not born for the clip." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Baila con ritmo" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="太空舞;哈哈，这个舞蹈节奏很快呢" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="CaravanPalace" robot="" id="21" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="310" y="176">
                                                                    <bitmap>media/images/box/icons_appu/caravan_palace.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="caravan_palace" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Caravane palace;Ah ! c&apos;est une danse que j&apos;ai faite à Shangaï*Elle est très dynamique.*Vous allez adorer." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Caravan palace;Yes, I did this danse in Shangaï*It is really dynamic.*You will be amazed." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Baila con ritmo" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="上海舞;好的，我给大家跳一个老上海的舞曲" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="16" indexofinput="2" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="17" indexofoutput="4" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="20" indexofinput="2" outputowner="18" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Mandatory settings" robot="" id="3" tooltip="These behaviors are mandatory for the demonstration to work fine.&#x0A;Be careful before modifying it." bitmap_expanded="1" plugin="" x="199" y="58">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        asr = ALProxy("ALSpeechRecognition")
        tts = ALProxy("ALTextToSpeech")
        ad = ALProxy("ALAudioDevice")
        
        sLang = self.getParameter("Language")
        if sLang == "Auto":
            sLang = tts.getLanguage()
        ALMemory.insertData("/commercial/language", sLang)
        tts.loadVoicePreference("NaoOfficialVoice" + sLang)
        asr.setLanguage(sLang)
        
        ad.setOutputVolume(self.getParameter("Volume"))
        ALMemory.insertData("/commercial/standby", self.getParameter("Standby timeout (min)"))
        ALMemory.insertData("autonomous/lock", "Unlock")
        self.onStopped()
        

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="demos_Final" robot="" id="1" tooltip='Contains the settings and description of all available demos for &quot;Final&quot; user.&#x0A;This is the new version of the commercial demonstration.' bitmap_expanded="1" plugin="" x="481" y="280">
                            <bitmap>media/images/box/icons_appu/checklist.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Auto" default_value="Auto" custom_choice="0" tooltip="" id="4">
                                <Choice value="English" />
                                <Choice value="French" />
                                <Choice value="Spanish" />
                                <Choice value="Auto" />
                            </Parameter>
                            <Parameter name="Volume" inherits_from_parent="0" content_type="1" value="95" default_value="95" min="0" max="100" tooltip="" id="5" />
                            <Parameter name="Standby timeout (min)" inherits_from_parent="0" content_type="1" value="30" default_value="20" min="0" max="300" tooltip="If noone interacts with Nao during this amount of time, Nao will go to rest.&#x0A;In minutes." id="6" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="98">
                                            <Box name="WriteListInMemory" robot="" id="1" tooltip="Save the list of behaviors that was created in ALMemory.&#x0A;Internal operations.&#x0A;Be careful before editing." bitmap_expanded="1" plugin="" x="610" y="66">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)        
        self.aLanguages =["English", "French", "Spanish", "Chinese"]

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        # insert the list of names in the memory
        ALMemory.insertData("/commercial/names", p[0])

        # insert the list of sentences to recognize / pronounce        
        nLanguageIndex = 0
        for sLang in self.aLanguages:
            ALMemory.insertData("/commercial/reco/%s/" %sLang, p[1][nLanguageIndex])
            ALMemory.insertData("/commercial/say/%s/" %sLang, p[2][nLanguageIndex])                        
            nLanguageIndex += 1
            
        self.onStopped() 

    def onInput_onStop(self):
        #self.onUnload()
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Root" robot="" id="2" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="426" y="66">
                                                <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Link your last box to this output." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Do no link ANYTHING to this output." id="5" />
                                                <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reco_menu;Que veux-tu que je fasse ?/Veux-tu que je fasse autre chose ?/Dis-moi ce que tu veux que je fasse !/Tu peux me demander quelque chose !" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="Reco_menu;What do you want me to do ?/Do you want me to do something else ?/Tell me what to do?/You can ask something !" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="96">
                                                                <Box name="DanceLoader" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="275" y="66">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="dance_loader" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Danses/Je voudrais que tu danses; Ok, laisses moi me concentrer.*J&apos;ai juste besoin de quelques secondes.*Après ça, vous allez être impressionnés/ Donne moi quelques secondes*Il faut que je rassemble mon groove !*ça vaudra le coup d&apos;attendre un peu/ Tu es prêt à être ébahi?*donne moi juste un peu de temps*Tu comprends, je dois me concentrer." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Dance/I would like you to dance;Ok, let me concentrate*I just need a few seconds*After that, you will be amazed/ Give me a few seconds*I need to gather my groove!*It will be worth the wait/ Are you ready to be amazed?*just give me some time*You see, I need to concentrate." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Sports" robot="" id="15" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="556" y="68">
                                                                    <bitmap>media/images/box/icons_appu/tennis.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="guess_sport" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Imite des sports;Super, on va faire un jeu.*Tu te doutes que je suis très sportif*C&apos;est l&apos;occasion de voir ce dont je suis capable.*Je ne suis peut être pas encore capable de gagner la coupe du monde, mais ça ne saurait tarder.*J&apos;ai juste besoin d&apos;entrainement." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Mimic a sport;Great, we&apos;re gonna play a funny game.*I am sure you know how good I can be at sports.*This is the occasion to see what I am capable of.*I may not be capable to win the world cup now, but it is just a matter of time.*I just need to train. " default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="猜运动;太好了，大家一起来做游戏" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="LeftRight" robot="" id="11" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="412" y="71">
                                                                    <bitmap>media/images/box/icons_appu/hands.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="left_and_right" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Gauche droite;C&apos;est très intéressant pour les enfants autistes.*Bien sûr, ce n&apos;est qu&apos;un exemple de ce dont je suis capable*On pourrait imaginer d&apos;autres exercices similaires" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Left and right;This is very useful for autistic kids.*Obviously, it is only an example of what I can do.*We could imagine other similar exercises." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Mano derecha e izquierda" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="左手右手;这个游戏对自闭症孩子的治疗很有帮助" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="StarWars" robot="" id="2" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="106" y="200">
                                                                    <bitmap>media/images/box/icons_appu/starwars.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="starwars" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Raconte une histoire;D&apos;accord, asseyez-vous et écoutez mon histoire.*ça va peut être vous rappeller quelque chose *vous allez voir, on s&apos;y croirait / Je vais vous raconter mon histoire préférée.*J&apos;espère que vous allez apprécier*asseyez-vous/ Prenez place et écoutez*Je vais vous raconter une histoire*c&apos;est ma préférée/ Je vais vous raconter une histoire.*Vous la connaissez peut être déjà, mais je suis bien meilleur acteur.*J&apos;espère que vous allez apprécier." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Tell us a story;Yes, just take a seat and listen to me.* Maybe it will remind you of something.* you will see, it is as if you were there./ I will tell you my favorite story* I hope you will appreciate it* just sit down and listen / I am going to tell you a story*Maybe you already know it, but I am a better actor*I hope you will appreciate it." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Cuentanos una historia" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="讲故事;好的，请坐好注意听" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Languages" robot="" id="3" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="279" y="196">
                                                                    <bitmap>media/images/box/icons_appu/languages.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="languages2" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Parle plusieurs langues;Facile pour moi, je suis \RSPD=80\ polyglotte.*C&apos;est sûrement parce que je voyage beaucoup/ Je voyage beaucoup, c&apos;est la raison pour laquelle je parle tant de langues.*ça me permet de communiquer avec beaucoup de monde./ Ce n&apos;est pas un problème pour moi, je suis toujours curieux d&apos;aprendre une nouvelle langue. *Je peux visiter beaucoup de pays grâce à ça." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Speak in different languages;Easy for me, I&apos;m polyglot.*I think it is because I travel a lot/ I&apos;m travelling a lot, that&apos;s why i can speak so many languages.* It allows me to talk to a lot of people. / It is not a problem for me, I am always eager to learn new languages.*I can visit a lot of countries thanks to that." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Habla diferentes idiomas" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="说外语;太容易了，我通晓多国语言" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Presentation" robot="" id="4" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="112" y="64">
                                                                    <bitmap>media/images/box/icons_appu/info.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="presentation" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Présente toi;D&apos;accord, Parlons un peu de moi.*Il y a beaucoup de choses à dire*Mais je vais essayer de te faire un résumé/ J&apos;adore parler de moi !*Je vais essayer de ne pas prendre trop de temps*Mais j&apos;aurais beaucoup de choses à dire/ Je vais te donner quelques détails sur moi*On va essayer de ne pas faire trop long*donc je vais vous faire un petit résumé." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Presentation; Sure, let&apos;s talk about me.*There is so much to say*but I will try to give you a quick summary/ I love talking about me!*I will try not to take too much time* but there would be so much to say./ I am going to give you some details about me.*I will try to make it quick*so I will give you a short summary" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Presentate" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="自我介绍;好的，让我介绍一下自己" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="FaceReco" robot="" id="5" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="410" y="328">
                                                                    <bitmap>media/images/box/icons_appu/face.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="facerecognition" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Reconnais des visages;C&apos;est vrai, je suis capable de reconnaitre des visages*ça me permet de me souvenir des gens que j&apos;ai rencontré/ Je peux en effet reconnaitre des visages.*comme ça, je peux me rappeler si je t&apos;ai déjà vu quelque part." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Activate face recognition;Indeed, I can recognize faces*It allows me to remember people I already met./I can indeed recognize faces*This way, I can remember if I already saw you somewhere." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Nos reconoces?" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="面部识别;当然，我能够识别人脸。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="UseBall" robot="" id="6" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="417" y="201">
                                                                    <bitmap>media/images/box/icons_appu/redball.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="use_ball" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Joue avec la balle; Ok, j&apos;espère que tu n&apos;as pas oublié ta balle.*Je crois me souvenir que c&apos;était le cas la dernière fois. /Ok, prépares ta balle.*Si tu n&apos;en a pas, je ne vais pas pouvoir faire grand chose tu sais/ Je suis très doué avec une balle*j&apos;espère juste que tu ne l&apos;as pas oubliée cette fois-ci/" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Play with a ball; Ok, get your ball ready.*If you do not have one, I will not be able to do much you know./ Ok, I hope you did not forget your ball.*I seem to remember it was the case the last time/ I am really good with a ball*I just hope you did not forget it today./ You thought about taking your ball today, right?*I would not like to disappoint people because of you" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Replay" robot="" id="7" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="265" y="329">
                                                                    <bitmap>media/images/box/icons_appu/recorder.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="moverecorder" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Rejoue tes mouvements;Fais bouger mes bras et ma tête et regarde ce qui se passe.*Tu vas voir qu&apos;il est très facile de m&apos;apprendre de nouveaux mouvements/A ton avis, que se passe-t&apos;il si tu bouges mes bras et ma tête?*Je vais te montrer à quel point il est simple de m&apos;apprendre de nouveaux mouvements/ Et si tu bougeais mes bras et ma tête?* Je vais te montrer comme c&apos;est simple de me faire apprendre des mouvements." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Replay;You can move my arms or my head and see what happens.*You will see that it is really easy to teach me new moves/What do you think will happen if you move my arms and my head?* I will show you how simple it is to teach me new moves.* What if you moved my arms or my head?*I will show you how easily you can make me learn new moves." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Registra tus movimientos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="动作模仿;请移动我的手臂和头，看看会发生什么事情？" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="FollowMe" robot="" id="8" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="563" y="190">
                                                                    <bitmap>media/images/box/movement/walk_arc.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="followme" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi la main;D&apos;accord je te suis.*Fais attention où tu marches/Très bien, je te fais confiance*mais ne m&apos;emmène pas n&apos;importe où." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Follow me;Ok, I give you my hand.*Be careful where you put your feet./Well, I will follow you*but please pay attention to where you are taking me." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Sigueme" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Exploration" robot="" id="9" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="99" y="328">
                                                                    <bitmap>media/images/box/icons_appu/find_guess.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="explore4" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Va te promener;Bonne idée, je vais me promener un peu.*ça va me dégourdir les jambes*et m&apos;oxygéner*Je me demande ce que je vais découvrir par ici/Rien de mieux qu&apos;une promenade pour s&apos;oxygéner.*C&apos;est bien aussi pour se dégourdir les jambes* et j&apos;aime bien explorer les alentours/  Laissez moi visiter* Je vais me débrouiller tout seul*Même si je tombe, je n&apos;ai pas besoin d&apos;aide de toute façon." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Exploration;Good idea, I am going to explore the surroundings.*Do not worry about me* Even if I fall, I can get up by myself/There is nothing like a good walk.*It is good to relax your legs*and I like to explore my surroundings/ Let me visit* I can handle myself.*Even if I fall, I can get up by myself" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Exploracion" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="漫步;好主意，我出去转转。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Email" robot="" id="10" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="411" y="452">
                                                                    <bitmap>media/images/box/internet/email.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="email" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="As tu des mails?;Donne moi le temps de me connecter à ton compte.*Je vais vérifier ça *J&apos;ai juste besoin de quelques secondes./Laisse moi vérifier*Je te dis ça dès que je suis connecté*Donne moi juste quelques secondes./ Je vais te dire ça dès que je serais connecté*donne moi juste quelques secondes pour vérifier." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Do I have mail?;Let me connect to your account* I am going to check this*I just need a few seconds./Let me check* I will tell you as soon as I am connected.*Just give me a few seconds/I will tell you as soon as I can connect to your account*just give me a few seconds to check." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Tienes correos" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读邮件;好的，我马上查看您的新邮件。" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="Rss" robot="" id="12" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="560" y="328">
                                                                    <bitmap>media/images/box/icons_appu/rssfeed.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="rssfeed" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Donne moi les informations;Je me demande ce qu&apos;il s&apos;est passé ces derniers temps.*Laisse moi me connecter et je te donne les nouvelles/Je vais regarder sur internet quelles sont les nouvelles.*Je me demande ce qui s&apos;est passé récemment." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Read me the news;I wonder what happened recently.*Let me connect and I will give you some news/I&apos;m going to get the news from the internet.*I wonder what happened these past few days." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="读新闻;好的，我将通过互联网查找您喜欢的新闻" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                </Box>
                                                                <Box name="MenuDialog" robot="" id="22" tooltip="Define a menu that will be added in the demonstration." bitmap_expanded="1" plugin="" x="552" y="454">
                                                                    <bitmap>media/images/box/icons_appu/menu2.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aLanguages =["English", "French", "Spanish", "Chinese"]
        
    def onLoad(self):
        self.menu = None
        self.bBuild = False
        
    def onUnload(self):
        pass
        
    def getLanguages(self):
        return self.aLanguages
        
    def getLanguagesCount(self):
        return len(self.aLanguages)
        
    def addMenuName(self, name):
        if len(self.menu[0])==0:
            self.menu[0].append(name)
        else:
            self.menu[0][-1].append([name])
        
    def addMenuLang(self, langindex, reco, say):
        self.menu[1][langindex].append([reco])
        self.menu[2][langindex].append([say])
        
    def addItemName(self, name):
        # Add the new item name
        self.menu[0].append(name)
        
    def addItemLang(self, langindex, reco, say):
        self.menu[1][langindex][-1].append(reco)
        self.menu[2][langindex][-1].append(say)
        
    def setMenu(self, menu):
        self.menu = menu
        
    def getMenu(self):
        return self.menu
        
    def buildMenu(self):
        if self.bBuild == True:
            return
            
        self.bBuild = True        
        # Retrieve the parent menu if any
        try:
            parentMenu = globals()[self.parentBoxName].getMenu()
        except:
            parentMenu = None

        if parentMenu!=None:
            parentMenu[0].append(self.menu[0])
            # Append the reco and say sentences for each language
            for i in range(self.getLanguagesCount()):
                for recoItems in self.menu[1][i]:
                    parentMenu[1][i][-1].append(recoItems)
                for sayItems in self.menu[2][i]:
                    parentMenu[2][i][-1].append(sayItems)
            # Update parent menu
            globals()[self.parentBoxName].setMenu(parentMenu)
                          
    def getEmptyMenu(self):
        #init a list for all sentences in all languages
        tmp = []
        tmp2 = []
        for sLang in range(self.getLanguagesCount()):
            tmp.append([])
            tmp2.append([])                
        return [[], tmp, tmp2]
            
    def onInput_onStart(self):
        if self.getParameter("Enable"):
            # Create a new empty menu for this box          
            self.menu = self.getEmptyMenu()
            self.addMenuName(self.boxName)
            
            # For each language, retrieve list or speech recognition sentences and append a new one
            for languageIndex in range(self.getLanguagesCount()):
                sentences = self.getParameter(self.aLanguages[languageIndex]).split(";")
                reco = None
                if len(sentences)>0:
                    say = None                    
                    reco = sentences[0]
                    if len(sentences)>1:
                        say =  sentences[1]
                self.addMenuLang(languageIndex, reco, say)

    #called only by the root box
    def onInput_onStop(self):
        tmpMenu = self.getEmptyMenu()
        tmpMenu[0].append(self.menu[0])
        tmpMenu[1] = self.menu[1]
        tmpMenu[2] = self.menu[2]
        self.onStopped(tmpMenu)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="5" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Conversation/ Une petite conversation?/ Discutons un peu; Tu as un petit peu de temps? Je peux être très bavard./ Combien de temps m&apos;accordes tu?" default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="6" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Conversation/ You want to talk? / Let&apos;s discuss/ Do you want to talk?; How much time do you have?/ You have some time? I can be really talkative." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="7" />
                                                                    <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="DialogIntel" robot="" id="1" tooltip="Define a behavior to integrate in the demo." bitmap_expanded="1" plugin="" x="201" y="59">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[#~ MenuItem
#~ Author : Rémy Varannes
#~ Date : 11/05/2011
#~ Version : 1.1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        # Tells the parent menu to append his own menu to its parent menu (is that not clear ?) 
        globals()[self.parentBoxName].buildMenu()
        pass

    def onInput_onStart(self):
        # Add to parent menu only if enabled
        if self.getParameter("Enable"):
            # Define the name of the item in the menu
            globals()[self.parentBoxName].addItemName(self.getParameter("Name"))
            aLanguages = globals()[self.parentBoxName].getLanguages()
            for languageIndex in range(len(aLanguages)):
                say = None
                reco = None
                # Get the reco and say sentences
                sentences = self.getParameter(aLanguages[languageIndex]).split(";")
                # Check if those sentences are defined
                if len(sentences)>0:
                    reco = sentences[0]
                    if len(sentences)>1:
                        say = sentences[1]
                # Define the reco and say sentences for this language
                globals()[self.parentBoxName].addItemLang(languageIndex, reco, say)
        self.onStopped()
            
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="dialog_intel" default_value="" custom_choice="0" tooltip='Nom de la démo. Il s&apos;agit du nom du projet, autrement dit, le nom du repertoire correspondant à cette démo sur le robot à l&apos;emplacement suivant : &quot;/home/nao/behaviors/name&quot;' id="5" />
                                                                                        <Parameter name="Enable" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Indique si la démo doit être activée dans la démonstration commerciale." id="6" />
                                                                                        <Parameter name="French" inherits_from_parent="0" content_type="3" value="5 minutes / Tu as 5 minutes;Ok, écoutez moi bien.*J&apos;ai beaucoup de choses à vous raconter*mais je vais faire vite/ 5 minutes? ce n&apos;est pas beaucoup!*Laisse moi réfléchir à ce que je vais vous dire*Tu aurais pu me laisser un peu plus de temps./Tu vas m&apos;aider à me présenter.*5 minutes ce n&apos;est pas beaucoup*donc je compte sur toi pour ne pas faire de bêtises." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en français" id="7" />
                                                                                        <Parameter name="English" inherits_from_parent="0" content_type="3" value="5 minutes/ I give you 5 minutes.;Ok, listen carefully*just let me think about what I will tell you.*I have a lot of things to tell you, but I will be quick/5 minutes? That&apos;s really short!*Let me think about what I will tell you.*You could have given me a little more time./You will help me present myself.*5 minutes is not that long*so I am counting on you to be serious." default_value="" custom_choice="0" tooltip="Phrase utilisée pour la reconnaissance vocale en anglais" id="8" />
                                                                                        <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="15" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="22" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Mandatory settings" robot="" id="3" tooltip="These behaviors are mandatory for the demonstration to work fine.&#x0A;Be careful before modifying it." bitmap_expanded="1" plugin="" x="199" y="58">
                                                <bitmap>media/images/box/icons_appu/erase.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        asr = ALProxy("ALSpeechRecognition")
        tts = ALProxy("ALTextToSpeech")
        ad = ALProxy("ALAudioDevice")
        
        sLang = self.getParameter("Language")
        if sLang == "Auto":
            sLang = tts.getLanguage()
        ALMemory.insertData("/commercial/language", sLang)
        tts.loadVoicePreference("NaoOfficialVoice" + sLang)
        asr.setLanguage(sLang)
        
        ad.setOutputVolume(self.getParameter("Volume"))
        ALMemory.insertData("/commercial/standby", self.getParameter("Standby timeout (min)"))
        ALMemory.insertData("autonomous/lock", "Unlock")
        self.onStopped()
        

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="3" />
                        <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="6" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
