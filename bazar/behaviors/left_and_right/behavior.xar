<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="101">
                        <Box name="Left&amp;Right" robot="" id="7" tooltip="Enter " bitmap_expanded="1" plugin="" x="187" y="99">
                            <bitmap>media/images/box/icons_appu/hands.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        ALMemory.insertData("answers", [0, 0])

    def onInput_Wait_onStop(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="Wait_onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                            <Output name="Replay" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Init" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Select Camera" robot="" id="8" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="87" y="24">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Box name="Stand" robot="" id="1" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="234" y="24">
                                                <bitmap>media/images/box/movement/move_head.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232025" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406935" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                <Resource name="LHand" type="Lock" timeout="0" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                <Resource name="RHand" type="Lock" timeout="0" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="gotoColor" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="369" y="23">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Color" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Stop" robot="" id="4" tooltip="Stop the timeline parent at the current frame index. Note that all the current behavior keyframes will still be loaded, and therefore the event logic will still work." bitmap_expanded="1" plugin="" x="89" y="122">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        self.stopTimelineParent()

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Color" index="10" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="gotoObject" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="951" y="258">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Object" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="533" y="258">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "把{color}球给我看一下"
		sEnglish = "Show me a {color} ball"
		sFrench = "Montre moi une balle {color}"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Enseñame una pelota {color}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>把{color}球给我看一下</chinese>
                                                    <english>Show me a {color} ball</english>
                                                    <french>Montre moi une balle {color}</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Enseñame una pelota {color}</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="SayColor" robot="" id="7" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="813" y="258">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        colorname = self.getParameter("colorname")
        self.log(sentence.format(color=colorname))
        id = self.tts.post.say(sentence.format(color=colorname))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Parameter name="colorname" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Multiplexer" robot="" id="8" tooltip="Depending on the stimulated input, tranmits the matching value through the main output." bitmap_expanded="1" plugin="multiplexer_plugin" x="533" y="18">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("Red")
	def onInput_input_2(self):
			self.onStopped("Yellow")
	def onInput_input_3(self):
			self.onStopped("Green")
	def onInput_input_4(self):
			self.onStopped("Blue")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Red&quot;</keyword>
                                                        <keyword>&quot;Yellow&quot;</keyword>
                                                        <keyword>&quot;Green&quot;</keyword>
                                                        <keyword>&quot;Blue&quot;</keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                            </Box>
                                            <Box name="Save" robot="" id="9" tooltip="Save head position in memory" bitmap_expanded="1" plugin="" x="762" y="19">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="ballcolor" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="Wait" robot="" id="3" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="100" y="155">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="Wait" robot="" id="5" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="380" y="272">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="ChoiceWithText" robot="" id="13" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="107" y="18">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onRecognizedIndex" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Choice" robot="" id="10" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="490" y="19">
                                                                    <bitmap>media/images/box/appu/voice_recognition.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="4" />
                                                                    <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="5" />
                                                                    <Output name="onRecognizedWord" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="7" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="20" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="8" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="9" />
                                                                    <Parameter name="French" inherits_from_parent="0" content_type="3" value="Rouge;Jaune;Vert;Bleu" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                                    <Parameter name="English" inherits_from_parent="0" content_type="3" value="Red/Red color;Yellow/Yellow color;Green/Green color;Blue/Blue color" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="11" />
                                                                    <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="12" />
                                                                    <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="红色;黄色;绿色;蓝色" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is chinese. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="13" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                                        <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                                        <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                                        <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                                        <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                                        <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                                        <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                                        <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                                        <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                                        <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                                        <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                                        <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                                        <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                                        <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                                        <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                                        <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                                        <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                                        <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                                        <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                                        <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                                        <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                                        <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                                        <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                                        <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                                        <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                                        <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                                    </Box>
                                                                                    <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="423" y="127">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                                        <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="945" y="164">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                                    </Box>
                                                                                    <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                                        <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                                            <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                                            <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                                            <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                                        <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="765" y="14">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                                    </Box>
                                                                                    <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                                    <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                                    <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="6" indexofinput="3" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="8" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="11" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="353" y="19">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                    <Resource name="TTS" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="96" y="19">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "请告知球的颜色"
		sEnglish = "Which color is the ball ?"
		sFrench = "De quelle couleur est la balle ?"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "De que color es la pelota ?"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>请告知球的颜色</chinese>
                                                                        <english>Which color is the ball ?</english>
                                                                        <french>De quelle couleur est la balle ?</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>De que color es la pelota ?</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="10" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="10" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="11" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="278" y="17">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="7" outputowner="13" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="4" outputowner="11" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="5" outputowner="11" indexofoutput="7" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Object" index="20" bitmap="">
                                        <Diagram scale="98">
                                            <Box name="Save" robot="" id="7" tooltip="Save head position in memory" bitmap_expanded="1" plugin="" x="480" y="11">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="satThreshold" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="gotoRetry" robot="" id="12" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="483" y="106">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Retry" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="1" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="752" y="11">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Eyes LEDs" robot="" id="5" tooltip="Set the eyes LEDs. Note that you can enter this box to change colors!" bitmap_expanded="1" plugin="" x="617" y="11">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Duration" inherits_from_parent="0" content_type="2" value="0.01" default_value="2" min="0.01" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="99" y="18">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Eyes LEDs" robot="" id="2" tooltip="Turns on and off the eyes LEDs." bitmap_expanded="1" plugin="" x="310" y="18">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)

    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass

    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("Duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Read" robot="" id="3" tooltip="Read head position in memory" bitmap_expanded="1" plugin="" x="65" y="106">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="ballcolor" default_value="" custom_choice="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="Wait" robot="" id="4" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="192" y="11">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="BallDetection" robot="" id="6" tooltip="Setup the ball detection algorithm" bitmap_expanded="1" plugin="" x="332" y="9">
                                                <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.aBallDetection = [0]*5 # [Saturation threshold (0..255), min hue, max hue]
        
    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False
        self.ocv = None
        
    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        self.aBallDetection[0] = self.getParameter("Saturation threshold")
        self.aBallDetection[3] = 100
        self.aBallDetection[4] = 1
        
        ballColor = self.getParameter("Ball color")
        if ballColor == "Red":
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 40
        elif ballColor == "Yellow":
            self.aBallDetection[1] = 50
            self.aBallDetection[2] = 80
        elif ballColor == "Green":
            self.aBallDetection[1] = 100
            self.aBallDetection[2] = 150
        elif ballColor == "Blue":
            self.aBallDetection[1] = 220
            self.aBallDetection[2] = 250
        else:
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 360
            
        self.log("ball color : %s" % ballColor)
        
    def onInput_onStart(self):
        if self.ocv == None:
            self.ocv = ALProxy("UsageOpenCV")
        self.ocv.setResolution(1)
        self.ocv.enableDetection("ball", True)
        self.update()        
        self.ocv.setBallDetection(self.aBallDetection)
        self.ocv.setPeriod(self.getParameter("Period"))
        self.ocv.setVerbosity(self.getParameter("Verbosity"))
        
    def onInput_onSetup(self):
        if self.bIsRunning:
            # This input is a toggle
            self.bMustStop = True
            return
            
        self.bIsRunning = True
        if self.ocv == None:
            self.ocv = ALProxy("UsageOpenCV")    
        while not self.bMustStop:        
            self.update()
            
            self.ocv.setBallDetection(self.aBallDetection)
            self.ocv.setPeriod(self.getParameter("Period"))
            self.ocv.setVerbosity(self.getParameter("Verbosity"))
            
            time.sleep(1.0)

        self.bIsRunning = False
        self.bMustStop = False
        
    def onInput_onStop(self):
        if self.bIsRunning:    
            self.bMustStop = True
            # Wait for loop to end
            while self.bMustStop:
                time.sleep(0.1)
        # Disable ball detection
        if self.ocv != None:
            self.ocv.enableDetection("ball", False)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onSetup" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Input name="BallDetected" type="0" type_size="1" nature="4" stm_value_name="BallDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Output name="onStopped" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Parameter name="Saturation threshold" inherits_from_parent="0" content_type="1" value="255" default_value="90" min="0" max="255" tooltip="" id="8" />
                                                <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Blue" default_value="Blue" custom_choice="0" tooltip="" id="9">
                                                    <Choice value="Red" />
                                                    <Choice value="Yellow" />
                                                    <Choice value="Geen" />
                                                    <Choice value="Blue" />
                                                </Parameter>
                                                <Parameter name="Verbosity" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="3" tooltip="" id="10" />
                                                <Parameter name="Period" inherits_from_parent="0" content_type="1" value="50" default_value="100" min="1" max="1000" tooltip="" id="11" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="97">
                                                                <Box name="TrackBall" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="72" y="145">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bLost = False
        self.nLastTimeSeen = 0

    def onUnload(self):
        pass

    def onInput_onBall(self, balls):    
        if balls!=None:
            self.nLastTimeSeen = time.time()
            if self.bLost:
                self.BallSeen()
                self.bLost = False
        elif (time.time() - self.nLastTimeSeen)>=1.0 and not self.bLost:
                self.Lost()
                self.bLost = True]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onBall" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="Lost" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Output name="BallSeen" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="SpinThreshold" robot="" id="1" tooltip="Increase or decrease a threshold value in a limited range. On stop event, the value is output." bitmap_expanded="1" plugin="" x="383" y="210">
                                                                    <bitmap>media/images/box/appu/spinbutton.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False    
        self.nValue = self.getParameter("Initial value")

    def onUnload(self):
        self.bMustStop = True

    def stop(self):
        if self.bIsRunning:
            self.bMustStop = True
            while self.bIsRunning:
                time.sleep(0.1)
            
    def changeValue(self, step):
        if self.getParameter("Minimum value") < self.nValue + step < self.getParameter("Maximum value"):
            self.nValue += step
            self.log("threshold = %d" % self.nValue)
            self.Changed(self.nValue)
        else:
            self.bMustStop = True
            self.onOutOfRange()
            
    def onInput_onIncrease(self):
        self.stop()
        self.bIsRunning = True
        while not self.bMustStop:
            self.changeValue(self.getParameter("Change step"))
            time.sleep(self.getParameter("Period"))            
        self.bIsRunning = False        
        
    def onInput_onDecrease(self):
        self.stop()
        self.bIsRunning = True
        while not self.bMustStop:
            self.changeValue(-self.getParameter("Change step"))
            time.sleep(self.getParameter("Period"))            
        self.bIsRunning = False        
        
    def onInput_onPause(self):
        self.stop()
        self.nValue = min(self.getParameter("Maximum value"), self.nValue)
        self.nValue = max(self.getParameter("Minimum value"), self.nValue)
        self.log("SpinThreshold value : %s" % self.nValue)
        
    def onInput_onStop(self):
        self.onInput_onPause()
        self.onStopped(self.nValue)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onIncrease" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onDecrease" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="onPause" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                    <Output name="onOutOfRange" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                    <Output name="Changed" type="2" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="255" default_value="255" min="0" max="255" tooltip="" id="9" />
                                                                    <Parameter name="Change step" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="255" tooltip="" id="10" />
                                                                    <Parameter name="Maximum value" inherits_from_parent="0" content_type="1" value="255" default_value="255" min="0" max="1000" tooltip="" id="11" />
                                                                    <Parameter name="Minimum value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="" id="12" />
                                                                    <Parameter name="Period" inherits_from_parent="0" content_type="2" value="0.25" default_value="0.5" min="0" max="1" tooltip="Time to wait in seconds before the value is changed." id="13" />
                                                                </Box>
                                                                <Box name="FaceLeds" robot="" id="13" tooltip="Set the face leds. Note that you can enter this box to set other colors ! Very nice !" bitmap_expanded="1" plugin="" x="383" y="111">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                    <Input name="Stop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="duration" inherits_from_parent="0" content_type="2" value="0" default_value="2" min="0" max="5" tooltip="Fade duration in seconds." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Color" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="111" y="25">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        color = ALMemory.getData("ballcolor")
        if color == "Red":
            color = [255, 0, 0]
        elif color == "Yellow":
            color = [0, 255, 255]
        elif color == "Green":
            color = [0, 255, 0]
        elif color == "Blue":
            color = [0, 0, 255]
        self.Color(color)

    def onInput_onStop(self):
        self.Color([255, 255, 255])]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Color" type="2" type_size="3" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="FaceLeds" robot="" id="2" tooltip="Turns on and off the face LEDs." bitmap_expanded="1" plugin="" x="241" y="25">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"
        
    def onLoad(self):
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)
        
    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass
        
    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Wait" robot="" id="4" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="240" y="280">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="2" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Box name="ChangeThreshold" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="591" y="227">
                                                                    <bitmap>media/images/box/appu/usageopencv_settings.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ocv = ALProxy("UsageOpenCV")

    def onUnload(self):
        pass

    def onInput_onStart(self, nValue):
        ballparams = self.ocv.getBallDetection()
        ballparams[0] = nValue
        self.ocv.setBallDetection(ballparams)
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="ColorDetected" type="0" type_size="1" nature="4" stm_value_name="ColorDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="Enable ball detection" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                                    <Parameter name="Enable color detection" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="7" />
                                                                    <Parameter name="Enable move detection" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="8" />
                                                                    <Parameter name="Color threshold" inherits_from_parent="0" content_type="1" value="98" default_value="85" min="0" max="255" tooltip="" id="9" />
                                                                    <Parameter name="Color count" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="0" max="10" tooltip="" id="10" />
                                                                    <Parameter name="Ball threshold" inherits_from_parent="0" content_type="1" value="89" default_value="95" min="0" max="255" tooltip="" id="11" />
                                                                    <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Blue" default_value="All" custom_choice="0" tooltip="" id="12">
                                                                        <Choice value="Red" />
                                                                        <Choice value="Yellow" />
                                                                        <Choice value="Green" />
                                                                        <Choice value="Blue" />
                                                                        <Choice value="All" />
                                                                    </Parameter>
                                                                    <Parameter name="Move source" inherits_from_parent="0" content_type="3" value="Color" default_value="Ball" custom_choice="0" tooltip="" id="13">
                                                                        <Choice value="Color" />
                                                                        <Choice value="Ball" />
                                                                    </Parameter>
                                                                    <Parameter name="Move quality" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="255" tooltip="" id="14" />
                                                                    <Parameter name="Move minimum" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="255" tooltip="" id="15" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="2" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="383" y="16">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="13" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="9" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="7" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Retry" index="30" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="72" y="14">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我看不到球，让我们再来一遍"
		sEnglish = "I could not see the ball. Let's do it again."
		sFrench = "Je n'ai pas vu la balle, on recommence."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "No pude ver la pelota, empezemos de nuevo."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我看不到球，让我们再来一遍</chinese>
                                                    <english>I could not see the ball. Let&apos;s do it again.</english>
                                                    <french>Je n&apos;ai pas vu la balle, on recommence.</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>No pude ver la pelota, empezemos de nuevo.</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="2" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="345" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="gotoColor" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="481" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Color" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Start" index="40" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="2" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="98" y="30">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "当准备开始时请双击前方的触摸传感器"
		sEnglish = "When ready to start double tap on the front tactil sensor"
		sFrench = "Quand tu es prêt, appuie sur mon capteur tactile frontal"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>当准备开始时请双击前方的触摸传感器</chinese>
                                                    <english>When ready to start double tap on the front tactil sensor</english>
                                                    <french>Quand tu es prêt, appuie sur mon capteur tactile frontal</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the sentence received in the input. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="387" y="30">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("Speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ "
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a string is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="Speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice." id="6" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Score" index="49" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="Score" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="187" y="171">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "难以置信，你有百分之%d的成功率！；不错，你有百分之%d的成功率！；你有百分之%d的成功率！；有可以再玩一次！"
		sEnglish = " Incredible, you have %d percent of success !;That's good, you have %d percent of success !;You have %d percent of success, you may play again !"
		sFrench = " Excellant, tu as %d pourçant de réussite;C'est bien, tu as %d pourçant de bonnes réponses;C'est pas mal, tu as %d pourçant de bonnes réponse, tu peux encore t'améliorer"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Excelente, tienes %d porciento de respuestas correctas; Muy bien, tienes %d porciento de buenas respuestas; Nada mal, tienes %d porciento de respuestas correctas, puedes mejorar"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>难以置信，你有百分之%d的成功率！；不错，你有百分之%d的成功率！；你有百分之%d的成功率！；有可以再玩一次！</chinese>
                                                    <english> Incredible, you have %d percent of success !;That&apos;s good, you have %d percent of success !;You have %d percent of success, you may play again !</english>
                                                    <french> Excellant, tu as %d pourçant de réussite;C&apos;est bien, tu as %d pourçant de bonnes réponses;C&apos;est pas mal, tu as %d pourçant de bonnes réponse, tu peux encore t&apos;améliorer</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Excelente, tienes %d porciento de respuestas correctas; Muy bien, tienes %d porciento de buenas respuestas; Nada mal, tienes %d porciento de respuestas correctas, puedes mejorar</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="FinalScore" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="460" y="174">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        scores = p.split(';')
        p = ALMemory.getData("answers")
        total = sum(p)
        if total == 0:
            self.onStopped("")
            return
            
        nSuccess = int(float(p[0]) / float(total) * 100.0)
        if nSuccess > 75:
            sSentence = scores[0] % nSuccess
            self.Top()
        elif nSuccess > 50:
            sSentence = scores[1] % nSuccess
            self.Medium()            
        else:
            sSentence = scores[2] % nSuccess
            self.Bad()
        self.onStopped(sSentence)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="Top" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="Medium" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="Bad" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="673" y="20">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Anim_stand_shortHappy" robot="" id="4" tooltip="Anim_ShortHappyStandUp" bitmap_expanded="1" plugin="" x="676" y="214">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="FaceLeds" index="1" bitmap="">
                                                            <Diagram scale="100">
                                                                <Box name="Light_HappyEyes" robot="" id="1" tooltip="Set An Animated Gaze Which Expresses Joy&#x0A;*** state: se/Leds/Light_HappyEyes/Light_HappyEyes.x ***&#x0A;*** ref box in: .//5a_release/Leds/Light_HappyEyes/Light_HappyEyes.xar ***&#x0A;*** last modification date(svn): 2009-04-17 14:01:23 +0200 ***" bitmap_expanded="1" plugin="" x="173" y="90">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );
    
    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;
    
    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0x000000, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0x000000, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0x00ff00, rDuration );

    
    while( not self.bMustStop ):
      rTime=0.5
      ALLeds.fadeRGB( "FaceLed7", 0x000000, rTime );
      if( self.bMustStop ):
        break;       
      ALLeds.fadeRGB( "FaceLed7", 0x00ff00, rTime );      
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-26.1062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="10.3688" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="87.6256" />
                                                            <Key frame="30" value="86.2194" />
                                                            <Key frame="36" value="83.5826" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="15.2029" />
                                                            <Key frame="30" value="16.0818" />
                                                            <Key frame="36" value="15.2029" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="-45.9698" />
                                                            <Key frame="30" value="-50.4523" />
                                                            <Key frame="36" value="-57.4836" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="-60.2913" />
                                                            <Key frame="30" value="-54.842" />
                                                            <Key frame="36" value="-37.6153" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="23" value="0.437054" />
                                                            <Key frame="41" value="0.437054" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="23" value="0.0182082" />
                                                            <Key frame="41" value="0.0182082" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="37.708" />
                                                            <Key frame="30" value="40.2568" />
                                                            <Key frame="36" value="91.6735" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="-0.705538" />
                                                            <Key frame="30" value="-3.51807" />
                                                            <Key frame="36" value="-1.93602" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="52.6447" />
                                                            <Key frame="30" value="56.8635" />
                                                            <Key frame="36" value="97.5574" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="19" value="68.9974" />
                                                            <Key frame="30" value="66.7122" />
                                                            <Key frame="36" value="81.2144" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="23" value="0.70073" />
                                                            <Key frame="41" value="0.70073" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="23" value="0.585844" />
                                                            <Key frame="41" value="0.240389" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-22.9373" />
                                                            <Key frame="39" value="-26.3651" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="11.5162" />
                                                            <Key frame="39" value="6.59428" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="10.4615" />
                                                            <Key frame="39" value="-6.85315" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="23.1131" />
                                                            <Key frame="39" value="54.3147" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-12.483" />
                                                            <Key frame="39" value="-31.7313" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-8.08363" />
                                                            <Key frame="39" value="-5.53477" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-3.07381" />
                                                            <Key frame="39" value="-0.349163" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="3.24959" />
                                                            <Key frame="39" value="-21.7996" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="29.0067" />
                                                            <Key frame="39" value="55.6379" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-11.6872" />
                                                            <Key frame="39" value="-18.8943" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="25" value="-0.70073" />
                                                            <Key frame="39" value="-1.57965" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                <Resource name="LHand" type="Lock" timeout="0" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                <Resource name="RHand" type="Lock" timeout="0" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Anim_stand_winner" robot="" id="5" tooltip="Anim_WinnerStanding" bitmap_expanded="1" plugin="" x="677" y="119">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="Leds" index="1" bitmap="">
                                                            <Diagram scale="100">
                                                                <Box name="Light_VeryHappyEyes" robot="" id="1" tooltip="Set An Animated Gaze Which Expresses Great Joy&#x0A;*** state: se/Leds/Light_VeryHappyEyes/Light_VeryHappyEyes.x ***&#x0A;*** ref box in: .//5a_release/Leds/Light_VeryHappyEyes/Light_VeryHappyEyes.xar ***&#x0A;*** last modification date(svn): 2009-04-17 14:01:23 +0200 ***" bitmap_expanded="1" plugin="" x="152" y="200">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );
    
    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;
    
    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0xffff00, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0x000000, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0xffff00, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0x000000, rDuration );

    while( not self.bMustStop ):
      rTime=0.2
      ALLeds.fadeRGB( "FaceLedsExternal", 0x000000, rTime );
      ALLeds.fadeRGB( "FaceLedsExternal", 0xffff00, rTime );      
      if( self.bMustStop ):
        break;       
      ALLeds.fadeRGB( "FaceLedsInternal", 0x000000, rTime );
      ALLeds.fadeRGB( "FaceLedsInternal", 0xffff00, rTime );      
    
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Light_EarsFlashes" robot="" id="2" tooltip="Light_EarsFlashes_ref" bitmap_expanded="1" plugin="" x="226" y="69">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
  """ comments """
  def __init__(self):
    GeneratedClass.__init__(self);
    self.time = 0.3
    self.ledName = "EarLeds"
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    self.log( self.getName() + ": start - begin" );
    
    if( self.bIsRunning ):
      print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;
    
    ALLeds.fade(self.ledName, 1.0, self.time)
    
    while( not self.bMustStop ):
      ALLeds.fade(self.ledName, 0.0, self.time)
      ALLeds.fade(self.ledName, 1.0, self.time)
      pass
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="18" value="11.5114" />
                                                            <Key frame="35" value="-26.5457" />
                                                            <Key frame="68" value="-35.7743" />
                                                            <Key frame="93" value="-34.3681" />
                                                            <Key frame="117" value="5.79845" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="18" value="14.2361" />
                                                            <Key frame="35" value="-15.9108" />
                                                            <Key frame="68" value="-19.4265" />
                                                            <Key frame="93" value="-14.3288" />
                                                            <Key frame="117" value="8.25942" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="101.337" />
                                                            <Key frame="38" value="101.6" />
                                                            <Key frame="53" value="101.6" />
                                                            <Key frame="66" value="101.6" />
                                                            <Key frame="80" value="101.6" />
                                                            <Key frame="96" value="101.688" />
                                                            <Key frame="107" value="97.2058" />
                                                            <Key frame="123" value="96.5906" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="6.76526" />
                                                            <Key frame="38" value="6.67737" />
                                                            <Key frame="53" value="6.67737" />
                                                            <Key frame="66" value="6.67737" />
                                                            <Key frame="80" value="6.67737" />
                                                            <Key frame="96" value="6.67737" />
                                                            <Key frame="107" value="8.08363" />
                                                            <Key frame="123" value="8.69888" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-119.359" />
                                                            <Key frame="38" value="-119.271" />
                                                            <Key frame="53" value="-119.271" />
                                                            <Key frame="66" value="-119.359" />
                                                            <Key frame="80" value="-119.359" />
                                                            <Key frame="96" value="-119.271" />
                                                            <Key frame="107" value="-95.1891" />
                                                            <Key frame="123" value="-94.7497" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-22.7616" />
                                                            <Key frame="38" value="-22.7616" />
                                                            <Key frame="53" value="-22.7616" />
                                                            <Key frame="66" value="-22.7616" />
                                                            <Key frame="80" value="-22.7616" />
                                                            <Key frame="96" value="-22.7616" />
                                                            <Key frame="107" value="-23.0252" />
                                                            <Key frame="123" value="-23.4647" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="17" value="-28.0399" />
                                                            <Key frame="118" value="1.93121" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="17" value="0.20148" />
                                                            <Key frame="118" value="0.201844" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="21.9753" />
                                                            <Key frame="38" value="-69.52" />
                                                            <Key frame="53" value="-69.0805" />
                                                            <Key frame="66" value="-69.6957" />
                                                            <Key frame="80" value="-69.2563" />
                                                            <Key frame="96" value="-69.6078" />
                                                            <Key frame="107" value="2.1997" />
                                                            <Key frame="123" value="95.0134" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-65.0423" />
                                                            <Key frame="38" value="-51.3312" />
                                                            <Key frame="53" value="-77.6987" />
                                                            <Key frame="66" value="-48.1671" />
                                                            <Key frame="80" value="-74.183" />
                                                            <Key frame="96" value="-46.4092" />
                                                            <Key frame="107" value="-52.8253" />
                                                            <Key frame="123" value="-12.6588" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-4.22121" />
                                                            <Key frame="38" value="13.7087" />
                                                            <Key frame="53" value="14.3239" />
                                                            <Key frame="66" value="14.8513" />
                                                            <Key frame="80" value="15.0271" />
                                                            <Key frame="96" value="14.0603" />
                                                            <Key frame="107" value="53.7873" />
                                                            <Key frame="123" value="68.641" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="82.2691" />
                                                            <Key frame="38" value="38.7627" />
                                                            <Key frame="53" value="56.9562" />
                                                            <Key frame="66" value="31.995" />
                                                            <Key frame="80" value="62.5813" />
                                                            <Key frame="96" value="32.9618" />
                                                            <Key frame="107" value="55.9894" />
                                                            <Key frame="123" value="36.5654" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="17" value="0.964405" />
                                                            <Key frame="39" value="8" />
                                                            <Key frame="94" value="8" />
                                                            <Key frame="118" value="8.34731" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="17" value="0.0160264" />
                                                            <Key frame="118" value="0.0211173" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-22.41" />
                                                            <Key frame="62" value="-27.5956" />
                                                            <Key frame="91" value="-27.4198" />
                                                            <Key frame="121" value="-26.1014" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="22.4148" />
                                                            <Key frame="62" value="30.5887" />
                                                            <Key frame="91" value="30.325" />
                                                            <Key frame="121" value="14.4166" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="23.3816" />
                                                            <Key frame="62" value="23.2058" />
                                                            <Key frame="91" value="23.909" />
                                                            <Key frame="121" value="19.9538" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="23.1131" />
                                                            <Key frame="62" value="21.7069" />
                                                            <Key frame="91" value="18.9822" />
                                                            <Key frame="121" value="-4.83645" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-22.3269" />
                                                            <Key frame="62" value="-20.2175" />
                                                            <Key frame="91" value="-18.5476" />
                                                            <Key frame="121" value="7.02893" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-10.193" />
                                                            <Key frame="62" value="-15.4665" />
                                                            <Key frame="91" value="-15.906" />
                                                            <Key frame="121" value="-9.05044" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="5.80326" />
                                                            <Key frame="62" value="5.89115" />
                                                            <Key frame="91" value="5.89115" />
                                                            <Key frame="121" value="1.32078" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="26.8046" />
                                                            <Key frame="62" value="27.8242" />
                                                            <Key frame="91" value="27.6835" />
                                                            <Key frame="121" value="22.8494" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="3.07861" />
                                                            <Key frame="62" value="3.16651" />
                                                            <Key frame="91" value="2.90283" />
                                                            <Key frame="121" value="6.06693" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-1.66754" />
                                                            <Key frame="62" value="-1.84332" />
                                                            <Key frame="91" value="-1.93121" />
                                                            <Key frame="121" value="-5.09532" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-3.60116" />
                                                            <Key frame="62" value="-3.1617" />
                                                            <Key frame="91" value="-3.33748" />
                                                            <Key frame="121" value="-3.86483" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                <Resource name="LHand" type="Lock" timeout="0" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                <Resource name="RHand" type="Lock" timeout="0" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Anim_stand_IamSorry" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="678" y="308">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="12" value="-1.0571" />
                                                            <Key frame="23" value="-8.87947" />
                                                            <Key frame="33" value="11.863" />
                                                            <Key frame="43" value="2.54646" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="12" value="-28.9188" />
                                                            <Key frame="23" value="-31.204" />
                                                            <Key frame="33" value="-31.0282" />
                                                            <Key frame="43" value="-31.0282" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="44.9103" />
                                                            <Key frame="38" value="66.1801" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="11.7751" />
                                                            <Key frame="38" value="11.1598" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-118.92" />
                                                            <Key frame="38" value="-60.384" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-81.9127" />
                                                            <Key frame="38" value="-77.3423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-54.6711" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="0.474207" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="39.1142" />
                                                            <Key frame="38" value="59.593" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="-0.529755" />
                                                            <Key frame="38" value="-0.441863" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="119.091" />
                                                            <Key frame="38" value="61.5218" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="21" value="74.8862" />
                                                            <Key frame="38" value="68.4701" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="34.1875" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="0.629115" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-1.31597" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="5.71537" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-13.1814" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="32.2539" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-18.196" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-2.37067" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="5.71537" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-9.49471" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="5.10012" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="4.83645" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="35" value="-2.01911" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                <Resource name="LHand" type="Lock" timeout="0" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                <Resource name="RHand" type="Lock" timeout="0" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Stand" robot="" id="7" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="836" y="211">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        ""

    def onInput_onStop(self):
        self.gotoAndStop(200)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="37" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="37" value="-0.79343" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="37" value="-4.57277" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="89.0319" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="6.58948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="-65.9212" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="-39.5489" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="6.58948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="34" value="0.23348" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="88.5973" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="-6.15482" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="66.0922" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="45.0909" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="10.193" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="30" value="0.40948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-8.52309" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="3.43018" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="12.0436" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="3.24959" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-6.3258" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="10.5446" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="32" value="5.80326" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="Standing" type="Lock" timeout="0" />
                                                <Resource name="HeadYaw" type="Lock" timeout="0" />
                                                <Resource name="HeadPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="LWristYaw" type="Lock" timeout="0" />
                                                <Resource name="LHand" type="Lock" timeout="0" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                <Resource name="RWristYaw" type="Lock" timeout="0" />
                                                <Resource name="RHand" type="Lock" timeout="0" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="0" />
                                                <Resource name="LHipRoll" type="Lock" timeout="0" />
                                                <Resource name="LHipPitch" type="Lock" timeout="0" />
                                                <Resource name="LKneePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipRoll" type="Lock" timeout="0" />
                                                <Resource name="RHipPitch" type="Lock" timeout="0" />
                                                <Resource name="RKneePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="0" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="WaitSignals" robot="" id="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." bitmap_expanded="1" plugin="" x="972" y="105">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.ok1 = 0
		self.ok2 = 0
		
	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart1(self):
		if(self.ok2 == 0):
			self.ok1 = 1
		else:
			self.ok()

	def onInput_onStart2(self):
		if(self.ok1 == 0):
			self.ok2 = 1
		else:
			self.ok()
		
	def ok(self):
		self.ok1 = 0
		self.ok2 = 0
		self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart1" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStart2" type="1" type_size="1" nature="2" inner="0" tooltip="Please enter a tooltip here. Better and more explicit than this one." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="FaceLeds" robot="" id="9" tooltip="Set the face leds. Note that you can enter this box to set other colors ! Very nice !" bitmap_expanded="1" plugin="" x="981" y="209">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="duration" inherits_from_parent="0" content_type="2" value="2" default_value="2" min="0.01" max="5" tooltip="Fade duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color Edit" robot="" id="1" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="122" y="82">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="FaceLeds" robot="" id="2" tooltip="Turns on and off the face LEDs." bitmap_expanded="1" plugin="" x="333" y="109">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"
        
    def onLoad(self):
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            ALLeds.stop(id)
        
    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass
        
    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoStart" robot="" id="10" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="1125" y="106">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.gotoAndStopParent(self.getParameter("frame name"))

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Game" index="59" bitmap="">
                                        <Diagram scale="91">
                                            <Box name="Question" robot="" id="1" tooltip="Build a sentence randomly" bitmap_expanded="1" plugin="" x="36" y="234">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="LocalizedText_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="SaySide" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="SideCode" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="55" y="16">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "抬起;出示;展示"
		sEnglish = "Raise;Show;Presentate"
		sFrench = "Montre moi;Présente moi;Fait moi voir"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Enseñame; Presentame; Muestrame"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>抬起;出示;展示</chinese>
                                                                        <english>Raise;Show;Presentate</english>
                                                                        <french>Montre moi;Présente moi;Fait moi voir</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Enseñame; Presentame; Muestrame</spanish>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="2" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="318" y="62">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "{verb}你的{side}手"
		sEnglish = "{verb} your {side} hand"
		sFrench = "{verb} ta main {side}"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "{verb} tu mano {side}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>{verb}你的{side}手</chinese>
                                                                        <english>{verb} your {side} hand</english>
                                                                        <french>{verb} ta main {side}</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>{verb} tu mano {side}</spanish>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="ShuffleInt" robot="" id="3" tooltip="Generate a random number between 0 and a max number." bitmap_expanded="1" plugin="" x="378" y="176">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random;

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nCount = self.getParameter("count")
        self.aShuffle = range(self.nCount)
        random.shuffle(self.aShuffle)
        self.nIndex = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.Random(self.aShuffle[self.nIndex])
        self.nIndex += 1        
        if self.nIndex == self.nCount:
            self.nIndex = 0
            random.shuffle(self.aShuffle)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="The max number of the random (excluded)" id="2" />
                                                                    <Output name="Random" type="0" type_size="1" nature="2" inner="0" tooltip="Position name and a random value" id="3" />
                                                                    <Parameter name="count" inherits_from_parent="0" content_type="1" value="10" default_value="9" min="1" max="100" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="Dispatcher" robot="" id="4" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" bitmap_expanded="1" plugin="dispatcher_plugin" x="546" y="154">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		elif(p == (4)):
			self.output_5(p)
		elif(p == (5)):
			self.output_6(p)
		elif(p == (6)):
			self.output_7(p)
		elif(p == (7)):
			self.output_8(p)
		elif(p == (8)):
			self.output_9(p)
		elif(p == (9)):
			self.output_10(p)
		else:
			self.onDefault()]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <keywords>
                                                                            <keyword>0</keyword>
                                                                            <keyword>1</keyword>
                                                                            <keyword>2</keyword>
                                                                            <keyword>3</keyword>
                                                                            <keyword>4</keyword>
                                                                            <keyword>5</keyword>
                                                                            <keyword>6</keyword>
                                                                            <keyword>7</keyword>
                                                                            <keyword>8</keyword>
                                                                            <keyword>9</keyword>
                                                                            <keyword></keyword>
                                                                        </keywords>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                    <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                                    <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                                    <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                                    <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                                    <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                                                    <Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" />
                                                                    <Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" />
                                                                    <Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" />
                                                                    <Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" />
                                                                    <Output name="output_11" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="14" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="5" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="794" y="154">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "左"
		sEnglish = "left"
		sFrench = "gauche"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "izquierda"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>左</chinese>
                                                                        <english>left</english>
                                                                        <french>gauche</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>izquierda</spanish>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="6" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="796" y="242">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "右"
		sEnglish = "right"
		sFrench = "droite"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "derecha"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>右</chinese>
                                                                        <english>right</english>
                                                                        <french>droite</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>derecha</spanish>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="BuildSentence" robot="" id="7" tooltip="Choisi aléatoirement la droite ou la gauche." bitmap_expanded="1" plugin="" x="1086" y="34">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.sVerb = None
        self.sTemplate = None
        self.sSide = None
        
    def onLoad(self):
        pass

    def onUnload(self):
        pass        

    def randomWord(self, s):
        list = s.split(';')
        return list[random.randint(0, len(list)-1)]
        
    def onInput_onVerb(self, p):
        self.sVerb = self.randomWord(p)

    def onInput_onTemplate(self, p):
        self.sTemplate = self.randomWord(p)
        
    def onInput_onLeftSide(self, p):
        self.SideCode(-1)
        self.onInput_onSide(p)
        
    def onInput_onRightSide(self, p):
        self.SideCode(+1)
        self.onInput_onSide(p)        
        
    def onInput_onSide(self, p):
        self.SaySide(self.sTemplate.format(verb=self.sVerb, side=p))

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onVerb" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onTemplate" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                                    <Input name="onLeftSide" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Input name="onRightSide" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="6" />
                                                                    <Output name="SaySide" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                    <Output name="SideCode" type="2" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Parameter name="sentences" inherits_from_parent="0" content_type="3" value="Raise your %s hand;Move your %s hand;Show me your %s hand" default_value="Raise your %s hand;Move your %s hand;Show me your %s hand" custom_choice="1" tooltip="" id="9" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="7" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="8" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="9" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="10" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="11" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="12" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="13" />
                                                                <Link inputowner="7" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="7" indexofoutput="7" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="8" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="165" y="112">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="LedTimer" robot="" id="7" tooltip="Wait a predefined lap of time with eye&apos;s leds turning." bitmap_expanded="1" plugin="" x="351" y="19">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.tb = False
        self.WaitColor = 0x0000FF
        self.OffColor = 0x444444
        self.EndColor = 0xFFFFFF

    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onTimeout(self, rPeriod = 1):
        self.log("timeout")
        self.onInput_onStop()
        self.onStopped()
  
    def startTimer(self, rPeriod = 1):
        if self.tb:
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.onTimeout, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        if self.bIsRunning:
            return

        self.bIsRunning = True
        self.bMustStop = False

        self.startTimer( self.getParameter("timeout") )
        
        rTime = self.getParameter( 'rTime' )
        while not self.bMustStop:
            for i in range(8):
                if self.bMustStop:
                    break
                ALLeds.fadeRGB( 'FaceLed%d' % i, self.WaitColor, rTime )
                ALLeds.post.fadeRGB( 'FaceLed%d' % i, self.OffColor, rTime*3 )
        # end while
        
        self.bIsRunning = False

    def onInput_onStop(self):
        self.bMustStop = True # stop current loop execution
        if self.tb:
            self.tb.cancel()
            self.tb = False
        #~ for i in range(8):
            #~ ALLeds.fadeRGB( "FaceLed%s%d" % ("Left", i) , self.EndColor, 0.0)
            #~ ALLeds.fadeRGB( "FaceLed%s%d" % ("Right", i) , self.EndColor, 0.0)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="rTime" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.5" min="0" max="10" tooltip="Duration (in sec) for the led to be turned on, turn off duration is defined relatively to this value." id="5" />
                                                <Parameter name="timeout" inherits_from_parent="0" content_type="1" value="15" default_value="5" min="0" max="100" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Good" robot="" id="9" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="630" y="291">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "干得好;太好了，你真棒;回答正确;回答的好;厉害，答对了;你答对的;令人印象深刻，你成功了;太神奇了，你很棒。"
		sEnglish = "Well done;Great, this is good;Correct answer;Good answer;Super, you're right;Impressive, you made it;Amazing, you are good"
		sFrench = "Bien joué;Super, c'est bien;Réponse correcte;Bonne réponse;C'est juste; Bravo tu as bien répondu;Félicitation, c'est parfait"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Bien hecho ; Perfecto ; Buena respuesta ; Respuesta correcta ; Super, bien de nuevo ; Muy impresionante, lo has hecho de nuevo ; Excelente, eres muy bueno"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>干得好;太好了，你真棒;回答正确;回答的好;厉害，答对了;你答对的;令人印象深刻，你成功了;太神奇了，你很棒。</chinese>
                                                    <english>Well done;Great, this is good;Correct answer;Good answer;Super, you&apos;re right;Impressive, you made it;Amazing, you are good</english>
                                                    <french>Bien joué;Super, c&apos;est bien;Réponse correcte;Bonne réponse;C&apos;est juste; Bravo tu as bien répondu;Félicitation, c&apos;est parfait</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Bien hecho ; Perfecto ; Buena respuesta ; Respuesta correcta ; Super, bien de nuevo ; Muy impresionante, lo has hecho de nuevo ; Excelente, eres muy bueno</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Wrong" robot="" id="10" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="630" y="379">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "那是另一只手;下次努力;举错了;你给我看的是另一只手"
		sEnglish = "It was the other hand;Next time perhaps;That's not correct;You showed me the wrong hand"
		sFrench = "C'était l'autre main;La prochaine fois peut-être;C'est incorrect;Tu m'as montré la mauvaise main"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Era la otra mano ;Suerte a la proxima ; Sigue intentando ; Me enseñaste la mano incorrecta"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>那是另一只手;下次努力;举错了;你给我看的是另一只手</chinese>
                                                    <english>It was the other hand;Next time perhaps;That&apos;s not correct;You showed me the wrong hand</english>
                                                    <french>C&apos;était l&apos;autre main;La prochaine fois peut-être;C&apos;est incorrect;Tu m&apos;as montré la mauvaise main</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Era la otra mano ;Suerte a la proxima ; Sigue intentando ; Me enseñaste la mano incorrecta</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Cheating" robot="" id="12" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="630" y="468">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "嘿！你在开玩笑？;你想骗我！;我可以看到了你的双手！;这不公平！;但是这样很有趣。"
		sEnglish = "Hey ! are you kidding ?;You're trying to catch me !;I can see your two hands !;That's not fair !;Ok, that was fun !"
		sFrench = "Hey ! tu exagère là;Essayes-tu de m'avoir;Je peux voir tes deux mains !;Ceci n'est pas juste;Ok, c'était rigolo !"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Oye ! estas bromeando ?; Estas haciendo trampa !; Puedo ver tus dos manos !; No es justo !; Ok, fue chistoso !"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>嘿！你在开玩笑？;你想骗我！;我可以看到了你的双手！;这不公平！;但是这样很有趣。</chinese>
                                                    <english>Hey ! are you kidding ?;You&apos;re trying to catch me !;I can see your two hands !;That&apos;s not fair !;Ok, that was fun !</english>
                                                    <french>Hey ! tu exagère là;Essayes-tu de m&apos;avoir;Je peux voir tes deux mains !;Ceci n&apos;est pas juste;Ok, c&apos;était rigolo !</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Oye ! estas bromeando ?; Estas haciendo trampa !; Puedo ver tus dos manos !; No es justo !; Ok, fue chistoso !</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Timeout" robot="" id="11" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="630" y="6">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "时间到;我没有看到你的手;请快点作答;我看不到你的手;对不起，我没有看到你的手。"
		sEnglish = "Time's up;I did not see your hand;Try to answer a bit faster;I could not see your hand;Sorry, I don't see your hand"
		sFrench = "Temps écoulé;Je n'ai pas vu ta main;Essaye de répondre un peu plus vite;Désolé, je ne vois pas ta main"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Se te ha acabado el tiempo ;No he podido ver tu mano ;Trata de responder mas rapido ; Lo siento, no puedo ver tu mano"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>时间到;我没有看到你的手;请快点作答;我看不到你的手;对不起，我没有看到你的手。</chinese>
                                                    <english>Time&apos;s up;I did not see your hand;Try to answer a bit faster;I could not see your hand;Sorry, I don&apos;t see your hand</english>
                                                    <french>Temps écoulé;Je n&apos;ai pas vu ta main;Essaye de répondre un peu plus vite;Désolé, je ne vois pas ta main</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Se te ha acabado el tiempo ;No he podido ver tu mano ;Trata de responder mas rapido ; Lo siento, no puedo ver tu mano</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Move" robot="" id="13" tooltip="When good answer, move the arm, when wrong answer, say &apos;no&apos; with the head." bitmap_expanded="1" plugin="" x="691" y="196">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onGood(self, p):
        if p<0:
            self.gotoAndStop("Left")
        else:
            self.gotoAndStop("Right")

    def onInput_onWrong(self):
        self.gotoAndStop("No Head")        

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onGood" type="2" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onWrong" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="45" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="Right" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="YesOrNo" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="87" y="20">
                                                                    <bitmap>media/images/box/appu/yesno.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        step = self.getParameter("step")
        delay = self.getParameter("delay")
        yes = self.getParameter("yes")
        putstiffness = self.getParameter("ensure stiffness")

        aAngles = [step, -step, 0]
        aTimes =[delay, 2*delay, 3*delay]

        if yes:
            sJoint = "HeadPitch"
        else:
            sJoint = "HeadYaw"

        # Save current stiffness
        if putstiffness:
            stiffness = ALMotion.getStiffnesses(sJoint)
            ALMotion.setStiffnesses(sJoint, 1.0)        
            time.sleep(0.5)
            
        ALMotion.angleInterpolation(sJoint, aAngles, aTimes, False)

        if putstiffness:
            ALMotion.setStiffnesses(sJoint, stiffness)        
        self.onStopped()
        

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="step" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.5" min="0" max="3.14" tooltip="" id="5" />
                                                                    <Parameter name="delay" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.8" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="yes" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="7" />
                                                                    <Parameter name="ensure stiffness" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                                                                    <Resource name="Head" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="RArm" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="87" y="126">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="19" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="91.3219" />
                                                                                <Key frame="12" value="76.849" />
                                                                                <Key frame="18" value="91.3219" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="-5.3638" />
                                                                                <Key frame="12" value="-24.6708" />
                                                                                <Key frame="18" value="-5.3638" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="79.3638" />
                                                                                <Key frame="12" value="119.496" />
                                                                                <Key frame="18" value="79.3638" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="33.3134" />
                                                                                <Key frame="12" value="75.0032" />
                                                                                <Key frame="18" value="33.3134" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                    <Resource name="RShoulderPitch" type="Lock" timeout="0" />
                                                                    <Resource name="RShoulderRoll" type="Lock" timeout="0" />
                                                                    <Resource name="RElbowRoll" type="Lock" timeout="0" />
                                                                    <Resource name="RElbowYaw" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="7" tooltip="Wait for both inputs to be stimulated before stimulating its output." bitmap_expanded="1" plugin="" x="250" y="58">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="Left" index="10" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="LArm" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="85" y="127">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="19" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="91.3219" />
                                                                                <Key frame="12" value="76.849" />
                                                                                <Key frame="18" value="91.3219" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="5.3638" />
                                                                                <Key frame="12" value="24.6708" />
                                                                                <Key frame="18" value="5.3638" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="-79.3638" />
                                                                                <Key frame="12" value="-119.496" />
                                                                                <Key frame="18" value="-79.3638" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="5" value="-33.3134" />
                                                                                <Key frame="12" value="-75.0032" />
                                                                                <Key frame="18" value="-33.3134" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="YesOrNo" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="85" y="22">
                                                                    <bitmap>media/images/box/appu/yesno.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        step = self.getParameter("step")
        delay = self.getParameter("delay")
        yes = self.getParameter("yes")
        putstiffness = self.getParameter("ensure stiffness")

        aAngles = [step, -step, 0]
        aTimes =[delay, 2*delay, 3*delay]

        if yes:
            sJoint = "HeadPitch"
        else:
            sJoint = "HeadYaw"

        # Save current stiffness
        if putstiffness:
            stiffness = ALMotion.getStiffnesses(sJoint)
            ALMotion.setStiffnesses(sJoint, 1.0)        
            time.sleep(0.5)
            
        ALMotion.angleInterpolation(sJoint, aAngles, aTimes, False)

        if putstiffness:
            ALMotion.setStiffnesses(sJoint, stiffness)        
        self.onStopped()
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="step" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.5" min="0" max="3.14" tooltip="" id="5" />
                                                                    <Parameter name="delay" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.8" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="yes" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="7" />
                                                                    <Parameter name="ensure stiffness" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="7" tooltip="Wait for both inputs to be stimulated before stimulating its output." bitmap_expanded="1" plugin="" x="247" y="62">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="4" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                        <BehaviorKeyframe name="No Head" index="20" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="YesOrNo" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="83" y="20">
                                                                    <bitmap>media/images/box/appu/yesno.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        step = self.getParameter("step")
        delay = self.getParameter("delay")
        yes = self.getParameter("yes")
        putstiffness = self.getParameter("ensure stiffness")

        aAngles = [step, -step, 0]
        aTimes =[delay, 2*delay, 3*delay]

        if yes:
            sJoint = "HeadPitch"
        else:
            sJoint = "HeadYaw"

        # Save current stiffness
        if putstiffness:
            stiffness = ALMotion.getStiffnesses(sJoint)
            ALMotion.setStiffnesses(sJoint, 1.0)        
            time.sleep(0.5)
            
        ALMotion.angleInterpolation(sJoint, aAngles, aTimes, False)

        if putstiffness:
            ALMotion.setStiffnesses(sJoint, stiffness)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="step" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.5" min="0" max="3.14" tooltip="" id="5" />
                                                                    <Parameter name="delay" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.8" min="0" max="1" tooltip="" id="6" />
                                                                    <Parameter name="yes" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="7" />
                                                                    <Parameter name="ensure stiffness" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0" />
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0" />
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="SayRandom" robot="" id="14" tooltip="Randomly pick a sentence in the list of input sentence." bitmap_expanded="1" plugin="" x="939" y="142">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, list):
        p = list.split(";")
        self.onStopped( p[random.randint(0, len(p)-1)] )

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="15" tooltip="Say the sentence asked. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="1067" y="141">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        
    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here    
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        
    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ " 
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence)
        self.ids.append(id)
        self.tts.wait(id, 0)
        try:
            self.ids.remove(id)
        except:
            pass
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="change the speed of the voice" id="6" />
                                                <Resource name="TTS" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Compare" robot="" id="4" tooltip="Compare the asked side with the detected side. If they are the same, then good answer, otherwise bad answer." bitmap_expanded="1" plugin="" x="498" y="216">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        if p==self.nAskedSide:
            self.Good(p)
        else:
            self.Wrong()

    def onInput_onAskedSide(self, p):
        self.nAskedSide = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onAskedSide" type="2" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="Good" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="Wrong" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="SaveScore" robot="" id="5" tooltip="Comptablilise le score" bitmap_expanded="1" plugin="" x="691" y="96">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nGoodAnswers = 0
        self.nWrongAnswers = 0

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onGood(self):
        self.nGoodAnswers += 1
        self.save()

    def onInput_onWrong(self):
        self.nWrongAnswers += 1
        self.save()

    def save(self):
        ALMemory.insertData("answers", [self.nGoodAnswers, self.nWrongAnswers])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGood" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onWrong" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            </Box>
                                            <Box name="BlinkEye" robot="" id="8" tooltip="Makes Nao&apos;s eyes blink in red color." bitmap_expanded="1" plugin="" x="972" y="307">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.nDelay = self.getParameter("delay")
        self.nFading = self.getParameter("fading")
        self.hColor1 = 0xFF0000
        self.hColor2 = 0xFFFFFF
        self.sSide = None

    def onLoad(self):
        pass
        
    def onUnload(self):
        self.onInput_onStop()
        
    def setLedsColors(self, color):
        fading = self.getParameter("fading")
        if not self.sSide == "Both":
            for i in range(7):
                ALLeds.post.fadeRGB( "FaceLed%s%d" % (self.sSide, i) , color, fading)
            ALLeds.fadeRGB( "FaceLed%s%d" % (self.sSide, 7) , color, fading)
        else:
            ALLeds.fadeRGB( "FaceLeds", color, fading)            
            
    def onInput_onStart(self):
        self.sSide = self.getParameter("side")
        self.start()
        
    def start(self):
        delay = self.getParameter("delay")
        count = self.getParameter("count")
        while count > 0:
            count -= 1
            # Color up blinking led in one color
            self.setLedsColors(self.hColor1)
            # Then wait a little
            time.sleep(delay)
            # And finally, color up leds with white
            self.setLedsColors(self.hColor2)
            # Then wait a little again
            time.sleep(delay)
            
        for i in range(8):
            ALLeds.fadeRGB( "FaceLed%s%d" % ("Left", i) , self.hColor2, 0.0)
            ALLeds.fadeRGB( "FaceLed%s%d" % ("Right", i) , self.hColor2, 0.0)
            
    def onInput_onStop(self):
        if self.sSide != None:
            self.setLedsColors(self.hColor2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="5" tooltip="" id="5" />
                                                <Parameter name="fading" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="5" tooltip="" id="6" />
                                                <Parameter name="count" inherits_from_parent="0" content_type="1" value="2" default_value="0" min="0" max="100" tooltip="" id="7" />
                                                <Parameter name="side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="" id="8">
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                    <Choice value="Both" />
                                                </Parameter>
                                            </Box>
                                            <Box name="FaceLeds" robot="" id="2" tooltip="Makes Nao&apos;s eyes blink in green, then turns back to white when stop." bitmap_expanded="1" plugin="" x="1199" y="210">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStop(self):
        pass

    def onInput_Stop(self):
        pass

    def onInput_onStart(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="Stop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Parameter name="duration" inherits_from_parent="0" content_type="2" value="0" default_value="2" min="0" max="5" tooltip="Fade duration in seconds." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Color" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="565" y="28">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        color = ALMemory.getData("ballcolor")
        if color == "Red":
            color = [255, 0, 0]
        elif color == "Yellow":
            color = [0, 255, 255]
        elif color == "Green":
            color = [0, 255, 0]
        elif color == "Blue":
            color = [0, 0, 255]
        self.Color(color)

    def onInput_onStop(self):
        self.Color([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Color" type="2" type_size="3" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="FaceLeds" robot="" id="2" tooltip="Turns on and off the face LEDs." bitmap_expanded="1" plugin="" x="241" y="25">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"
        
    def onLoad(self):
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            try:
                ALLeds.stop(id)
            except:
                pass
       
    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass
        
    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Color Edit" robot="" id="3" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="82" y="77">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#00ff00</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Box name="Color Edit" robot="" id="4" tooltip="Can transmit a table of number [R,G,B], set by a Qt widget." bitmap_expanded="1" plugin="coloredit_plugin" x="78" y="15">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#ffffff</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="BallDetection" robot="" id="18" tooltip="Setup the ball detection algorithm" bitmap_expanded="1" plugin="" x="358" y="146">
                                                <bitmap>media/images/box/icons_appu/balldetection.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# BallDetection
#~ Author : Julien Amsellem
#~ Date : 04/11/2010
#~ Version : 1.0.1

import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        self.bMustStop = False
        self.aBallDetection = [0]*5 # [Saturation threshold (0..255), min hue, max hue]

    def onLoad(self):
        self.bIsRunning = False
        self.bMustStop = False
        self.ocv = None
        
    def onUnload(self):
        self.onInput_onStop()

    def update(self):
        self.aBallDetection[0] = ALMemory.getData("satThreshold")
        self.aBallDetection[3] = 100
        self.aBallDetection[4] = 1
        
        ballColor = ALMemory.getData("ballcolor")
        if ballColor == "Red":
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 40
        elif ballColor == "Yellow":
            self.aBallDetection[1] = 50
            self.aBallDetection[2] = 80
        elif ballColor == "Green":
            self.aBallDetection[1] = 100
            self.aBallDetection[2] = 150
        elif ballColor == "Blue":
            self.aBallDetection[1] = 220
            self.aBallDetection[2] = 250
        else:
            self.aBallDetection[1] = 0
            self.aBallDetection[2] = 360
        
    def onInput_onStart(self):
        if self.ocv == None:
            self.ocv = ALProxy("UsageOpenCV")
        self.ocv.setResolution(1)
        self.ocv.enableDetection("ball", True)
        self.update()
        self.ocv.setBallDetection(self.aBallDetection)
        self.ocv.setPeriod(self.getParameter("Period"))
        self.ocv.setVerbosity(self.getParameter("Verbosity"))
        
    def onInput_onSetup(self):
        if self.bIsRunning:
            self.bMustStop = True
            return
        self.bIsRunning = True
        
        while not self.bMustStop:        
            self.update()
            
            self.ocv.setBallDetection(self.aBallDetection)
            self.ocv.setPeriod(self.getParameter("Period"))
            self.ocv.setVerbosity(self.getParameter("Verbosity"))
            
            time.sleep(1.0)

        self.bIsRunning = False
        self.bMustStop = False
        
    def onInput_onStop(self):
        if self.bIsRunning:    
            self.bMustStop = True
            # Wait for loop to end
            while self.bMustStop:
                time.sleep(0.1)
        # Disable ball detection
        if self.ocv != None:
            self.ocv.enableDetection("ball", False)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Input name="onSetup" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="BallDetected" type="0" type_size="1" nature="4" stm_value_name="BallDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                <Parameter name="Saturation threshold" inherits_from_parent="0" content_type="1" value="84" default_value="90" min="0" max="255" tooltip="" id="7" />
                                                <Parameter name="Ball color" inherits_from_parent="0" content_type="3" value="Red" default_value="Blue" custom_choice="0" tooltip="" id="8">
                                                    <Choice value="Red" />
                                                    <Choice value="Yellow" />
                                                    <Choice value="Geen" />
                                                    <Choice value="Blue" />
                                                </Parameter>
                                                <Parameter name="Verbosity" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="3" tooltip="" id="9" />
                                                <Parameter name="Period" inherits_from_parent="0" content_type="1" value="50" default_value="100" min="1" max="1000" tooltip="" id="10" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="BallDetect" robot="" id="11" tooltip="Determine une bonne valeur de seuil de saturation en fonction des conditions d&apos;éclairage." bitmap_expanded="1" plugin="" x="163" y="126">
                                                                    <bitmap>media/images/box/appu/balldetection.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()
        
    def onInput_onStart(self, aBalls):
        self.log(str(aBalls))
        if aBalls!=None and len(aBalls)==1:
            # Output ball side
            if aBalls[0][0]<0.5:
                self.BallSeen(+1)
            else:
                self.BallSeen(-1)
        else:
            pass
                
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="BallSeen" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="FaceLeds" robot="" id="13" tooltip="Set the face leds. Note that you can enter this box to set other colors ! Very nice !" bitmap_expanded="1" plugin="" x="342" y="35">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                                    <Input name="Stop" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="duration" inherits_from_parent="0" content_type="2" value="0" default_value="2" min="0" max="5" tooltip="Fade duration in seconds." id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Color" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="111" y="25">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        color = ALMemory.getData("ballcolor")
        if color == "Red":
            color = [255, 0, 0]
        elif color == "Yellow":
            color = [0, 255, 255]
        elif color == "Green":
            color = [0, 255, 0]
        elif color == "Blue":
            color = [0, 0, 255]
        self.Color(color)

    def onInput_onStop(self):
        self.Color([255, 255, 255])]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="Color" type="2" type_size="3" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="FaceLeds" robot="" id="2" tooltip="Turns on and off the face LEDs." bitmap_expanded="1" plugin="" x="241" y="25">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ledName = "FaceLeds"
        
    def onLoad(self):
        self.ids = []
        
    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            try:
                ALLeds.stop(id)
            except:
                pass
        
    def getRGB(self, r, g, b):
        return 256*256*r + 256*g + b
        pass
        
    def clampColor(self, p):
        if(p < 0):
            p = 0
        if(p > 255):
            p = 255
        return p

    def onInput_onStart(self, p):
        r = self.clampColor(p[0])
        g = self.clampColor(p[1])
        b = self.clampColor(p[2])

        id = ALLeds.post.fadeRGB(self.ledName, self.getRGB(r, g, b), self.getParameter("duration"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="13" indexofinput="4" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Stand_Breathe" robot="" id="6" tooltip="This box can load a behavior, without playing it.&#x0A;And it can play the behavior later. If the behavior was not loaded before playing, it is loading on the fly.&#x0A;&#x0A;What is very usefull is that if you load a xar with this box, you can play it any where else in the behavior with a copy of this box !" bitmap_expanded="1" plugin="" x="938" y="26">
                                                <bitmap>media/images/box/icons_appu/Upload.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# v1.3
# 27/01/2011
# Need NaoQi version > 1.6.x
import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Loader = None
        
    def __del__(self):
        self.Loader.unload(self.getParameter("xar name"))
            
    def onLoad(self):
        path1 = ALFrameManager.getBehaviorPath(self.behaviorId)
        if path1 not in sys.path:
            sys.path.append(path1)
        import LoadingManager3
        if self.Loader == None:
            self.Loader = LoadingManager3.LoadingManager()
        
    def onUnload(self):
        self.onInput_onStop()
        
    def onInput_onPreload(self):
        sXarName = self.getParameter("xar name")
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)
        
    def onInput_onPlay(self):
        sXarName = self.getParameter("xar name")
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)        
        oBehavior = eval(id)
        self.Loader.play(sXarName, id, oBehavior, self.getParameter("Delete after playing"), {})
        try:
            output = oBehavior.getParameter("output")
        except:
            output = None
        self.onStopped(output)
        
    def onInput_onStop(self):
        sXarName = self.getParameter("xar name")
        self.Loader.stop(sXarName)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPreload" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the loading process of the xar file." id="2" />
                                                <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Start playing a xar file. If it has been loaded before, it will start playing faster." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="XarLoaded" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="xar name" inherits_from_parent="0" content_type="3" value="/home/nao/behaviors/stand_breathe/behavior.xar" default_value="" custom_choice="0" tooltip="" id="7" />
                                                <Parameter name="Delete after playing" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                            </Box>
                                            <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="3" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="4" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="3" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="3" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="18" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="3" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="18" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="18" indexofoutput="6" />
                                            <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="4" outputowner="18" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Pause" index="70" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="BlinkFront" index="40" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="BlinkTactile" robot="" id="1" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="160" y="35">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="7" />
                                                <Resource name="Head" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="BlinkMiddle" index="59" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="BlinkTactile" robot="" id="1" tooltip="Fait clignoter les leds du capteur capacitif." bitmap_expanded="1" plugin="" x="116" y="21">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

def getTactilLedName( nNumLed ):
    "get the name of the led device by it's number"
    "0 => front left; 1 => next in clock wise"
    if( nNumLed <= 1 ):
        return "Head/Led/Front/Right/%d/Actuator/Value" % (1-nNumLed);
    if( nNumLed >= 10 ):
        return "Head/Led/Front/Left/%d/Actuator/Value" % (nNumLed-10);
        
    if( nNumLed <= 2 ):
        return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-nNumLed);
    if( nNumLed >= 9 ):
        return "Head/Led/Middle/Left/%d/Actuator/Value" % (nNumLed-9);
        
    if( nNumLed <= 5 ):
        return "Head/Led/Rear/Right/%d/Actuator/Value" % (nNumLed-3);
    if( nNumLed >= 6 ):
        return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-nNumLed);

    return "error";
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.nDelay = 0.2
        self.dTactileSensors = {
            "Front":[0, 1, 10, 11],
            "Middle":[2, 9],
            "Rear":range(3, 9, 1)}
        self.DCMProxy = ALProxy( "DCM" )

    def onLoad(self):
        self.bMustStop = False
        
    def onUnload(self):
        self.onInput_onStop() # stop current loop execution

    def onInput_onStart(self):
        while not self.bMustStop:
            aLedArray = []
            for x in ["Front", "Middle", "Rear"]:
                if self.getParameter(x):
                    aLedArray += self.dTactileSensors[x]
            
            self.enableLeds(0.0, aLedArray)
            time.sleep(self.nDelay)
            self.enableLeds(1.0, aLedArray)
            time.sleep(self.nDelay)            
            
        for x in ["Front", "Middle", "Rear"]:
            self.enableLeds(1.0, self.dTactileSensors[x])
        
        self.bMustStop = False
        
    def enableLeds(self, p, aLeds):
        for i in aLeds:
            self.DCMProxy.set( [ getTactilLedName( i ), "Merge",  [[p, self.DCMProxy.getTime(0) ]] ] );

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Front" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="5" />
                                                <Parameter name="Middle" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="" id="6" />
                                                <Parameter name="Rear" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="7" />
                                                <Resource name="Head" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="70" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer3" mute="0">
                                    <BehaviorKeyframe name="Watch tactile" index="40" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="gotoScore" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="284" y="113">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Score" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoGame" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="284" y="18">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Game" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="TactileCodes" robot="" id="4" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="104" y="73">
                                                <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="17" />
                                                <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="18" />
                                                <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="19" />
                                                <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="20" />
                                                <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="21" />
                                                <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="28" />
                                                <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                            </Box>
                                            <Box name="gotoInit" robot="" id="1" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="284" y="205">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Init" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="7" />
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="8" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="70" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer4" mute="0">
                                    <BehaviorKeyframe name="OpenCV" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="ModuleC++" robot="" id="2" tooltip="Use a resource as a C++ module or python module, and register it for Naoqi." bitmap_expanded="1" plugin="" x="177" y="17">
                                                <bitmap>media/images/box/icons_appu/allauncher.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.launcher = ALProxy("ALLauncher")

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if not self.launcher.isModulePresent(self.getParameter("Module name")):
            self.fm = ALProxy("ALFrameManager")
            moduleList = self.launcher.launchLocal(self.fm.getBehaviorPath(self.behaviorId) + "/" + self.getParameter("Library"))
            self.log(str(moduleList))
        self.Loaded()

    def onInput_onStop(self):
        try:
            proxy = ALProxy(self.getParameter("Module name"))
            proxy.exit()
        except:
            self.log("Error while exiting module : %s" % self.getParameter("Module name"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="Loaded" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="Module name" inherits_from_parent="0" content_type="3" value="UsageOpenCV" default_value="UsageVisionInfo" custom_choice="0" tooltip="" id="6">
                                                    <Choice value="UsageNoiseExtractor" />
                                                    <Choice value="UsageOpenCV" />
                                                    <Choice value="UsageVisionInfo" />
                                                </Parameter>
                                                <Parameter name="Library" inherits_from_parent="0" content_type="3" value="libusageopencv.1.10.10.so" default_value="libusageopencv.1.10.10.so" custom_choice="0" tooltip="" id="7">
                                                    <Choice value="libusagesound.1.8.11.so" />
                                                    <Choice value="libusageopencv.1.8.11.so" />
                                                    <Choice value="libusagevision.1.8.11.so" />
                                                    <Choice value="libusageopencv.1.10.10.so" />
                                                    <Choice value="libusagesound.1.10.6.so" />
                                                    <Choice value="libusagevision.1.10.6.so" />
                                                </Parameter>
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer5" mute="0">
                                    <BehaviorKeyframe name="Watch state" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Subscribe" robot="" id="13" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="82" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="3" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="219" y="14">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("life")):
			self.output_1(p)
		elif(p == ("standup")):
			self.output_2(p)
		elif(p == ("sitdown")):
			self.output_3(p)
		elif(p == ("wait")):
			self.output_4(p)
		elif(p == ("rest")):
			self.output_5(p)
		elif(p == ("system")):
			self.output_6(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword>&quot;standup&quot;</keyword>
                                                        <keyword>&quot;sitdown&quot;</keyword>
                                                        <keyword>&quot;wait&quot;</keyword>
                                                        <keyword>&quot;rest&quot;</keyword>
                                                        <keyword>&quot;system&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                            </Box>
                                            <Box name="gotoPause" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="541" y="12">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        #~ self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Pause" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="543" y="106">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
