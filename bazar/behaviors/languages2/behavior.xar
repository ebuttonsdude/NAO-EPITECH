<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="94">
                        <Box name="Languages" robot="" id="1" tooltip="This is a short story about Nao with different languages." bitmap_expanded="1" plugin="" x="194" y="45">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.gotoAndStop("End")

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Start" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="GetLang" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="77" y="18">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        tts = ALProxy("ALTextToSpeech")
        self.onStopped(tts.getLanguage())

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Save" robot="" id="2" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="213" y="18">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="goto1" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="352" y="18">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="1" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Stop" robot="" id="4" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." bitmap_expanded="1" plugin="" x="83" y="116">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="1" index="6" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="349" y="14">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我第一次来到中国是在2008年参加中国机器人大赛。"
		sEnglish = "I am able to speak several languages. One of my first trip was in China during RoboCup2008."
		sFrench = "Je suis capable de parler dans plusieurs langues. L'un de mes  premier voyage était en chine lors de la robokeuppe en 2008."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Yo soy capaz de hablar varios idiomas. Uno de mi primer viaje fue en China durante laRoboCup 2008."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我第一次来到中国是在2008年参加中国机器人大赛。</chinese>
                                                    <english>I am able to speak several languages. One of my first trip was in China during RoboCup2008.</english>
                                                    <french>Je suis capable de parler dans plusieurs langues. L&apos;un de mes  premier voyage était en chine lors de la robokeuppe en 2008.</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Yo soy capaz de hablar varios idiomas. Uno de mi primer viaje fue en China durante laRoboCup 2008.</spanish>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="621" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Read" robot="" id="4" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="73" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="7" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="204" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self, p):
        self.tts.setLanguage(p)
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="3" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                            </Box>
                                            <Box name="goto2" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="759" y="12">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="2" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="5" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="267" y="292">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="2" index="10" bitmap="media/images/box/icons_appu/flag_chinese.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="301" y="15">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我很喜欢中国，在这里我学会了中文，并第一次公开展示了我的足球才能。"
		sEnglish = ""
		sFrench = ""
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我很喜欢中国，在这里我学会了中文，并第一次公开展示了我的足球才能。</chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="573" y="15">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto3" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="831" y="17">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="3" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="6" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="74" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Set Speaker Vol." robot="" id="4" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="371" y="140">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self, p):
        self.audiodevice.setOutputVolume(int(p))
        self.onReady() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="2" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                                            </Box>
                                            <Box name="Get Speaker Vol." robot="" id="5" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="125" y="209">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self):
        self.onReady(self.audiodevice.getOutputVolume())]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                            </Box>
                                            <Box name="Multiply" robot="" id="8" tooltip="Multiply the first input value by the second one and send the result on the output." bitmap_expanded="1" plugin="" x="242" y="140">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Multiplicand(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Multiplier(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand * self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Multiplicand" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Multiplier" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Box name="Number Edit" robot="" id="9" tooltip="Send the number you entered when the input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="114" y="140">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1.4)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>1.4</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                                            </Box>
                                            <Box name="Set Speaker Vol." robot="" id="11" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="696" y="17">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self):
        self.audiodevice.setOutputVolume(self.getParameter("Volume (%)"))
        self.onReady() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="7" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="123" y="326">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="3" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="4" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="3" index="15" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="337" y="16">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "整个欧洲都遍布着我的足迹，"
		sEnglish = "I also traveled extensively in Europe."
		sFrench = "J'ai aussi beaucoup voyagé en Europe."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "También viajó extensamente por Europa."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>整个欧洲都遍布着我的足迹，</chinese>
                                                    <english>I also traveled extensively in Europe.</english>
                                                    <french>J&apos;ai aussi beaucoup voyagé en Europe.</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>También viajó extensamente por Europa.</spanish>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="609" y="16">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto4" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="745" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="4" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="4" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="70" y="16">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="5" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="200" y="14">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self, p):
        try:
            self.tts.setLanguage( p )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="3" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="6" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="269" y="284">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="4" index="20" bitmap="media/images/box/icons_appu/flag_italian.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="225" y="17">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = ""
		sFrench = ""
		sGerman = ""
		sItalian = "Ho viaggiato per l'Italia, da Roma a Pisa e Palermo, via Padova. È lì che ho imparato aparlare con le mani!"
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese></chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian>Ho viaggiato per l&apos;Italia, da Roma a Pisa e Palermo, via Padova. È lì che ho imparato aparlare con le mani!</italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>3</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="497" y="17">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto5" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="642" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="5" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="8" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="81" y="17">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Italian" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="156" y="241">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="5" index="25" bitmap="media/images/box/icons_appu/flag_spanish.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="225" y="17">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = ""
		sFrench = ""
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "En España me he acostumbrado por ejemplo, en un proyecto para la rehabilitación de los niños enfermos en los hospitales."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese></chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>En España me he acostumbrado por ejemplo, en un proyecto para la rehabilitación de los niños enfermos en los hospitales.</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="497" y="17">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto6" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="625" y="20">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="6" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="8" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="83" y="16">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Spanish" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="123" y="216">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="6" index="30" bitmap="media/images/box/icons_appu/flag_german.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="227" y="11">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = ""
		sFrench = ""
		sGerman = "Obwohl die lateinische Sprache mich unterhalten (11), ich spreche auch die Sprachevon Goethe. Drüben ich im Raum lokalisieren (12) zu verwalten, Treppensteigen (13)oder Greifen Objekte."
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese></chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german>Obwohl die lateinische Sprache mich unterhalten (11), ich spreche auch die Sprachevon Goethe. Drüben ich im Raum lokalisieren (12) zu verwalten, Treppensteigen (13)oder Greifen Objekte.</german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>4</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="498" y="11">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto7" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="626" y="12">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="7" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="8" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="89" y="12">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="German" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="131" y="209">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="7" index="35" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="370" y="11">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我在亚洲也很出名，特别是世博会后，我成了当之无愧的机器人明星。"
		sEnglish = "I'm very popular in Asia, especially since the Shanghai Expo, which made me a star!"
		sFrench = "Je suis très apprécié en Asie, surtout depuis l'exposition universelle de Shanghai qui a fait de moi une star !"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Estoy muy popular en Asia, especialmente desde la Exposición Universal de Shanghai, lo que me convirtió en una estrella!"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我在亚洲也很出名，特别是世博会后，我成了当之无愧的机器人明星。</chinese>
                                                    <english>I&apos;m very popular in Asia, especially since the Shanghai Expo, which made me a star!</english>
                                                    <french>Je suis très apprécié en Asie, surtout depuis l&apos;exposition universelle de Shanghai qui a fait de moi une star !</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Estoy muy popular en Asia, especialmente desde la Exposición Universal de Shanghai, lo que me convirtió en una estrella!</spanish>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="642" y="11">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto8" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="792" y="8">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="8" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="4" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="90" y="11">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="7" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="225" y="11">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self, p):
        try:
            self.tts.setLanguage( p )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="3" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="5" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="295" y="202">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="8" index="40" bitmap="media/images/box/icons_appu/flag_japanese.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="228" y="5">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = ""
		sFrench = ""
		sGerman = ""
		sItalian = ""
		sJapanese = "もロボットの土地は私を採用！私は東京の高等教育のための新しいパートナーシッププログラムに参加する"
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese></chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese>もロボットの土地は私を採用！私は東京の高等教育のための新しいパートナーシッププログラムに参加する</japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>6</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="500" y="5">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto9" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="634" y="4">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="9" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="8" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="79" y="9">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Japanese" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="102" y="182">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="9" index="45" bitmap="media/images/box/icons_appu/flag_korean.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="227" y="10">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = ""
		sEnglish = ""
		sFrench = ""
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = "나는 이미 한국, 난 정말 원하거나 교육 프로그램에 참여할 국가 발견되기 시작하는데"
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese></chinese>
                                                    <english></english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean>나는 이미 한국, 난 정말 원하거나 교육 프로그램에 참여할 국가 발견되기 시작하는데</korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="494" y="13">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto10" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="744" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="10" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speaker Vol." robot="" id="4" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="349" y="140">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self, p):
        self.audiodevice.setOutputVolume(int(p))
        self.onReady() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="2" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                                            </Box>
                                            <Box name="Get Speaker Vol." robot="" id="5" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="79" y="218">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self):
        self.onReady(self.audiodevice.getOutputVolume())]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                            </Box>
                                            <Box name="Multiply" robot="" id="8" tooltip="Multiply the first input value by the second one and send the result on the output." bitmap_expanded="1" plugin="" x="220" y="140">
                                                <bitmap>media/images/box/box-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.rMultiplier = 2.0
        self.bMultiplicand = False
        self.bMultiplier = False
        self.rMultiplicand = 2.0

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_Multiplicand(self, rVal ):
        self.rMultiplicand = float(rVal)
        self.bMultiplicand = True
        self.process()

    def onInput_Multiplier(self, rVal ):
        self.rMultiplier = float(rVal)
        self.bMultiplier = True
        self.process()

    def process(self):
        if self.bMultiplicand and self.bMultiplier:
            rRes = self.rMultiplicand * self.rMultiplier
            self.bMultiplicand = False
            self.bMultiplier = False
            self.output_Product( rRes )]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Multiplicand" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplicand." id="2" />
                                                <Input name="Multiplier" type="2" type_size="1" nature="1" inner="0" tooltip="The multiplier." id="3" />
                                                <Output name="output_Product" type="2" type_size="1" nature="2" inner="0" tooltip="The product." id="4" />
                                            </Box>
                                            <Box name="Number Edit" robot="" id="9" tooltip="Send the number you entered when the input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="74" y="148">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1.3)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>1.3</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                                            </Box>
                                            <Box name="Set Speaker Vol." robot="" id="11" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="621" y="13">
                                                <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")

    def onInput_onSet(self):
        self.audiodevice.setOutputVolume(self.getParameter("Volume (%)"))
        self.onReady() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="4" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="7" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="77" y="13">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Spanish" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="6" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="139" y="329">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="3" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="4" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="11" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="10" index="50" bitmap="media/images/box/icons_appu/flag_french.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="225" y="17">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "虽然去过了那么多城市，但是巴黎永远在我的心中，因为那是我出生的地方。"
		sEnglish = "Despite all these trips, Paris is always in my heart, it's the city where I was born"
		sFrench = "Malgré tous ces voyages, Paris reste toujours dans mon coeur, c'est la ville ou je suis né"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "A pesar de todos estos viajes, Paris es siempre en mi corazon, es la ciudad dondenaci"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>虽然去过了那么多城市，但是巴黎永远在我的心中，因为那是我出生的地方。</chinese>
                                                    <english>Despite all these trips, Paris is always in my heart, it&apos;s the city where I was born</english>
                                                    <french>Malgré tous ces voyages, Paris reste toujours dans mon coeur, c&apos;est la ville ou je suis né</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>A pesar de todos estos viajes, Paris es siempre en mi corazon, es la ciudad dondenaci</spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="492" y="23">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto11" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="637" y="23">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="11" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="7" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="74" y="16">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="French" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="110" y="193">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="11" index="55" bitmap="media/images/box/icons_appu/flag_us.png">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="224" y="18">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "当然，我还去过美国，在那里我去过哈佛大学，奥斯汀大学跟卡内基梅隆大学等学府。"
		sEnglish = "Of course, I do not forget the United States, where I go to prestigious universities such as Harvard, Austin or Carnegie-Mellon"
		sFrench = ""
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>当然，我还去过美国，在那里我去过哈佛大学，奥斯汀大学跟卡内基梅隆大学等学府。</chinese>
                                                    <english>Of course, I do not forget the United States, where I go to prestigious universities such as Harvard, Austin or Carnegie-Mellon</english>
                                                    <french></french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish></spanish>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="496" y="18">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="goto12" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="636" y="18">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="12" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="7" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="70" y="28">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        try:
            self.tts.setLanguage( self.getParameter("Language") )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="4" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="101" y="200">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="12" index="60" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LocalizedText" robot="" id="1" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="357" y="20">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "总而言之，我是一个世界公民。"
		sEnglish = "In short, to conclude, I am a citizen of the world"
		sFrench = "Bref, pour conclure, je suis citoyen du monde"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "En resumen, para concluir, yo soy un ciudadano del mundo"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>总而言之，我是一个世界公民。</chinese>
                                                    <english>In short, to conclude, I am a citizen of the world</english>
                                                    <french>Bref, pour conclure, je suis citoyen du monde</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>En resumen, para concluir, yo soy un ciudadano del mundo</spanish>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Say Text" robot="" id="3" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="629" y="20">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="gotoEnd" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="758" y="20">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="End" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="4" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="76" y="20">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Set Speech Lang." robot="" id="6" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="208" y="17">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self, p):
        try:
            self.tts.setLanguage( p )
            self.onReady()
        except:
            self.onNotFound()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="3" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onNotFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Chinese" default_value="English" custom_choice="1" tooltip="Set the language NAO speaks." id="5">
                                                    <Choice value="Chinese" />
                                                    <Choice value="English" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Spanish" />
                                                </Parameter>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="5" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="290" y="222">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Pause" index="65" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="End" index="72" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Set Speech Lang." robot="" id="5" tooltip="Select the language you would like NAO to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="253" y="16">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self, p):
        self.tts.setLanguage(p)
        self.onReady()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="3" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                            </Box>
                                            <Box name="Read" robot="" id="4" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="115" y="16">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="CurrentLanguage" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="1" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="314" y="194">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="3" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="Bodytalk" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="IsPaused" robot="" id="7" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="71" y="52">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bContinue = True
        self.bPause = False

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        while self.bContinue:
            try:
                pause = ALMemory.getData(self.getParameter("var name"))
            except:
                pause = False
            if pause != self.bPause:
                if pause:
                    self.Pause()
                else:
                    self.Play()
            self.bPause = pause
            time.sleep(0.5)

    def onInput_onStop(self):
        self.bContinue = False]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="Play" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="Pause" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="pauseBehavior" default_value="" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Stand_Talk" robot="" id="8" tooltip="This box can load a behavior, without playing it.&#x0A;And it can play the behavior later. If the behavior was not loaded before playing, it is loading on the fly.&#x0A;&#x0A;What is very usefull is that if you load a xar with this box, you can play it any where else in the behavior with a copy of this box !" bitmap_expanded="1" plugin="" x="256" y="10">
                                                <bitmap>media/images/box/icons_appu/Upload.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# v1.3
# 27/01/2011
# Need NaoQi version > 1.6.x
import sys
import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.Loader = None
        
    def __del__(self):
        self.Loader.unload(self.getParameter("xar name"))
            
    def onLoad(self):
        self.path = ALFrameManager.getBehaviorPath(self.behaviorId)
        if self.path not in sys.path:
            sys.path.append(self.path)
        import LoadingManager3
        if self.Loader == None:
            self.Loader = LoadingManager3.LoadingManager()
        
    def onUnload(self):
        self.onInput_onStop()
        
    def onInput_onPreload(self):
        sXarName = self.getParameter("xar name")
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)
        
    def onInput_onPlay(self):
        sXarName = self.getParameter("xar name")
        self.log("path : %s, fullpath : %s " % (self.path, sXarName))
        id = self.Loader.load(sXarName)
        self.XarLoaded(sXarName)        
        oBehavior = eval(id)
        self.Loader.play(sXarName, id, oBehavior, self.getParameter("Delete after playing"), {})
        try:
            output = oBehavior.getParameter("output")
        except:
            output = None
        self.onStopped(output)
        
    def onInput_onStop(self):
        sXarName = self.getParameter("xar name")
        self.Loader.stop(sXarName)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onPreload" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the loading process of the xar file." id="2" />
                                                <Input name="onPlay" type="1" type_size="1" nature="2" inner="0" tooltip="Start playing a xar file. If it has been loaded before, it will start playing faster." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="XarLoaded" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="xar name" inherits_from_parent="0" content_type="3" value="/home/nao/behaviors/stand_talk/behavior.xar" default_value="" custom_choice="0" tooltip="" id="7" />
                                                <Parameter name="Delete after playing" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="8" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="4" outputowner="7" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="65" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer3" mute="0">
                                    <BehaviorKeyframe name="Watch state" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Subscribe" robot="" id="13" tooltip="Listen to a specified event" bitmap_expanded="1" plugin="" x="82" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        # should remove event here
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onValueChanged(self, name, value, msg):
        """Documentation so that method is automatically binded"""
        self.onEvent(value)
    
    def onInput_onStart(self):
        ALMemory.subscribeToEvent(self.getParameter("Event name"), self.id, "onValueChanged")

    def onInput_onStop(self):
        ALMemory.unsubscribeToEvent(self.getParameter("Event name"), self.id)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="FrameNumber" robot="" id="1" tooltip="Outputs the current frame number." bitmap_expanded="1" plugin="" x="467" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        try:
            nFrameNumber = ALMemory.getData(self.parentId)
        except:
            nFrameNumber = 1
        self.onFrame(nFrameNumber)
            
        

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onFrame" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="3" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="219" y="14">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("life")):
			self.output_1(p)
		elif(p == ("standup")):
			self.output_2(p)
		elif(p == ("sitdown")):
			self.output_3(p)
		elif(p == ("wait")):
			self.output_4(p)
		elif(p == ("rest")):
			self.output_5(p)
		elif(p == ("system")):
			self.output_6(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;life&quot;</keyword>
                                                        <keyword>&quot;standup&quot;</keyword>
                                                        <keyword>&quot;sitdown&quot;</keyword>
                                                        <keyword>&quot;wait&quot;</keyword>
                                                        <keyword>&quot;rest&quot;</keyword>
                                                        <keyword>&quot;system&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                                <Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" />
                                            </Box>
                                            <Box name="Goto And Stop (number)" robot="" id="2" tooltip="Jump to the frame number set in parameters and stop the parent timeline.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." bitmap_expanded="1" plugin="" x="743" y="114">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onGo(self, p):
        self.gotoAndStopParent(p+5)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGo" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="gotoPause" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="741" y="14">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        #~ self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Pause" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Save" robot="" id="8" tooltip="Save data value into ALMemory" bitmap_expanded="1" plugin="" x="602" y="14">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.insertData(self.getParameter("var name"), p)
        self.log("%s = %s" % (self.getParameter("var name"), p))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Value to assign to data into memory." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Value has been saved into memory." id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="demo/current_frame" default_value="" custom_choice="0" tooltip="Name of the data to save to memory." id="4" />
                                            </Box>
                                            <Box name="Read" robot="" id="5" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="471" y="114">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
            self.onStopped(p)
        except:
            pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="demo/current_frame" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="13" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="empty" index="72" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
