<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="-1">
                        <Box name="System" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="189" y="48">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="menu" mute="0">
                                    <BehaviorKeyframe name="Intro" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Say" robot="" id="1" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="179" y="22">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "已经进入系统菜单"
		sEnglish = "You are in the system menu."
		sFrench = "Tu es dans le menu système."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = ""
		sSpanish = "Estás en el sistema menudo."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>已经进入系统菜单</chinese>
                                                                        <english>You are in the system menu.</english>
                                                                        <french>Tu es dans le menu système.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Estás en el sistema menudo.</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="gotoStart" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="365" y="20">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Stop" robot="" id="7" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." bitmap_expanded="1" plugin="" x="173" y="334">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="Eyes LEDs" robot="" id="2" tooltip="Set the LED color of NAO&apos;s eyes. Note that you must open the box to enter the color." bitmap_expanded="1" plugin="" x="170" y="139">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Eyes LEDs" robot="" id="15" tooltip="Set the color of LEDs of robot&apos;s eyes." bitmap_expanded="1" plugin="" x="281" y="41">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = ALLeds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                </Box>
                                                                <Box name="Color Edit" robot="" id="16" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." bitmap_expanded="1" plugin="coloredit_plugin" x="105" y="47">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 0, 0])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#000000</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="SetFeetLEDs" robot="" id="3" tooltip="Set the intensity of the LEDs of a given group." bitmap_expanded="1" plugin="" x="365" y="252">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self, p):
        ALLeds.fadeRGB(self.getParameter("LEDs group"), 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.onReady() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="2" type_size="3" nature="1" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                <Parameter name="LEDs group" inherits_from_parent="0" content_type="3" value="FeetLeds" default_value="EarLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set." id="4">
                                                    <Choice value="AllLeds" />
                                                    <Choice value="BrainLeds" />
                                                    <Choice value="ChestLeds" />
                                                    <Choice value="EarLeds" />
                                                    <Choice value="FaceLeds" />
                                                    <Choice value="FeetLeds" />
                                                    <Choice value="LeftEarLeds" />
                                                    <Choice value="LeftFaceLeds" />
                                                    <Choice value="LeftFootLeds" />
                                                    <Choice value="RightEarLeds" />
                                                    <Choice value="RightFaceLeds" />
                                                    <Choice value="RightFootLeds" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="60" tooltip="How much time to go to the max/min intensity in seconds." id="5" />
                                            </Box>
                                            <Box name="Color Edit" robot="" id="5" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." bitmap_expanded="1" plugin="coloredit_plugin" x="155" y="253">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 0, 0])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <color>#000000</color>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Start" index="7" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Say" robot="" id="1" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="67" y="96">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "选择一个需要的信息"
		sEnglish = "Select an information."
		sFrench = "Sélectionne une information."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = ""
		sSpanish = "Selecciona una información."
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>选择一个需要的信息</chinese>
                                                                        <english>Select an information.</english>
                                                                        <french>Sélectionne une information.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Selecciona una información.</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Choice" robot="" id="9" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="206" y="122">
                                                <bitmap>media/images/box/icons_appu/voice_recognition.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="4" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="5" />
                                                <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="30" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="langage/langue;adresse;batterie;temperature;Quitter/Sortir" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="language;address;battery;temperature;Quit/Exit/Stop" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="lenguaje; dirección; batería; temperatura;salir " default_value="" custom_choice="0" tooltip="" id="12" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="语言;地址;电量;温度;结束/退出/停止" default_value="" custom_choice="0" tooltip="" id="13" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                    <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                    <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                    <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                    <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                    <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                    <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                    <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                    <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                    <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                    <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                    <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                    <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                    <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                    <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                    <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                    <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                    <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                    <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                    <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                    <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                </Box>
                                                                <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                    <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                        <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Logger" robot="" id="11" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="152" y="234">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# Logger
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.log(str(p))

    def onInput_onStop(self):
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                </Box>
                                                                <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="2" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="350" y="96">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		elif(p == (4)):
			self.output_5(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword>4</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                                <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                            </Box>
                                            <Box name="gotoLanguage" robot="" id="3" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="618" y="4">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Language" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoTemp" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="618" y="292">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Temperature" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoAddress" robot="" id="5" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="618" y="101">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Address" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="gotoBattery" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="618" y="196">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Battery" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Say" robot="" id="7" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="210" y="266">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "You can use my head to choose if you prefer"
		sFrench = "Tu peux utiliser ma tête pour choisir si tu préfères."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>你好</chinese>
                                                                        <english>You can use my head to choose if you prefer</english>
                                                                        <french>Tu peux utiliser ma tête pour choisir si tu préfères.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese>Olá</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="8" />
                                            <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Language" index="14" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Text Edit" robot="" id="4" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="89" y="9">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("system")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>system</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Event" robot="" id="7" tooltip="Create a new event, and trigger the event with input value." bitmap_expanded="1" plugin="" x="292" y="9">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def __del__(self):
        pass

    def onLoad(self):
        #~ ALMemory.declareEvent(self.getParameter("Event name"))
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        ALMemory.raiseEvent(self.getParameter("Event name"), p)        
        self.onStopped()

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="Event name" inherits_from_parent="0" content_type="3" value="autonomous/state" default_value="" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Set Language" robot="" id="3" tooltip="Select the language you would like Nao to use. Any following call to ALTextToSpeech (Say box for instance) will use this language." bitmap_expanded="1" plugin="" x="715" y="187">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onInput_onStart(self, p):
        asr = ALProxy("ALSpeechRecognition")
        tts = ALProxy("ALTextToSpeech")
        
        tts.loadVoicePreference("NaoOfficialVoice" + p)
        asr.setLanguage(p)
        ALMemory.insertData("/commercial/language", p)
    
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="Multiplexer" robot="" id="1" tooltip="Depending on the stimulated input, tranmits the matching value through the main output." bitmap_expanded="1" plugin="multiplexer_plugin" x="482" y="158">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_input_1(self):
			self.onStopped("English")
	def onInput_input_2(self):
			self.onStopped("French")
	def onInput_input_3(self):
			self.onStopped("Spanish")
	def onInput_input_4(self):
			self.onStopped("Chinese")
	def onInput_input_5(self):
			self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;English&quot;</keyword>
                                                        <keyword>&quot;French&quot;</keyword>
                                                        <keyword>&quot;Spanish&quot;</keyword>
                                                        <keyword>&quot;Chinese&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="input_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="input_2" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="3" />
                                                <Input name="input_3" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Input name="input_4" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Input name="input_5" type="1" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                            </Box>
                                            <Box name="LocalizedText" robot="" id="2" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="989" y="177">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我现在说{lang}"
		sEnglish = "I now speak in {lang}"
		sFrench = "Je parle maintenant en {lang}"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Ahora hablo en {lang}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我现在说{lang}</chinese>
                                                    <english>I now speak in {lang}</english>
                                                    <french>Je parle maintenant en {lang}</french>
                                                    <german></german>
                                                    <italian></italian>
                                                    <japanese></japanese>
                                                    <korean></korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Ahora hablo en {lang}</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="SayLang" robot="" id="5" tooltip="Say the sentence received in the input. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="835" y="10">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        self.dLanguages = {"French":"Français", "English":"English", "Spanish":"Español","Chinese":"中文"}

    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        sLang = self.dLanguages[self.tts.getLanguage()]
        sentence = "\RSPD="+ str( self.getParameter("Speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ "
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence.format(lang=sLang))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a string is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="Speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice." id="6" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="6" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="1089" y="9">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="Choice" robot="" id="9" tooltip="Configure speech recognition to seelct an answer from a set of sentences. Head tactile sensors can also be used to select a sentence." bitmap_expanded="1" plugin="" x="117" y="158">
                                                <bitmap>media/images/box/icons_appu/voice_recognition.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Version: v1.0
# Author : J.Amsellem
# Date : 26/01/2011

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass
        
    def onInput_onStart(self, dictionnary):
        pass
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition with an array of string as a dictionnary." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                <Output name="onRecognized" type="2" type_size="1" nature="1" inner="0" tooltip="This output is activated when a word is recognized" id="4" />
                                                <Output name="onFailed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when speech recognition is ready to be launched." id="5" />
                                                <Parameter name="Confidence" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.2" min="0" max="1" tooltip="Speech recognition confidence threshold." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="1" value="20" default_value="10" min="0" max="100" tooltip="Lap of time alowed to give the choice." id="7" />
                                                <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="Number of bad recognition alowed." id="8" />
                                                <Parameter name="French" inherits_from_parent="0" content_type="3" value="Anglais;Français" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is french. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="9" />
                                                <Parameter name="English" inherits_from_parent="0" content_type="3" value="English;French" default_value="" custom_choice="0" tooltip="List of allowed answers when current language is english. Answers are formated like the following :&#x0A;answer1/alternate answer1;answer2;answer3" id="10" />
                                                <Parameter name="Repeat choice" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Indicates if the validated choice should be repeated or not." id="11" />
                                                <Parameter name="Spanish" inherits_from_parent="0" content_type="3" value="Inglés;Francés;Español;Chino" default_value="" custom_choice="0" tooltip="" id="12" />
                                                <Parameter name="Chinese" inherits_from_parent="0" content_type="3" value="英语;法语;西班牙语;中文" default_value="" custom_choice="0" tooltip="" id="13" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="TactileCodes" robot="" id="3" tooltip="Detection de sequence tactile sur la tête de Nao." bitmap_expanded="1" plugin="" x="108" y="115">
                                                                    <bitmap>media/images/box/appu/fingerprint.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class SequenceHandler():
    def __init__(self, aSeq):
        self.aTactilSequence = aSeq
        self.reset()
    
    def reset(self):
        self.nTapTime = None
        self.nTapIndex = 2
        
    def update(self, aState, nTime):
        # In any case, if too much time elasped, sequence is invalidated
        if self.nTapTime != None and (nTime - self.nTapTime) > self.aTactilSequence[self.nTapIndex-1]:
            self.reset()
        # If current sensors state match current expected shape
        if aState == self.aTactilSequence[self.nTapIndex]:
            self.nTapTime = nTime
            self.nTapIndex += 2
        # If current sensor state does not match sequence at current index BUT match sequence at first index
        elif aState == self.aTactilSequence[1]:
            self.nTapTime = nTime
            self.nTapIndex = 4
        # If we've reach the end of the sequence, then output !!
        if self.nTapIndex > len(self.aTactilSequence):
            return self.aTactilSequence[0]
        else:
            return None
        
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bIsRunning = False
        # Build a list of devices with full name
        self.aDeviceNames = ["%sTactilTouched" % name for name in ["Front", "Middle", "Rear"]]
        
        # Parameters
        parameters = [   ["SingleFront", "Single front", [1, 0, 0], 1.0, [0, 0, 0]],
                                ["SingleMiddle", "Single middle", [0, 1, 0], 1.0, [0, 0, 0]],
                                ["SingleRear", "Single rear", [0, 0, 1], 1.0, [0, 0, 0]],
                                ["CaressFtoR", "Caress front to rear", [1, 0, 0], 0.5, [1, 1, 0], 0.5, [0, 1, 0], 0.5, [0, 1, 1], 0.5, [0, 0, 1]],
                                ["CaressRtoF", "Caress rear to front", [0, 0, 1], 0.5, [0, 1, 1], 0.5, [0, 1, 0], 0.5, [1, 1, 0], 0.5, [1, 0, 0]],
                                ["SingleTap", "Single tap", [1, 1, 1], 0.5, [0, 0, 0]],
                                ["EnumerateFtoR", "Enumerate front to rear", [1, 0, 0], 1.0, [0, 1, 0], 1.0, [0, 0, 1]],
                                ["EnumerateRtoF", "Enumerate rear to front", [0, 0, 1], 1.0, [0, 1, 0], 1.0, [1, 0, 0]],
                                ["ZoomIn", "Zoom in", [1, 0, 1], 1.0, [0, 1, 0]],
                                ["ZoomOut", "Zoom out", [0, 1, 0], 1.0, [1, 0, 1]],
                                ["DoubleFront", "Double front", [1, 0, 0], 1.0, [0, 0, 0], 1.0, [1, 0, 0]],
                                ["DoubleMiddle", "Double middle", [0, 1, 0], 1.0, [0, 0, 0], 1.0, [0, 1, 0]],
                                ["DoubleRear", "Double rear", [0, 0, 1], 1.0, [0, 0, 0], 1.0, [0, 0, 1]],
                                ["DoubleTap", "Double tap", [1, 1, 1], 1.0, [0, 0, 0], 1.0, [1, 1, 1]],
                                ["SecretCode", "Secret code", [1, 0, 1], 1.0, [0, 0, 0], 1.0, [1, 0, 1], 1.0, [0, 1, 0]],                                
                                ["CalmDown", "Calm down", [1, 1, 1], 8.0, [0, 0, 0]]    ]
        # Create a sequence handler object for each enable sequence
        self.aSequenceHandler = []
        for seq in parameters:
            if self.getParameter(seq[1]):
                self.aSequenceHandler.append(SequenceHandler(seq))

    def onLoad(self):
        self.bIsRunning = False
        self.onInput_reset()
        
    def onUnload(self):
        self.onInput_onStop()

    def onSensorChange(self, pDataName, pValue, pMessage):
        "This is called whenever one of the three tactil sensors state change"    
        aState = ALMemory.getListData( self.aDeviceNames )
        # This prevent to process several times the same sensor state
        if aState != self.aState:
            self.aState = aState
            nTime = time.time()
            #~ self.log(str(aState))
            for seq in self.aSequenceHandler:
                sOutput = seq.update(aState, nTime)
                if  sOutput != None:
                    self.Match(sOutput)
                    # Force all other sequence to be reset to prevent multiple match.
                    # But this will prevent sequences like "DoubleTap" to work since each "SingleTap" will reset "DoubleTap"
                    self.onInput_reset()
                    # Get the output function from the sequence name
                    try:
                        func = getattr(self, sOutput)
                        func()
                    # If no output function found, just forget it
                    except:
                        pass

    def onInput_onStart(self):
        if not self.bIsRunning:
            self.bIsRunning = True
            # Save initial sensor state
            self.aState = None#ALMemory.getListData( self.aDeviceNames )        
            # Subscribe to each sensor device
            for device in self.aDeviceNames:
                ALMemory.subscribeToEvent( device, self.getName(), "onSensorChange" )            
    
    def onInput_onStop(self):
        if self.bIsRunning:
            for device in self.aDeviceNames:
                ALMemory.unsubscribeToEvent( device, self.getName() )
            self.onInput_reset()
            self.bIsRunning = False
            
    def onInput_reset(self):
        for seq in self.aSequenceHandler:
            seq.reset()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="Match" type="3" type_size="1" nature="2" inner="0" tooltip="double tap" id="4" />
                                                                    <Output name="SingleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="DoubleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Output name="DoubleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="DoubleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                    <Output name="EnumerateRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                    <Output name="EnumerateFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                                                    <Output name="CaressRtoF" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                    <Output name="CaressFtoR" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                    <Output name="DoubleTap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" />
                                                                    <Output name="ZoomIn" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="ZoomOut" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="SingleFront" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                    <Output name="SingleMiddle" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" />
                                                                    <Output name="SingleRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" />
                                                                    <Parameter name="Caress front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Caress front to rear" id="20" />
                                                                    <Parameter name="Caress rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="21" />
                                                                    <Parameter name="Single tap" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="22" />
                                                                    <Parameter name="Double front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="23" />
                                                                    <Parameter name="Double middle" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="24" />
                                                                    <Parameter name="Double rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="25" />
                                                                    <Parameter name="Calm down" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="26" />
                                                                    <Parameter name="Enumerate front to rear" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="27" />
                                                                    <Parameter name="Enumerate rear to front" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="28" />
                                                                    <Parameter name="Zoom in" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="29" />
                                                                    <Parameter name="Zoom out" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="30" />
                                                                    <Parameter name="Double tap" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="" id="31" />
                                                                    <Parameter name="Secret code" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="32" />
                                                                    <Parameter name="Single front" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="33" />
                                                                    <Parameter name="Single middle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="34" />
                                                                    <Parameter name="Single rear" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="35" />
                                                                </Box>
                                                                <Box name="Dictionnary" robot="" id="1" tooltip="List of words to recognize" bitmap_expanded="1" plugin="" x="451" y="106">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nIndex = None

    def onUnload(self):
        pass

    def onInput_onStart(self, dico):
        asr = ALProxy("ALSpeechRecognition")    
        sLang = asr.getLanguage()
        
        # If no dico provided as parameter, use the one from parameters
        if dico == None:
            dico = self.getParameter(sLang).split(";")
            
        # This array will contain the text to say for each allowed answer
        self.aAnswers = []
        # This array will contain every sentences to be recognized by speech recognition engine
        self.aDictionnary = []
        
        for answer in dico:
            # For one answer, each possible proposition is separated by a '/' character
            tmp = answer.split("/")
            self.aDictionnary += tmp
            self.aAnswers.append(tmp[0])
            
        self.log(str(self.aDictionnary))
        self.log(str(self.aAnswers))
        try:
            asr.setWordListAsVocabulary( self.aDictionnary )
            asr.setVisualExpression(True)
        except RuntimeError, e:
            self.log("Could not change current speech recognition dictionnary: " + str(e))
            raise e
        self.onReady(dico)

    def onInput_onSayNext(self):
        if self.nIndex == None:
            self.nIndex = 0
        else:
            self.nIndex += 1
        self.nIndex = self.nIndex % len(self.aAnswers)
        self.onSay(self.aAnswers[self.nIndex])

        
    def onInput_onSayPrev(self):
        if self.nIndex == None:
            self.nIndex = -1
        else:
            self.nIndex -= 1    
        self.nIndex = self.nIndex % len(self.aAnswers)            
        self.onSay(self.aAnswers[self.nIndex])
        
    def onInput_onValidate(self):
        if self.nIndex != None:
            self.onValidated(self.aAnswers[self.nIndex])
        
    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSayNext" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onValidate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onSayPrev" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                    <Output name="onValidated" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                                                                    <Output name="onReady" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="4" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="901" y="97">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Launch ASR" robot="" id="2" tooltip="Try to recognize the list of words set in the ASR.&#x0A;&#x0A;It has 2 outputs:&#x0A;- First one transmit the understood word if the threshold associated is&#x0A;high enough.&#x0A;- Second one is stimulated when nothing has been understood or where the&#x0A;threshold was not high enough." bitmap_expanded="1" plugin="" x="590" y="268">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts speech recongition." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops speech recongintion." id="3" />
                                                                    <Input name="WordRecognized" type="0" type_size="1" nature="4" stm_value_name="WordRecognized" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Transmit a word recognized with enough trust. Can be connected directly to a dispatcher." id="6" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood during last process." id="7" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="media/images/box/interaction/say.png">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Process Word" robot="" id="1" tooltip="Process speech recognition extractor data (WordRecognized) to give the most&#x0A;interesting data." bitmap_expanded="1" plugin="" x="140" y="59">
                                                                                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if len(p) > 1:
            if p[1] >= self.getParameter("Confidence"):
                self.onWord(p[0]) #~ activate output of the box
            else:
                self.onNothing()
        else:
            self.onNothing()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;WordRecognized extractor data." id="2" />
                                                                                        <Output name="onWord" type="3" type_size="1" nature="1" inner="0" tooltip="The word recognized." id="3" />
                                                                                        <Output name="onNothing" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if nothing has been recognized or the word recognized had&#x0A;not a recognition threshold high enough to be taken into account." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Repeat" robot="" id="5" tooltip="Repeat n times." bitmap_expanded="1" plugin="" x="756" y="325">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.nTimes = 0

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.nTimes += 1    
        if self.nTimes>= self.getParameter("Number of tries"):
            self.onStopped()
        else:
            self.onRepeat()

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onRepeat" type="1" type_size="1" nature="2" inner="0" tooltip="Activated on each repetition" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Activated when the maximum number of repetetion is reached" id="5" />
                                                                    <Parameter name="Number of tries" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Wait" robot="" id="6" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="445" y="6">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                                </Box>
                                                                <Box name="IndexOf" robot="" id="7" tooltip="Output the index of the entry in the array" bitmap_expanded="1" plugin="" x="754" y="226">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.aArray = None

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onEntry(self, p):
        found = False
        index = 0
        while not found and index < len(self.aArray):
            found = p in self.aArray[index]
            index += 1
        if found:
            if self.getParameter("Repeat choice"):
                tmp = self.aArray[index-1].split("/")
                self.onSay(tmp[0])
            self.onStopped(index-1)
        else:
            self.onStopped(-1)

    def onInput_onArray(self, p):
        self.aArray = p

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onEntry" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onArray" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="7" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="17" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="19" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="18" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Switch Case" robot="" id="10" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="257" y="158">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == (0)):
			self.output_1(p)
		elif(p == (1)):
			self.output_2(p)
		elif(p == (2)):
			self.output_3(p)
		elif(p == (3)):
			self.output_4(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>0</keyword>
                                                        <keyword>1</keyword>
                                                        <keyword>2</keyword>
                                                        <keyword>3</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                                <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                                <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            </Box>
                                            <Box name="AskLang" robot="" id="8" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="431" y="9">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="369" y="50">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="LocalizedText" robot="" id="8" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="86" y="49">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "选择默认语言"
		sEnglish = "Select the language"
		sFrench = "Selectionnez une langue"
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Escoje el idioma"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>选择默认语言</chinese>
                                                                        <english>Select the language</english>
                                                                        <french>Selectionnez une langue</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Escoje el idioma</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="BrainEffects" robot="" id="11" tooltip="Can be used as a loading animation." bitmap_expanded="1" plugin="" x="915" y="349">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False
        self.bIsRunning = False
        self.DCM = ALProxy( "DCM" )
        
        self.HeadLeds = ["Head/Led/%s/%s/%d/Actuator/Value" % (sPos, sSide, nIdx) for sPos in  ["Front", "Middle", "Rear"] for sSide in ["Right", "Left"] for nIdx in range(3)]
        self.aRotateSequence = [1, 0, 6, 12, 13, 14, 17, 16, 15, 9, 3, 4]
        self.aProgressSequence = [0, 3, 1, 4, 6, 9, 12, 15, 13, 16, 14, 17]
        #~ for i in range(len(self.HeadLeds)):
            #~ self.log("%d, %s" % (i, self.HeadLeds[i]))
        
    def onLoad(self):
        self.bMustStop = False
        self.bIsRunning = False

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" )
            return

        self.bIsRunning = True
        self.bMustStop = False

        # Set all leds off
        ALLeds.off("BrainLeds")

        while( not self.bMustStop ):
            value = float(self.getParameter("intensity"))
            nTime = self.getParameter("delay")           
            for i in self.aRotateSequence:
                riseTime = self.DCM.getTime(nTime)
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[value, riseTime ]] ] )
                time.sleep( nTime/1000. )
                self.DCM.set( [ self.HeadLeds[i], "Merge",  [[0.0, riseTime + int(nTime)/4 ]] ] )
        # end while
        
        self.bIsRunning = False
        # Set all leds on
        ALLeds.on("BrainLeds")
        self.onStopped()

    def onInput_onStop(self):
        self.bMustStop = True]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="delay" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="1000" tooltip="" id="5" />
                                                <Parameter name="intensity" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Say" robot="" id="12" tooltip="Say some text. Note that you must open the box to enter the text." bitmap_expanded="1" plugin="" x="110" y="300">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Say Text" robot="" id="2" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" robot="" id="5" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "你好"
		sEnglish = "You can use my head to choose if you prefer"
		sFrench = "Tu peux utiliser ma tête pour choisir si tu préfères."
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = "Olá"
		sSpanish = "Hola"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>你好</chinese>
                                                                        <english>You can use my head to choose if you prefer</english>
                                                                        <french>Tu peux utiliser ma tête pour choisir si tu préfères.</french>
                                                                        <german>Hallo</german>
                                                                        <italian>Ciao</italian>
                                                                        <japanese>こんにちは</japanese>
                                                                        <korean>안녕하세요 </korean>
                                                                        <portuguese>Olá</portuguese>
                                                                        <spanish>Hola</spanish>
                                                                        <language>2</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Text Edit" robot="" id="13" tooltip="Send the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="289" y="307">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Deactivating spanish and chinese for the moment.\nReactivate when everything is translated if it is really necessary.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>Deactivating spanish and chinese for the moment.&#x0A;Reactivate when everything is translated if it is really necessary.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="WorkaroundAudio" robot="" id="14" tooltip="This box is here because of bug 4186.&#x0A;Pronouce a sentence with 0 volume.&#x0A;TO REMOVE when the bug is fixed." bitmap_expanded="1" plugin="" x="838" y="189">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="LocalizedText_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="SayText_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="LocalizedText" robot="" id="4" tooltip="LocalizedText" bitmap_expanded="1" plugin="localizationbox_plugin" x="234" y="240">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我现在说{lang}"
		sEnglish = "Setting."
		sFrench = "Réglage."
		sGerman = ""
		sItalian = ""
		sJapanese = ""
		sKorean = ""
		sPortuguese = ""
		sSpanish = "Ahora hablo en {lang}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>我现在说{lang}</chinese>
                                                                        <english>Setting.</english>
                                                                        <french>Réglage.</french>
                                                                        <german></german>
                                                                        <italian></italian>
                                                                        <japanese></japanese>
                                                                        <korean></korean>
                                                                        <portuguese></portuguese>
                                                                        <spanish>Ahora hablo en {lang}</spanish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Say Text" robot="" id="6" tooltip="Say the text set in parameters." bitmap_expanded="1" plugin="" x="542" y="231">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []
        
    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="SpeakerSettings" robot="" id="1" tooltip="Set the sound volume between 0 (mute) and 100 (max)." bitmap_expanded="1" plugin="" x="407" y="34">
                                                                    <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.audiodevice = ALProxy("ALAudioDevice")
        self.demoVolume = 0

    def onInput_onSet(self):
        self.audiodevice.setOutputVolume(self.demoVolume)
        self.onFinished()
        
        
    def onInput_onSetZero(self):
        self.demoVolume = self.audiodevice.getOutputVolume()
        self.audiodevice.setOutputVolume(0)
        self.onReady()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onSetZero" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                    <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="3" />
                                                                    <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="4" />
                                                                    <Output name="onFinished" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="0" max="100" tooltip="Percentage of maximum output volume." id="6" />
                                                                </Box>
                                                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="10" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="4" outputowner="10" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="5" outputowner="10" indexofoutput="7" />
                                            <Link inputowner="11" indexofinput="3" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="12" indexofinput="2" outputowner="9" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Address" index="24" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="IpAddress" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="72" y="134">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import fcntl
import struct

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


            
    def get_ip_address(self, ifname):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            ip = socket.inet_ntoa(fcntl.ioctl(s.fileno(), 0x8915, struct.pack('256s', ifname[:15]))[20:24])
        except:
            ip = None
        return ip
        
    def onLoad(self):
        pass
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        ip = self.get_ip_address("eth0")
        if ip == None:
            ip = self.get_ip_address("wlan0")
        self.onStopped(ip)


    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Localized Text" robot="" id="3" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="316" y="28">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "我的网络地址是{ip}"
		sEnglish = "My internet address is {ip}"
		sFrench = "Mon adresse ip est {ip}"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = ""
		sSpanish = "Mi dirección ip es {ip} "
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>我的网络地址是{ip}</chinese>
                                                    <english>My internet address is {ip}</english>
                                                    <french>Mon adresse ip est {ip}</french>
                                                    <german>Hallo</german>
                                                    <italian>Ciao</italian>
                                                    <japanese>こんにちは</japanese>
                                                    <korean>안녕하세요 </korean>
                                                    <portuguese></portuguese>
                                                    <spanish>Mi dirección ip es {ip} </spanish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="697" y="103">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Box name="SayAddress" robot="" id="5" tooltip="Say the sentence received in the input. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="563" y="108">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("Speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ "
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence.format(ip=self.sAddress))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onAddress(self, p):
        self.sAddress = p
        
    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a string is received on this Input." id="2" />
                                                <Input name="onAddress" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="6" />
                                                <Parameter name="Speed" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice." id="7" />
                                            </Box>
                                            <Box name="Wait" robot="" id="1" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." bitmap_expanded="1" plugin="" x="190" y="25">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Battery" index="33" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Read" robot="" id="5" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="60" y="109">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        try:
            p = ALMemory.getData(self.getParameter("var name"))
            self.onStopped(p)
        except:
            self.onStopped(None)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="ALSentinel/BatteryLevel" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Localized Text" robot="" id="3" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="225" y="40">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "电池电量是{level}"
		sEnglish = "Battery level is {level}"
		sFrench = "Le niveau de ma batterie est {level}"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = ""
		sSpanish = "El nivel de batería es {level}"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>电池电量是{level}</chinese>
                                                    <english>Battery level is {level}</english>
                                                    <french>Le niveau de ma batterie est {level}</french>
                                                    <german>Hallo</german>
                                                    <italian>Ciao</italian>
                                                    <japanese>こんにちは</japanese>
                                                    <korean>안녕하세요 </korean>
                                                    <portuguese></portuguese>
                                                    <spanish>El nivel de batería es {level}</spanish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Box name="SayBattery" robot="" id="1" tooltip="Say the sentence received in the input. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="503" y="109">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("Speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ "
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence.format(level=self.getParameter("Battery level")))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a string is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="5" />
                                                <Parameter name="Speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice." id="6" />
                                                <Parameter name="Battery level" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="7" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="2" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="646" y="109">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="7" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Temperature" index="42" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Temperatures" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="61" y="114">
                                                <bitmap>media/images/box/icons_appu/hot.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        sTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value"
        aJointNames = ALMotion.getJointNames("Body")
        # when using dcm: remove RHipYawPitch joint
        aDataNames = [sTemplate % name for name in aJointNames if name != "RHipYawPitch"]
        aTemps = ALMemory.getListData(aDataNames)
        # Combine joint temperatures and joint names
        aTemperatures = zip(aTemps, aJointNames)

        highest = [0, ""]
        for item in aTemperatures:
            if item[0]>highest[0]:
                highest[0] = item[0]
                highest[1] = item[1]
        self.onStopped(highest)
            

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Parameter name="hot" inherits_from_parent="0" content_type="1" value="75" default_value="75" min="0" max="100" tooltip="" id="5" />
                                                <Parameter name="cool" inherits_from_parent="0" content_type="1" value="70" default_value="65" min="0" max="100" tooltip="" id="6" />
                                            </Box>
                                            <Box name="SayTemp" robot="" id="2" tooltip="Say the sentence received in the input. See box parameters for fine tuning of the voice." bitmap_expanded="1" plugin="" x="512" y="114">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        sentence = "\RSPD="+ str( self.getParameter("Speed") )+ "\ "
        sentence += "\VCT="+ str( self.getParameter("Voice Shaping") ) + "\ "
        sentence += str(p)
        sentence +=  "\RST\ "
        id = self.tts.post.say(sentence.format(joint=self.sJoint, temp=self.sTemp))
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onTemperature(self, p):
        self.sJoint = p[1]
        self.sTemp = int(p[0])
        
    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a string is received on this Input." id="2" />
                                                <Input name="onTemperature" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
                                                <Parameter name="Voice Shaping" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='This tag is used to modify at runtime the voice feature (tone, speed) in way slightly different of what pitch and speed modification does, giving a kind of &quot;gender or age modification &quot; effect.&#x0A;&#x0A;To better tune the effect, one should compensate the speed modification due to the value parameter. For exemple to keep an average constant speed, one should add 20% to speed parameter when decreasing 20% to the Voice Shaping (VCT) parameter :&#x0A;&#x0A;A quite good male derivation of female voice for example could be obtained using the following parameters: VCT=78.' id="6" />
                                                <Parameter name="Speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice." id="7" />
                                            </Box>
                                            <Box name="Localized Text" robot="" id="3" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." bitmap_expanded="1" plugin="localizationbox_plugin" x="234" y="33">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sChinese = "关节{joint}的温度是{temp}"
		sEnglish = "The joint {joint} has a temperature of {temp} degrees"
		sFrench = "L'articulation {joint} est à {temp} degrés"
		sGerman = "Hallo"
		sItalian = "Ciao"
		sJapanese = "こんにちは"
		sKorean = "안녕하세요 "
		sPortuguese = ""
		sSpanish = "La articulación {joint} está a {temp} grados"
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>关节{joint}的温度是{temp}</chinese>
                                                    <english>The joint {joint} has a temperature of {temp} degrees</english>
                                                    <french>L&apos;articulation {joint} est à {temp} degrés</french>
                                                    <german>Hallo</german>
                                                    <italian>Ciao</italian>
                                                    <japanese>こんにちは</japanese>
                                                    <korean>안녕하세요 </korean>
                                                    <portuguese></portuguese>
                                                    <spanish>La articulación {joint} está a {temp} grados</spanish>
                                                    <language>8</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Box name="gotoStart" robot="" id="4" tooltip="Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. Note that all the behavior keyframes will be loaded, and therefore the event logic will still be running." bitmap_expanded="1" plugin="" x="641" y="114">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        name = self.getParameter("frame name")
        self.log("%s -> %s" % (self.boxName, name))
        self.gotoAndStopParent(name)

    def onInput_onStop(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                                <Parameter name="frame name" inherits_from_parent="0" content_type="3" value="Start" default_value="" custom_choice="0" tooltip="" id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="position" mute="0">
                                    <BehaviorKeyframe name="getInPosition" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Read" robot="" id="3" tooltip="Read a data from ALMemory" bitmap_expanded="1" plugin="" x="106" y="100">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Read
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = ALMemory.getData(self.getParameter("var name"))
        self.onStopped(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Value of the read data" id="3" />
                                                <Parameter name="var name" inherits_from_parent="0" content_type="3" value="robotPoseChanged" default_value="" custom_choice="0" tooltip="Name of the data to read from memory" id="4" />
                                            </Box>
                                            <Box name="Switch Case" robot="" id="1" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." bitmap_expanded="1" plugin="dispatcher_plugin" x="245" y="104">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("Stand")):
			self.output_1(p)
		elif(p == ("Sit")):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <keywords>
                                                        <keyword>&quot;Stand&quot;</keyword>
                                                        <keyword>&quot;Sit&quot;</keyword>
                                                        <keyword></keyword>
                                                    </keywords>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                                <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                                <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                                <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            </Box>
                                            <Box name="CheckArmsSitting" robot="" id="2" tooltip="Check if the arms are in front of the body. If it is not the case, need to move them on the side before going to sit." bitmap_expanded="1" plugin="" x="494" y="180">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="90">
                                                                <Box name="SetLArmBack" robot="" id="1" tooltip="Spread the left arm" bitmap_expanded="1" plugin="" x="305" y="231">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="119.5" />
                                                                                <Key frame="20" value="118.369" />
                                                                                <Key frame="30" value="22.4979" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="18.1912" />
                                                                                <Key frame="20" value="62.8402" />
                                                                                <Key frame="30" value="60.1155" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="16.697" />
                                                                                <Key frame="20" value="-23.2489" />
                                                                                <Key frame="30" value="-98.0017" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-73.7388" />
                                                                                <Key frame="20" value="-22.8494" />
                                                                                <Key frame="30" value="-33.1328" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="5.62267" />
                                                                                <Key frame="20" value="-48.5186" />
                                                                                <Key frame="30" value="31.7265" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0" />
                                                                                <Key frame="20" value="0" />
                                                                                <Key frame="30" value="0" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="SetRArmBack" robot="" id="4" tooltip="Spread the right arm" bitmap_expanded="1" plugin="" x="393" y="621">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="119.271" />
                                                                                <Key frame="20" value="119.5" />
                                                                                <Key frame="33" value="10.7867" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-4.92434" />
                                                                                <Key frame="20" value="-76" />
                                                                                <Key frame="33" value="-51.3479" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-29.8856" />
                                                                                <Key frame="20" value="18.3968" />
                                                                                <Key frame="33" value="100.09" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="71.9857" />
                                                                                <Key frame="20" value="9.19604" />
                                                                                <Key frame="33" value="49.1315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="55.7209" />
                                                                                <Key frame="33" value="41.7977" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.608" />
                                                                                <Key frame="33" value="0.928318" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="7" tooltip="Wait for multiple time activation. Define the number of time it must be activated to trigger the output." bitmap_expanded="1" plugin="" x="763" y="120">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# WaitSignals
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0
            
    def onInput_onStop(self):
        self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="5" />
                                                                </Box>
                                                                <Box name="SetLArmSide" robot="" id="5" tooltip="Spread the left arm" bitmap_expanded="1" plugin="" x="329" y="128">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="113.554" />
                                                                                <Key frame="20" value="44.1192" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="67.85" />
                                                                                <Key frame="20" value="65.5648" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-12.0436" />
                                                                                <Key frame="20" value="-119.5" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-75.4966" />
                                                                                <Key frame="20" value="-48.5138" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-33.4013" />
                                                                                <Key frame="20" value="-38.1474" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.5812" />
                                                                                <Key frame="20" value="0.5804" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="SetRArmSide" robot="" id="6" tooltip="Spread the right arm" bitmap_expanded="1" plugin="" x="397" y="426">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="117.162" />
                                                                                <Key frame="20" value="49.7491" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-68.4701" />
                                                                                <Key frame="20" value="-68.8216" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="33.3965" />
                                                                                <Key frame="20" value="119.5" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="48.1671" />
                                                                                <Key frame="20" value="68.6458" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0" />
                                                                                <Key frame="20" value="0" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="RightHandArea" robot="" id="8" tooltip="Compute hand position to check whether the hand is to the front or the back of NAO&apos;s body.&#x0A;&#x0A;v0.9b&#x0A;&#x0A;It&apos;s usefull to add some movement to position arms before doing some animation (standup, specific animation, ...)&#x0A;&#x0A;Warning: Arm must be stiffness to get the right value." bitmap_expanded="1" plugin="" x="145" y="431">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# GetHandArea
# v0.9
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):
        aCurrentHandPos = ALMotion.getPosition( self.getParameter( 'strSideName' ), 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        #self.log( "%s" % str( aCurrentHandPos ) );
        if aCurrentHandPos[0] >= 0.07 or aCurrentHandPos[2] >= 0.12:
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        elif aCurrentHandPos[1] <= - 0.22:
            self.output_onFront()
        else:
            self.output_onSide()
        pass
        
# GetHandArea - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input.&#x0A;&#x0A;(No more parameter)" id="2" />
                                                                    <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                    <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                    <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                    <Parameter name="strSideName" inherits_from_parent="0" content_type="3" value="RArm" default_value="LArm" custom_choice="0" tooltip="Choose there the side you want to test" id="6">
                                                                        <Choice value="RArm" />
                                                                        <Choice value="LArm" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="LeftHandArea" robot="" id="3" tooltip="Compute hand position to check whether the hand is to the front or the back of NAO&apos;s body.&#x0A;&#x0A;v0.9b&#x0A;&#x0A;It&apos;s usefull to add some movement to position arms before doing some animation (standup, specific animation, ...)&#x0A;&#x0A;Warning: Arm must be stiffness to get the right value." bitmap_expanded="1" plugin="" x="135" y="42">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# GetHandArea
# v0.9
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):
        aCurrentHandPos = ALMotion.getPosition( self.getParameter( 'strSideName' ), 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        #self.log( "%s" % str( aCurrentHandPos ) );
        if aCurrentHandPos[0] >= 0.07 or aCurrentHandPos[2] >= 0.12: 
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        elif aCurrentHandPos[1] >= 0.22:
            self.output_onFront()
        else:
            self.output_onSide()
        pass
        
# GetHandArea - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input.&#x0A;&#x0A;(No more parameter)" id="2" />
                                                                    <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                    <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                    <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                    <Parameter name="strSideName" inherits_from_parent="0" content_type="3" value="LArm" default_value="LArm" custom_choice="0" tooltip="Choose there the side you want to test" id="6">
                                                                        <Choice value="RArm" />
                                                                        <Choice value="LArm" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="CheckArmsStanding" robot="" id="4" tooltip="Check if the arms are in front of the body. If it is not the case, need to move them on the side before going to sit." bitmap_expanded="1" plugin="" x="487" y="51">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="SetLArmBack" robot="" id="1" tooltip="Spread the left arm" bitmap_expanded="1" plugin="" x="312" y="222">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="117.597" />
                                                                                <Key frame="20" value="117.597" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="19.5975" />
                                                                                <Key frame="20" value="31.6386" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="28.4745" />
                                                                                <Key frame="20" value="-119.5" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-48.4259" />
                                                                                <Key frame="20" value="-2" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-0.881321" />
                                                                                <Key frame="20" value="-20.9206" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.0156" />
                                                                                <Key frame="20" value="0.1068" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="SetRArmBack" robot="" id="4" tooltip="Spread the right arm" bitmap_expanded="1" plugin="" x="309" y="544">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="117.338" />
                                                                                <Key frame="20" value="80.3354" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-5.80326" />
                                                                                <Key frame="20" value="-24.5242" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-6.24272" />
                                                                                <Key frame="20" value="111.532" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="16.0866" />
                                                                                <Key frame="20" value="17.0534" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.788621" />
                                                                                <Key frame="20" value="-0.529755" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.004" />
                                                                                <Key frame="20" value="0.004" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="WaitSignals" robot="" id="7" tooltip="Wait for multiple time activation. Define the number of time it must be activated to trigger the output." bitmap_expanded="1" plugin="" x="763" y="120">
                                                                    <bitmap>media/images/box/box-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# WaitSignals
#~ Author : Julien Amsellem
#~ Date : 17/12/2010
#~ Version : 1.0

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ok = 0
        self.nCount = self.getParameter("Count")
        
    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.ok += 1
        if self.ok >= self.nCount:
            self.onStopped()
            self.ok = 0
            
    def onInput_onStop(self):
        self.ok = 0]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Count" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="Number of process to synchronize" id="5" />
                                                                </Box>
                                                                <Box name="SetLArmSide" robot="" id="5" tooltip="Spread the left arm" bitmap_expanded="1" plugin="" x="331" y="114">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="97.7332" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="17.5759" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-76.2924" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-7.20472" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="1.31597" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.1316" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="SetRArmSide" robot="" id="6" tooltip="Spread the right arm" bitmap_expanded="1" plugin="" x="306" y="405">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="96.5954" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="-19.2507" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="83.4947" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="14.7682" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="4.48007" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="10" value="0.296" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="LeftHandArea" robot="" id="8" tooltip="Compute hand position to check whether the hand is to the front or the back of NAO&apos;s body.&#x0A;&#x0A;v0.9b&#x0A;&#x0A;It&apos;s usefull to add some movement to position arms before doing some animation (standup, specific animation, ...)&#x0A;&#x0A;Warning: Arm must be stiffness to get the right value." bitmap_expanded="1" plugin="" x="142" y="54">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# GetHandArea
# v0.9
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):
        aCurrentHandPos = ALMotion.getPosition( self.getParameter( 'strSideName' ), 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        #self.log( "%s" % str( aCurrentHandPos ) );
        if aCurrentHandPos[0] >= 0.05  or aCurrentHandPos[2] >= 0.12: 
            self.output_onFront()
        elif aCurrentHandPos[0] <= -0.05 :
            self.output_onBack();
        elif aCurrentHandPos[1] >= 0.14:
            self.output_onFront()
        else:
            self.output_onSide()
        pass
        
# GetHandArea - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input.&#x0A;&#x0A;(No more parameter)" id="2" />
                                                                    <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                    <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                    <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                    <Parameter name="strSideName" inherits_from_parent="0" content_type="3" value="LArm" default_value="LArm" custom_choice="0" tooltip="Choose there the side you want to test" id="6">
                                                                        <Choice value="RArm" />
                                                                        <Choice value="LArm" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Box name="RightHandArea" robot="" id="3" tooltip="Compute hand position to check whether the hand is to the front or the back of NAO&apos;s body.&#x0A;&#x0A;v0.9b&#x0A;&#x0A;It&apos;s usefull to add some movement to position arms before doing some animation (standup, specific animation, ...)&#x0A;&#x0A;Warning: Arm must be stiffness to get the right value." bitmap_expanded="1" plugin="" x="145" y="353">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# GetHandArea
# v0.9
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):
        aCurrentHandPos = ALMotion.getPosition( self.getParameter( 'strSideName' ), 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        #self.log( "%s" % str( aCurrentHandPos ) );
        if aCurrentHandPos[0] >= 0.05  or aCurrentHandPos[2] >= 0.12:
            self.output_onFront();
        elif aCurrentHandPos[0] <= -0.05:
            self.output_onBack()
        elif aCurrentHandPos[1] <= -0.13:
            self.output_onFront()
        else:
            self.output_onSide()
        pass
        
# GetHandArea - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input.&#x0A;&#x0A;(No more parameter)" id="2" />
                                                                    <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                    <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                    <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                    <Parameter name="strSideName" inherits_from_parent="0" content_type="3" value="RArm" default_value="LArm" custom_choice="0" tooltip="Choose there the side you want to test" id="6">
                                                                        <Choice value="RArm" />
                                                                        <Choice value="LArm" />
                                                                    </Parameter>
                                                                </Box>
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Stand" robot="" id="5" tooltip='Robot will go to the position &quot;Stand&#x0A;Position description : Standing position with low power consumption. &#x0A;' bitmap_expanded="1" plugin="" x="619" y="48">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="91.2292" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.4899" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-70.3158" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-33.6601" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.23791" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.232026" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="85.1695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="67.6742" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="24.9637" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="9.92936" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="0.406934" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-9.22623" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="6.4185" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="11.692" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-5.18802" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="4.04062" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-6.15002" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-3.86483" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="10.8083" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.60596" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="20" value="3.78175" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Sit" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="625" y="182">
                                                <bitmap>media/images/box/movement/sit.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.gotoAndStop(200)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="25" resources_acquisition="0" size="45" enable="1" start_frame="0" end_frame="220" scale="10">
                                                    <watches />
                                                    <ActuatorList>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-1.0571" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-19.9904" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="50.8" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="16.3455" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-38.7627" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-60.7308" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-0.303564" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="0" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="50.8038" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-17.7565" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="33.8359" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="63.8118" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-0.266079" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="0" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-37.5274" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="10.7252" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-90.9655" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="76.9029" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="51.5021" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="0.969213" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-11.6872" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-91.0582" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="75.7651" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="51.9464" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                            <Key frame="40" value="-0.964405" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                                <Resource name="Sitting" type="Lock" timeout="2" />
                                                <Resource name="HeadYaw" type="Lock" timeout="2" />
                                                <Resource name="HeadPitch" type="Lock" timeout="2" />
                                                <Resource name="LShoulderPitch" type="Lock" timeout="2" />
                                                <Resource name="LShoulderRoll" type="Lock" timeout="2" />
                                                <Resource name="LElbowRoll" type="Lock" timeout="2" />
                                                <Resource name="LElbowYaw" type="Lock" timeout="2" />
                                                <Resource name="LWristYaw" type="Lock" timeout="2" />
                                                <Resource name="LHand" type="Lock" timeout="2" />
                                                <Resource name="RShoulderPitch" type="Lock" timeout="2" />
                                                <Resource name="RShoulderRoll" type="Lock" timeout="2" />
                                                <Resource name="RElbowRoll" type="Lock" timeout="2" />
                                                <Resource name="RElbowYaw" type="Lock" timeout="2" />
                                                <Resource name="RWristYaw" type="Lock" timeout="2" />
                                                <Resource name="RHand" type="Lock" timeout="2" />
                                                <Resource name="LHipYawPitch" type="Lock" timeout="2" />
                                                <Resource name="LHipRoll" type="Lock" timeout="2" />
                                                <Resource name="LHipPitch" type="Lock" timeout="2" />
                                                <Resource name="LKneePitch" type="Lock" timeout="2" />
                                                <Resource name="LAnklePitch" type="Lock" timeout="2" />
                                                <Resource name="LAnkleRoll" type="Lock" timeout="2" />
                                                <Resource name="RHipRoll" type="Lock" timeout="2" />
                                                <Resource name="RHipPitch" type="Lock" timeout="2" />
                                                <Resource name="RKneePitch" type="Lock" timeout="2" />
                                                <Resource name="RAnklePitch" type="Lock" timeout="2" />
                                                <Resource name="RAnkleRoll" type="Lock" timeout="2" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="Finished" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="329" y="45">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        pass

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onOk(self):
        eval(self.behaviorId).addParameter("output", True, True)
        self.onInput_onStop()

    def onInput_onNOk(self):
        eval(self.behaviorId).addParameter("output", False, True)
        self.onInput_onStop()
        
    def onInput_onStop(self):
        eval(self.behaviorId).setParameter("finished", True)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onOk" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                            <Input name="onNOk" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
