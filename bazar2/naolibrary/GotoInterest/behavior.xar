<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="2">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="59">
                        <Box name="BranchToggle" robot="" id="1" tooltip="Change direction at every input trigger - thread safe!&#x0A;*** ref box in: ./2_wip/BranchTools.xar ***&#x0A;*** last modification date(git):   Wed Nov 25 14:23:14 2009 +0100 ***" bitmap_expanded="1" plugin="" x="105" y="364">
                            <bitmap>media/images/box/icons_appu/aiguillage.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import mutex
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();

    def onLoad(self):
        #~ puts code for box initialization here
        self.bFlipFlop = False;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.bFlipFlop ):
            self.output_2();
        else:
            self.output_1();
        pass

    def onInput_onChangeDirection(self):
        while( self.mutex.testandset() == False ):
            time.sleep( 0.001 );
        self.bFlipFlop = not self.bFlipFlop;
        self.mutex.unlock();]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onChangeDirection" type="1" type_size="1" nature="1" inner="0" tooltip="Change the direction of the branch, it begins at output_1, then toggle to output_2, then to output_1 ..." id="3" />
                            <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Text Edit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="149" y="981">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("sympathique, mais comment connaitre la hauteur d'un objet?")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>sympathique, mais comment connaitre la hauteur d&apos;un objet?</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                        </Box>
                        <Box name="TellColor" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="292" y="305">
                            <bitmap>media/images/box/appu/findcolor.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ocv = ALProxy("usageopencv")
        
    def onLoad(self):
        self.bMustQuit = False
        self.bRunning = False
        self.nX = 320;
        self.nY = 240;
        

    def onUnload(self):
        self.onInput_onStop()

    def onInput_onStart(self):
        if self.bRunning:
            return;
        self.bRunning = True

        res = self.getParameter("resolution")
        if res == "Big":
            self.ocv.start( 2 );
            self.nX = 640;
            self.nY = 480;
        elif res =="Medium":
            self.ocv.start( 1 );
            self.nX = 320;
            self.nY = 240;                
        else:
            self.ocv.start( 0 );
            self.nX = 160;
            self.nY = 120;
                
            
        factor = self.getParameter("area factor")
        satThreshold = self.getParameter("saturation threshold")
        count = self.getParameter("number of interest")
        
        while not self.bMustQuit:
            self.ocv.update()
            points = self.ocv.findInterest(satThreshold, count, factor)
            if points != None:
                nNum = 0;
                # find max saturation purity: when many colors, the first found is not forcedly always the same => avoir une taille de la zone, et les sortir dans l'ordre de la plus grande a la plus petite, car la meme si on centre, on commence par nous ressortir celle dans un angle (en haut a droite, et donc on a une variation, beurk)
                infoMaxSat = [];
                rMaxSat = -1.;
                for p in points:
                    self.log(str(p))
                    hue = self.ocv.findColor(p, factor)
                    hsv = [hue, 255, 255]
                    colorInfo = altools.getColorNameFromHSV(hsv, 1)
                    self.log("%d: hue : %d, %s at %s" % ( nNum, hue, str(colorInfo), str( p ) ))                    
                    nNum += 1;                    
                    if( colorInfo[1] > rMaxSat ):
                        rMaxSat = colorInfo[1];
                        infoMaxSat = [ (self.nX/2-p[0])/self.nX, (p[1]-self.nY/2)/self.nY, 0.8, 0.8, 1., colorInfo[0] ];
#                    break;
                self.output_position( infoMaxSat );
            self.ocv.showImage()
            
        self.ocv.quit()
        self.bMustQuit = False
        self.bRunning = False

    def onInput_onStop(self):
        self.bMustQuit = True]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output_position" type="0" type_size="1" nature="2" inner="0" tooltip="Output first colorised area:&#x0A;[x,y,sizeX, sizeY, strColor]" id="5" />
                            <Parameter name="saturation threshold" inherits_from_parent="0" content_type="1" value="105" default_value="180" min="0" max="255" tooltip="ca marche bien avec 102" id="6" />
                            <Parameter name="area factor" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.15" min="0" max="1" tooltip="" id="7" />
                            <Parameter name="number of interest" inherits_from_parent="0" content_type="1" value="3" default_value="1" min="0" max="10" tooltip="" id="8" />
                            <Parameter name="resolution" inherits_from_parent="0" content_type="3" value="Medium" default_value="Small" custom_choice="0" tooltip="" id="9">
                                <Choice value="Big" />
                                <Choice value="Medium" />
                                <Choice value="Small" />
                            </Parameter>
                        </Box>
                        <Box name="ExtractInfo_p modified_ouput" robot="" id="4" tooltip="Detect various info (luminosity, darkness, flash, average color)" bitmap_expanded="1" plugin="" x="293" y="433">
                            <bitmap>media/images/box/icons_appu/luminosity.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.extractor = ALProxy("UsageVisionInfo");
        self.strALMemoryValRoot =  "extractors/UsageVisionInfo/";
        self.astrALMemoryVal = [ "luminosity", "blackout", "flash", "average_rgb", "move" ];
            
    def onLoad(self):
        self.bIsRunning = False;
        self.bDebugMode = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self ):
        rPeriod = self.getParameter( "refreshPeriodMs" );
        if( self.bIsRunning == False ):
            self.bIsRunning = True;
            self.extractor.subscribe(self.getName(),  rPeriod, 0.0 )
            self.extractor.setAutonomousPost_activate( True ); # activate auto post to the autonomous life variable
            # on a plus besoin de se registrer vu que c'est fait dans le module directement
            for val in self.astrALMemoryVal:
                strTotalName = self.strALMemoryValRoot + val;
                ALMemory.subscribeToMicroEvent(strTotalName, self.getName(), val, "myDataChanged") # set to "subscribeOnData" if you want to trigger output_NoMark after every analyses without mark
#                ALMemory.subscribeOnDataSetTimePolicy(strTotalName, self.getName(),rPeriod/2)
            self.log("%s detection: on" % self.boxName );
        
    def onInput_onStop(self):
        if(self.bIsRunning == True):
            self.bIsRunning = False    
            self.extractor.unsubscribe(self.getName())
            for val in self.astrALMemoryVal:
                strTotalName = self.strALMemoryValRoot + val;
                ALMemory.unsubscribeToMicroEvent(strTotalName, self.getName())
            self.log("%s detection: off" % self.boxName );
            self.onStopped();
            
    def onInput_onSetDebugMode(self ):
        self.bDebugMode = not self.bDebugMode;
        self.extractor.setDebugMode( self.bDebugMode );
      
    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s::myDataChanged: pDataName: %s, pValue: %s, pMessage: %s" % ( self.boxName, pDataName, pValue, pMessage ) );
        outputFunc = getattr( self, "output_" + pMessage );
        if( pMessage[0] == 'l' or pMessage[0] == 'a' or pMessage[0] == 'm' ):
            # output has params:
            if( pMessage[0] == 'm' ):
                outputFunc( [-pValue[0], pValue[1], 0.8, 0.8, pValue[2] / 30. ] ); # patch a la volée pour avoir un format cohérent avec les autres
            else:
                outputFunc( pValue );
        else:
            # no params
            outputFunc();
    # myDataChanged - end
    
pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onSetDebugMode" type="1" type_size="1" nature="1" inner="0" tooltip="Call me if you want to have the possibility to have many times the same mark. By default, once a mark is seen, there will be no triggering until another mark is seen." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="sdfqsdf" id="5" />
                            <Output name="output_luminosity" type="2" type_size="1" nature="2" inner="0" tooltip="output global luminosity [0...1.]" id="6" />
                            <Output name="output_blackout" type="1" type_size="1" nature="2" inner="0" tooltip="suddenly the darkness has fall." id="7" />
                            <Output name="output_flash" type="1" type_size="1" nature="2" inner="0" tooltip="suddenly the light has arrived (flash)." id="8" />
                            <Output name="output_average_rgb" type="2" type_size="3" nature="2" inner="0" tooltip="" id="9" />
                            <Output name="output_move" type="2" type_size="3" nature="2" inner="0" tooltip="output information about the most moving zone [posX, posY,moving value]" id="10" />
                            <Parameter name="refreshPeriodMs" inherits_from_parent="0" content_type="1" value="200" default_value="200" min="0" max="100000" tooltip="The refresh period of the extractor in milliseconds, eg: 500." id="11" />
                        </Box>
                        <Box name="DetectNaoMark - modif accept duplicated and specify period" robot="" id="5" tooltip="The Appu NaoMarkPython detection." bitmap_expanded="1" plugin="" x="296" y="581">
                            <bitmap>media/images/box/interaction/uramark.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ALMemory = ALProxy("ALMemory")
        self.ALMarkDetection = ALProxy("ALLandMarkDetection")
        self.ALLeds = ALProxy("ALLeds")
        self.period = self.getParameter( 'nPeriod' );
        self.strALMemoryVal =  "LandmarkDetected"
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        
    def onLoad(self):
        self.started = False
        self.bInDatachanged = False;
        self.bHasReallyUnsubscribe = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        if(self.started == False):
            self.started = True
            self.nNumLastDetected = -1;    
#            self.ALMarkDetection.subscribe(self.getName(), self.period , 0.0 )
#            time.sleep( ( 2.0 * self.period ) / 1000.0 ); # to avoid a backlash
            self.ALMemory.subscribeToEvent(self.strALMemoryVal, self.getName(), "myDataChanged")
#            self.ALMarkDetection.updatePeriod(self.getName(), self.period )
            self.ALMarkDetection.updatePeriod(self.getName() + self.strALMemoryVal, self.period ) # contrage du putain de bug
            self.bHasReallyUnsubscribe = False;
            self.bInDatachanged = False;
            #~ self.log("NaoMark detection: on");
        
    def onInput_onStop(self):
        if(self.started == True):
            self.started = False    
#            self.ALMarkDetection.unsubscribe(self.getName())
            self.ALMemory.unsubscribeToEvent(self.strALMemoryVal, self.getName())
            self.bHasReallyUnsubscribe = True;
            #~ self.log("NaoMark detection: off");
            self.onStopped()

    def myDataChanged(self, pDataName, pValue, pMessage):
        #~ self.log( self.boxName + ": " + str( pValue ) );
        if( self.bHasReallyUnsubscribe ):
            #~ self.log( self.boxName + ": we have unsubcribed, so we skip this value" );
            return;
        if( not self.bInDatachanged ):
            self.bInDatachanged = True;
            if( len( pValue ) > 0 ):
                anTimeStamp = pValue[0]; # an array of two ints
                nNbrDetected = len( pValue[1] );
                if( nNbrDetected > 0 ):
                    bFirst = True;
                    aListConstructed = [];
                    for mark in pValue[1]:
                        nNumMark = mark[1][0];                    
                        infoPos = mark[0];
                        nShape = infoPos[1]; # not filled at now
                        rPosX = infoPos[1];
                        rPosY = infoPos[2];
                        rSizeX = infoPos[3];
                        rSizeY = infoPos[4];
                        if( rSizeX > 0.02 ):
                            #~ self.log( "landmark detected: ** %3d ** pos(%5.2f,%5.2f), size(%5.2f x %5.2f) !" % ( nNumMark, rPosX, rPosY, rSizeX, rSizeY ) );
                            oneMark = [rPosX, rPosY, rSizeX, rSizeY,0.8,nNumMark];
                            self.output_OneMarkDetectedFull( oneMark );
                            if( nNumMark == 187 and rSizeX > 0.36 ):
                                self.output_pos_is_near();
                            aListConstructed.append( oneMark );
                            if( bFirst ):
                                 # show a visual return to the user (only first naomark)
                                bFirst = False;
                                self.ALLeds.fadeListRGB( "FaceLedsTop", [0x00FFFF,0x0], [0.1, 1.] );
                                
                    self.output_AllMarkDetectedFull( aListConstructed ); # output all info

                else:
                    self.log( self.boxName + ": should never happen" );            
            else:
                #~ self.log("no landmark detected" );
                self.output_NoMark();
    
            self.bInDatachanged = False;]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="sdfqsdf" id="4" />
                            <Output name="output_OneMarkDetectedFull" type="2" type_size="6" nature="2" inner="0" tooltip="for each mark found:&#x0A;[rPosX, rPosY, rSizeX, rSizeY, interest,nNumMark]" id="5" />
                            <Output name="output_AllMarkDetectedFull" type="0" type_size="1" nature="2" inner="0" tooltip="Ouput the full info about the detected mark - format: [[rPosX, rPosY, rSizeX, rSizeY, interest,nNumMark]], ... ]" id="6" />
                            <Output name="output_NoMark" type="1" type_size="1" nature="2" inner="0" tooltip="output_NoMark" id="7" />
                            <Output name="output_pos_is_near" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Parameter name="nPeriod" inherits_from_parent="0" content_type="1" value="400" default_value="1000" min="400" max="1000000000" tooltip="Period in ms" id="9" />
                        </Box>
                        <Box name="TrackPodMark" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="375" y="1055">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.lastColorSay = "";
        self.idMoveTask = -1;
        self.timeLast = time.time();

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if( len( p ) > 0 ):
            self.output_target_found();    
            rThreshold = 0.1;
            firstMark = p[0];
            nNumMark, rOffsetX, rOffsetY, rSizeX, rSizeY = firstMark;
            if( ( abs( rOffsetX ) > rThreshold or abs( rOffsetY ) > rThreshold )  ):
                if( self.idMoveTask != -1 ):
                    ALMotion.stop( self.idMoveTask );
                rYaw, rPitch = ALMotion.getAngles( "Head", True );
                self.idMoveTask = ALMotion.post.angleInterpolation( "Head", [ rYaw+rOffsetX*0.6, rPitch+rOffsetY*0.5 ], 1., True );
            if( rSizeX > 0.37 ):
                self.output_near();
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Take a mark info:&#x0A;[[nNumMark, rPosX, rPosY, rSizeX, rSizeY], ... ]" id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output_target_found" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="output_near" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Box name="TrackMove" robot="" id="8" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="376" y="944">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.lastColorSay = "";
        self.idMoveTask = -1;
        self.timeLast = time.time();

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.output_target_found();
        rThreshold = 0.1;
        rOffsetX, rOffsetY, rMovingValue = p;
        if( ( abs( rOffsetX ) > rThreshold or abs( rOffsetY ) > rThreshold ) and rMovingValue > 5 ):
            if( self.idMoveTask != -1 ):
                ALMotion.stop( self.idMoveTask );
            rYaw, rPitch = ALMotion.getAngles( "Head", True );
            self.idMoveTask = ALMotion.post.angleInterpolation( "Head", [ rYaw-rOffsetX*0.8, rPitch+rOffsetY*0.8 ], 1., True );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="2" type_size="3" nature="2" inner="0" tooltip="Take a colorised area:&#x0A;[color, x,y,]" id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output_target_found" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="TrackAndSayColor" robot="" id="7" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="376" y="842">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.lastColorSay = "";
        self.idMoveTask = -1;
        self.timeLast = time.time();

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.output_target_found();
        rThreshold = 0.1;
        strColor, rOffsetX, rOffsetY = p;
        if( abs( rOffsetX ) > rThreshold or abs( rOffsetY ) > rThreshold ):
            if( self.idMoveTask != -1 ):
                ALMotion.stop( self.idMoveTask );
            rYaw, rPitch = ALMotion.getAngles( "Head", True );
            self.idMoveTask = ALMotion.post.angleInterpolation( "Head", [ rYaw-rOffsetX*0.8, rPitch+rOffsetY*0.8 ], 1., True );
        else:
            if( self.lastColorSay != strColor and time.time() - self.timeLast > 15. ):
                self.timeLast = time.time();            
                self.lastColorSay = strColor;
                strText = altools.generateQuestionAboutThings(strColor);                
                altools.sayAndCache( strText );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Take a colorised area:&#x0A;[color, x,y,]" id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output_target_found" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="GotoInterest" robot="" id="9" tooltip="A small state machine, the most simple and efficient. Developped by the Applications and Usage Team At Aldebaran.&#x0A;*** ref box in: ./4_localize/Templates/TemplateStateMachine/ExampleTemplateStateMachine.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="589" y="146">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.onUnload() #~ call onUnload of this box
        pass
        
    def onInput_onInterestTargerFound( self, p ):
        self.log( "%s: %s" % ( self.boxName, str( p ) ) );]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onInterestTargerFound" type="0" type_size="1" nature="1" inner="0" tooltip="receive interest target found:&#x0A;[posX,posY, sizeX, sizeY, ratioInterest, extra info1, ... ]&#x0A;&#x0A;pos: en position centrée -0.5,0.5&#x0A;size: en taille caméra [0.,1.]&#x0A;le ratioInterest est une info d&apos;interet entre 0 et 1." id="3" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Init" index="1" bitmap="">
                                        <Diagram scale="88">
                                            <Box name="SelectCam" robot="" id="1" tooltip="Change the currently used camera." bitmap_expanded="1" plugin="" x="108" y="150">
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );    
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="use the camera at the top of the head (forehead)" id="2" />
                                                <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)" id="3" />
                                                <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                            </Box>
                                            <Box name="Stiffness" robot="" id="2" tooltip="onStart : set stiffness to 1&#x0A;onStop : set stiffness to 0&#x0A;&#x0A;Last 1 second in both cases." bitmap_expanded="1" plugin="" x="109" y="42">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass
        
    def setStiffness(self, stiffness):
        duration = self.getParameter("duration")
        if(self.getParameter("head")):
            ALMotion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("left arm")):
            ALMotion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("right arm")):
            ALMotion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("left leg")):
            ALMotion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("right leg")):
            ALMotion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)

    def onInput_onStart(self):
        self.setStiffness(self.getParameter("max_stiffness"))
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.setStiffness(self.getParameter("min_stiffness"))
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="min_stiffness" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="1" tooltip="What stiffness do we want to set when stopping this box." id="5" />
                                                <Parameter name="max_stiffness" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1" tooltip="What stiffness do we want to set when starting this box." id="6" />
                                                <Parameter name="duration" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to we leave the robot to go to the correct stiffness. (in seconds)" id="7" />
                                                <Parameter name="head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness ?" id="8" />
                                                <Parameter name="left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness ?" id="9" />
                                                <Parameter name="right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness ?" id="10" />
                                                <Parameter name="left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness ?" id="11" />
                                                <Parameter name="right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness ?" id="12" />
                                            </Box>
                                            <Box name="SoftHead" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="255" y="46">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        time.sleep( 0.2 );    
        ALMotion.setStiffnesses( "Head", [0.1,0.3], 0.1 );          # le pitch nécéssite plus de patates
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="LookFor" robot="" id="4" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="387" y="73">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="LookFor" index="20" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="Wait" robot="" id="1" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="179" y="200">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="WalkToTarget" robot="" id="2" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="186" y="365">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="WalkToLookFor" robot="" id="4" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="336" y="202">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="LookAround" robot="" id="5" tooltip="Look around to find object in front and side of nao.&#x0A;v1.0" bitmap_expanded="1" plugin="" x="178" y="40">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# LookAround
# v1.0
import math
import time

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;    
        self.nMotionTaskID = -1;
        
    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def increasingCircle( self ):
        "increasing circle around current head position"
        rAngle = 0;
        rDist = 0.01;
        rDistMax = 0.7;
        rAngleInc = 0.1;
        rDistInc = 0.005;
        rStartYaw = ALMotion.getAngles( "HeadYaw", True )[0];
        rStartPitch = ALMotion.getAngles( "HeadPitch", True )[0];
        listYaw = [];
        listPitch = [];
        listTime = [];
        rCurrentTime = 0.2;
        while( not self.bMustStop and rDist < rDistMax ):
            rAngle += rAngleInc;
            rDist += rDistInc;
            listYaw.append( rStartYaw + ( rDist * math.cos( rAngle ) ) );
            listPitch.append( rStartPitch + ( rDist * math.sin( rAngle ) ) );            
            listTime.append( rCurrentTime );
            rCurrentTime += rDist; # time is larger when dist is longer
        # while - end
#        self.log( str( listYaw ) );
#        self.log( str( listPitch ) );        
        self.nMotionTaskID = ALMotion.post.angleInterpolation( "Head", [listYaw,listPitch], [listTime,listTime], True );
        ALMotion.wait( self.nMotionTaskID, 30*1000 );
        
    # increasingCircle - end
    
    def zigzag( self ):
        "zigzag from center"
        rYawAmpli = 0.9;
        rYawInc = rYawAmpli/8;        # we define a small steps so, we can interrupt the movement precisely
        rYaw = 0;
        rPitchAmpli = 0.5;
        rPitchInc = rPitchAmpli/37;        # we put a value not multiple of rYawInc
        rPitch = 0;
        listYaw = [];
        listPitch = [];
        nCpt = 0;
        listTime = [];
        rCurrentTime = 0.3;
        ALMotion.post.angleInterpolationWithSpeed( "Head", [0.,0.], 0.1 );
        while( not self.bMustStop and nCpt < 1000 ):
            rYaw += rYawInc;
            if( rYaw > rYawAmpli or rYaw < -rYawAmpli ):
                rYawInc *= -1;
            rPitch += rPitchInc;
            if( rPitch > rPitchAmpli or rPitch < -rPitchAmpli ):
                rPitchInc *= -1;
                
            listYaw.append( rYaw );
            listPitch.append( rPitch );
            listTime.append( rCurrentTime );
            rCurrentTime += 0.3;
            
            nCpt += 1;
        # while - end
        
        self.nMotionTaskID = ALMotion.post.angleInterpolation( "Head", [listYaw,listPitch], [listTime,listTime], True );
        ALMotion.wait( self.nMotionTaskID, 30*1000 );
    # zigzag - end
    

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            print( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        self.increasingCircle();
        self.zigzag();

        self.bIsRunning = False;
        self.onStopped();
        print( self.boxName + ": start - end" );    

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nMotionTaskID != -1 ):
            ALMotion.stop( self.nMotionTaskID );
            self.nMotionTaskID = -1;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="WalkToLookFor" index="40" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="RazDown" robot="" id="1" tooltip="reset head to the center" bitmap_expanded="1" plugin="" x="225" y="42">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        ALMotion.angleInterpolationWithSpeed( ["HeadYaw", "HeadPitch"], [0.0,+0.25], 0.04 );
        self.onStopped();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="LookFor" robot="" id="2" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="524" y="158">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="WalkToTarget" robot="" id="4" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="115" y="262">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="Turn" robot="" id="3" tooltip="This Box is for make NAO walk to a point relative to his current location &#x0A;&#x0A;Box Extra Parameter the new position:&#x0A;X for front/rear motion (metre)&#x0A;Y for lateral motion (meter)&#x0A;Theta for rotation (radian)&#x0A;&#x0A;Note:&#x0A;Default is walk straight 20cm" bitmap_expanded="1" plugin="" x="364" y="41">
                                                <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onStart(self):
#        ALMotion.walkTo( 0., 0., 6.28/4 );
        ALMotion.setWalkTargetVelocity( 0., 0., 0.3, 0.2 );
        time.sleep( 3.0 );
        self.onInput_onStop();
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        ALMotion.setWalkTargetVelocity(0.0, 0.0, 0.0, 0.0)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Standing" robot="" id="13" tooltip="# NaoLibrary-Launcher&#x0A;#  v 0.92&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal input and output params." bitmap_expanded="1" plugin="" x="79" y="22">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# NaoLibrary-Launcher
#  v 0.92
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, params):
        strBeName = self.getParameter( 'strBehaviorName' ); # override information
        if( strBeName == "" ):
            strBeName = self.boxName;

        self.log( "%s: behavior name: '%s'" % (self.boxName, naolibrary.getLibraryName( strBeName ) ) );
        self.onInput_onStartWithSpecificBehavior( strBeName, params );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName, params ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        
        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );            
        
        if( self.getParameter( 'bForceParamsToArray' ) and not altools.isArray( params ) and params != None ): # choice needs an array!
            params = eval( params ); # try to convert from a string
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), params );
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.onStopped();

    def onInput_onStop(self):
        strBeName = self.strBehaviorName;
        self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
        naolibrary.xarLoader.stop( self.strBehaviorName );
        self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="6" />
                                                <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="7" />
                                                <Parameter name="strBehaviorName" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                <Parameter name="bForceParamsToArray" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Force parameters to be evaluated as array (if not already an array)" id="9" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="WalkToTarget" index="60" bitmap="">
                                        <Diagram scale="79">
                                            <Box name="TrackMove" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="139" y="433">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.lastColorSay = "";
        self.idMoveTask = -1;
        self.timeLast = time.time();

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.output_target_found();
        rThreshold = 0.05;
        
        rOffsetX = p[0];
        rOffsetY = p[1];
        sizeX = p[2];
        sizeY = p[3];
        rRatioInterest = p[4];

        if( ( abs( rOffsetX ) > rThreshold or abs( rOffsetY ) > rThreshold ) and rRatioInterest > 0.2 ):
            if( self.idMoveTask != -1 ):
                ALMotion.stop( self.idMoveTask );
            rYaw, rPitch = ALMotion.getAngles( "Head", True );
            self.idMoveTask = ALMotion.post.angleInterpolation( "Head", [ rYaw+rOffsetX*0.8, rPitch+rOffsetY*0.8 ], 1., True );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="6" nature="2" inner="0" tooltip="Take an cibject&#x0A;[posX,posY, sizeX, sizeY, ratioInterest, extra info1, ... ]" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_target_found" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="DetectObstacles" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="362" y="122">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_obstacles" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="bEnableSound" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Make sound related to detected obstacles." id="6" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="DetectObstaclesUS_ref" robot="" id="1" tooltip="Detect objectacles near using ultrasound" bitmap_expanded="1" plugin="" x="102" y="105">
                                                                    <bitmap>media/images/box/sensors/ultrasound.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Behavior is finished" id="4" />
                                                                    <Output name="output_obstacles" type="2" type_size="2" nature="2" inner="0" tooltip="No obstacle." id="5" />
                                                                    <Output name="output_nothing" type="1" type_size="1" nature="2" inner="0" tooltip="onNothingRight" id="6" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Just Here to launch the extractors" robot="" id="1" tooltip="activates ALUltrasound extractor. Selects the right output. You can change the parameters in the script: - @period: period of acquisition of ultrasound devices. (in miliseconds) - @threshold_nothing: if both distances are more than this value, nothing will be activated. (in meters) - @threshold_obstacle: threshold for the detection of an obstacle. if one or both distances are below this value, an obstacle will be detected. The relevant output will be activated. (in meters)" bitmap_expanded="1" plugin="" x="88" y="201">
                                                                                        <bitmap>media/images/box/sensors/ultrasound.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Input name="SonarNothingDetected" type="0" type_size="1" nature="4" stm_value_name="SonarNothingDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Input name="SonarLeftDetected" type="0" type_size="1" nature="4" stm_value_name="SonarLeftDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                                        <Input name="SonarRightDetected" type="0" type_size="1" nature="4" stm_value_name="SonarRightDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                                                        <Input name="SonarLeftNothingDetected" type="0" type_size="1" nature="4" stm_value_name="SonarLeftNothingDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="7" />
                                                                                        <Input name="SonarRightNothingDetected" type="0" type_size="1" nature="4" stm_value_name="SonarRightNothingDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="8" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Behavior is finished" id="9" />
                                                                                        <Output name="nothingLeft" type="1" type_size="1" nature="2" inner="0" tooltip="nothingLeft" id="10" />
                                                                                        <Output name="left" type="2" type_size="1" nature="2" inner="0" tooltip="" id="11" />
                                                                                        <Output name="right" type="2" type_size="1" nature="2" inner="0" tooltip="" id="12" />
                                                                                        <Output name="nothingRight" type="1" type_size="1" nature="2" inner="0" tooltip="nothingLeft" id="13" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Link inputowner="0" indexofinput="11" outputowner="0" indexofoutput="5" />
                                                                                                        <Link inputowner="0" indexofinput="12" outputowner="0" indexofoutput="6" />
                                                                                                        <Link inputowner="0" indexofinput="10" outputowner="0" indexofoutput="7" />
                                                                                                        <Link inputowner="0" indexofinput="13" outputowner="0" indexofoutput="8" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="DetectObstacleUS_Loop" robot="" id="2" tooltip="detect les obstacles mais attention l&apos;extraceur n&apos;est pas lancé par cette boite (d&apos;ou la boite connexe)" bitmap_expanded="1" plugin="" x="144" y="38">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# DetectObstacleUS
# v0.81
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.rDistPrevL = 1.;
        self.rDistPrevR = 1.;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        rThreshold = self.getParameter( 'rThreshold' );        
        strTemplate = 'Device/SubDeviceList/US/%s/Sensor/Value';
        aListVarUS = [ strTemplate % 'Left', strTemplate % 'Right' ];
        ALMemory.subscribeToMicroEvent( 'SonarMiddleDetected', self.getName(), "", "myDataChanged" ); # just to launch the sonar extractor (but it doesn't work !!!)
        # we post a big value, so when Ultrasound doesn't work, they stop triggering...
        ALMemory.insertData( strTemplate % 'Left', 2.55 );
        ALMemory.insertData( strTemplate % 'Right', 2.55 );
        bFuckedUS = False;
        while( not self.bMustStop ):
            rDistL, rDistR = ALMemory.getListData( aListVarUS );
            self.rDistPrevL = ( self.rDistPrevL + rDistL ) / 2.;
            self.rDistPrevR = ( self.rDistPrevR + rDistR ) / 2.;
            self.log( "%s: %5.2f, %5.2f => %5.2f, %5.2f" % ( self.boxName, rDistL, rDistR, self.rDistPrevL, self.rDistPrevR ) );
            if( self.rDistPrevL < rThreshold or self.rDistPrevR < rThreshold ): # or ou and, it depends if you want fake positif or false negative...
                if( self.getParameter( 'bEnableSound' ) ):
                    altools.playSound( 'bipReco2.wav', bWait = False, bDirectPlay = True );
                self.output_obstacles( [ self.rDistPrevL, self.rDistPrevR ] );
            else:
                self.output_nothing();
            if( self.rDistPrevL > 2.5499 and self.rDistPrevR > 2.5499 and not bFuckedUS ):
                bFuckedUS = True;
                self.output_us_is_fucked();
            time.sleep( rPeriod );
        # end while
        ALMemory.unsubscribeToMicroEvent( 'SonarNothingDetected', self.getName() );        
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def myDataChanged(self, pDataName, pValue, pMessage):
        self.log( "%s: %s: %s" % ( self.boxName, pDataName, str( pValue ) ) );
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_obstacles" type="2" type_size="2" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_nothing" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output_us_is_fucked" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="100000" tooltip="period in seconds" id="8" />
                                                                                        <Parameter name="rThreshold" inherits_from_parent="0" content_type="2" value="0.31" default_value="0.4" min="0" max="3" tooltip="obstacles detection threshold in meters" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Enter name here" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="280" y="175">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Warning: my Sonar doesn't work!"
		sFrench = "Attention: mes sonars ne marchent pas!"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <english>Warning: my Sonar doesn&apos;t work!</english>
                                                                                            <french>Attention: mes sonars ne marchent pas!</french>
                                                                                            <spanish></spanish>
                                                                                            <italian></italian>
                                                                                            <german></german>
                                                                                            <chinese></chinese>
                                                                                            <polish></polish>
                                                                                            <korean></korean>
                                                                                            <language>1</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="SayTextPrerender_p" robot="" id="4" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.02" bitmap_expanded="1" plugin="" x="542" y="175">
                                                                                        <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# SayTextPrerender - v1.02
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        self.nStep = self.nStateInit;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
#        txt = "\\RSPD=85\\ " + altools.transformAsciiAccentForSynthesis( p ); # not usefull now!
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        if( not self.getParameter( 'bJustPrepare' ) ):
            self.nStep = self.nStateSpeaking;
            self.output_onStartSpeaking();
            if( self.getParameter( "bWithLight" ) ):
                altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
            else:
                altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.nStep = self.nStateStopped;
        self.output_onStopSpeaking();
        
    def onInput_onStop(self):
        while( self.nStep == self.nStatePreparing ): # can't kill while preparing
            time.sleep( 0.2 );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                                        <Output name="output_onStartSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak" id="5" />
                                                                                        <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking" id="6" />
                                                                                        <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="use light in eyes to speak" id="7" />
                                                                                        <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="8" />
                                                                                        <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="9" />
                                                                                        <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="10" />
                                                                                    </Box>
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="7" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="DetectArmsObstacles" robot="" id="2" tooltip="Test de detection des bras qui touchent des obstacles pendant qu&apos;on marchent" bitmap_expanded="1" plugin="" x="103" y="4">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.aJointMove = [ 
                                    altools.JointMove( "LShoulderRoll" ), altools.JointMove( "RShoulderRoll" ),
                                    altools.JointMove( "LElbowRoll" ), altools.JointMove( "RElbowRoll" )                                     
                                    ];

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        ALMotion.setStiffnesses( ["LShoulderRoll", "RShoulderRoll"], 0.12, 0.05 );
#        ALMotion.setStiffnesses( [ "LShoulderPitch", "RShoulderPitch" ], 0.05, 0.05 );
        ALMotion.setStiffnesses( [ "LElbowRoll", "RElbowRoll" ], 0.04, 0.05 );        

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        nNbrJoint = len( self.aJointMove );
        nNbrOutput = 2; # we concatene side by side
        abTouch = altools.arrayCreate( nNbrOutput, False );
        while( not self.bMustStop ):
            bTouch = False;
            for i in range( nNbrJoint ):
                if( self.aJointMove[i].update() != 0 ):
                    abTouch[i%2] = True;
                    bTouch = True;                    
                else:
                    if( i < 2 ):
                        abTouch[i%2] = False;
                    else:
                        abTouch[i%2] |= False;                    
            if( bTouch ):
                if( self.getParameter( 'bEnableSound' ) ):
                    altools.playSound( 'bipReco8.wav', bWait = False, bDirectPlay = True );                    
                self.output_touched( abTouch );
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_touched" type="2" type_size="2" nature="2" inner="0" tooltip="Some arms has touched something [left touched, right touched]" id="5" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.14" default_value="1" min="0" max="1e+06" tooltip="period in seconds" id="6" />
                                                                </Box>
                                                                <Box name="Bumper" robot="" id="3" tooltip="Listens to bumpers sensors. Stimulate left or right output depending on what bumper has been stimulated." bitmap_expanded="1" plugin="" x="105" y="226">
                                                                    <bitmap>media/images/box/movement/move_foot.png</bitmap>
                                                                    <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):       
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        self.onStopped()
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                    <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
                                                                    <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="left" robot="" id="1" tooltip="check that signal is &gt; 0" bitmap_expanded="1" plugin="" x="178" y="50">
                                                                                        <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #puts code for box cleanup here
        self.Lbumper = ALMemory.getData("LeftBumperPressed", 0)

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onLeft(self, p):
        self.Lbumper = p
        if(self.Lbumper > 0):
            if( self.getParameter( 'bEnableSound' ) ):
                altools.playSound( 'bipReco9.wav', bWait = False, bDirectPlay = True );        
            self.onBumperPressed()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onLeft" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onBumperPressed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="right" robot="" id="2" tooltip="check that signal is &gt; 0" bitmap_expanded="1" plugin="" x="178" y="156">
                                                                                        <bitmap>media/images/box/movement/move_foot.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #puts code for box cleanup here
        self.Rbumper = ALMemory.getData("RightBumperPressed", 0)

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onRight(self, p):
        self.Rbumper = p
        if(self.Rbumper > 0):
            if( self.getParameter( 'bEnableSound' ) ):
                altools.playSound( 'bipReco9.wav', bWait = False, bDirectPlay = True );
            self.onBumperPressed()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onRight" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onBumperPressed" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="7" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="8" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Raz_head" robot="" id="3" tooltip="Fait revenir la tete petit a petit au centre" bitmap_expanded="1" plugin="" x="434" y="459">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.idMoveTask = -1;
        self.timeLastMoveOrderReceived = time.time();
        
    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        rStep = 0.10;

        while( not self.bMustStop ):
            if( time.time() - self.timeLastMoveOrderReceived > 2.0 ):
                # la tete n'a pas recu d'ordre, on revient petit a petit au centre
                if( self.idMoveTask != -1 ):
                    ALMotion.stop( self.idMoveTask );
                rYaw, rPitch = ALMotion.getAngles( "Head", True );
#                self.log( "rYaw: %f, rPitch: %f " % (rYaw, rPitch) );
                if( abs( rYaw ) > rStep or abs( rPitch ) > rStep ):
                    self.log( "%s: time: %s - sending something!" % (self.boxName, time.time() ) );
                    rSpeedSec = 5.;
                    self.idMoveTask = ALMotion.post.angleInterpolation( "Head", [ 0.,0. ], rSpeedSec, True );
                    ALMotion.wait( self.idMoveTask, int( rSpeedSec*1000 ) );

            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_onHeadReceivedTrackingOrder( self ):
        self.timeLastMoveOrderReceived = time.time();
        if( self.idMoveTask != -1 ):
            ALMotion.stop( self.idMoveTask );
            self.idMoveTask = -1;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onHeadReceivedTrackingOrder" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="100000" tooltip="period in seconds" id="6" />
                                            </Box>
                                            <Box name="Wait" robot="" id="4" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="469" y="251">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="8" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="WalkWhereLooking" robot="" id="5" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;*** ref box in: ./4_localize/Templates/TemplateWhile/ExampleTemplateWhile.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="511" y="24">
                                                <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.bBlocked = False;
        self.rX = 0.;
        self.rY = 0.;
        self.rT = 0.;
        self.rStep = 1.;
        self.rPrevX, self.rPrevY, self.rPrevT, self.rPrevStep = [ 0., 0., 0., 0. ];
        self.nCptBlocked = 0;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        rPrevYaw , rPrevPitch = -15.,-15.;
        rThresholdNewHeadPos = 0.02;
        rThresholdZero = 0.05;
        nCptReculMax = 20;
        nCptRecul = 0;
        while( not self.bMustStop ):
            rYaw, rPitch = ALMotion.getAngles( "Head", True );
            if( self.rX < -0.05 and nCptRecul < nCptReculMax ):
                self.log( "nCptRecul: %d" % nCptRecul );
                nCptRecul += 1;
                if( nCptRecul > nCptReculMax ):
                    self.rX = 0.;
                    
            if( abs( rPrevYaw - rYaw ) > rThresholdNewHeadPos or abs( rPrevPitch - rPitch ) > rThresholdNewHeadPos ):
                self.rT = rYaw/3.;
                # peur si haut, avance si bas, c'est chouette, mais ca finis toujours par faire tomber nao car il recule sans arret!
                if( not self.getParameter("bIsPod") ): # gestion objet aléatoire
                    if( rPitch < -0.2 and nCptRecul < nCptReculMax ):
                        self.rX = ( rPitch + 0.2 ) * 3; # recul si trop haut
                    elif( rPitch > 0. and rPitch < 0.45 and not self.bBlocked ):
                        nCptRecul = 0;
                        self.rX = ( 0.45 - rPitch ) * 4.; # se rapproche si loin
                    else:
                        self.rX = 0.;
                else: # version chargeur
                        if( rPitch > 0.1  and not self.bBlocked ):
                            self.rX = ( 0.8 - rPitch ) * 4.; # plus c'est haut, plus il va vite
                        else:
                            self.rX = 0.;
                self.rX = altools.limitRange( self.rX, -1., 1. );
                
                if( abs( self.rX ) < 0.05 and abs( self.rT ) < 0.1 ):
                    self.rT = 0.; # ne tourne pas sur lui meme, si on est assez proche, et qu'on regarde a peu prés dans la bonne direction
                if( self.rX < -0.05 ):
                    self.bBlocked = False;
                    
                self.rStep = 2 * max( abs( self.rX ), abs( self.rT ) );
                self.rStep = altools.limitRange( self.rStep, 0.2, 1. );
                
                if( abs( self.rX ) < rThresholdZero ):
                    self.rX = 0.;
                if( abs( self.rY ) < rThresholdZero ):
                    self.rY = 0.;
                if( abs( self.rT ) < rThresholdZero ):
                    self.rT = 0.;
                if( abs( self.rStep ) < rThresholdZero ):
                    self.rStep = 0.;
                rPrevYaw, rPrevPitch = rYaw, rPitch;

            if( ( self.rX, self.rY, self.rT, self.rStep ) != ( self.rPrevX, self.rPrevY, self.rPrevT, self.rPrevStep ) ):
                self.log( "rYaw: %5.2f, rPitch: %5.2f, params: %5.2f, %5.2f, %5.2f, %5.2f (bBlocked: %d, nCptRecul: %d)" % ( rYaw, rPitch, self.rX, self.rY, self.rT, self.rStep, self.bBlocked, nCptRecul ) );
                
                self.rPrevX, self.rPrevY, self.rPrevT, self.rPrevStep = [ self.rX, self.rY, self.rT, self.rStep ];
            
                ALMotion.setWalkTargetVelocity(self.rX, self.rY, self.rT, self.rStep);
            
            if( self.bBlocked ):
                self.nCptBlocked += 1;
                if( self.nCptBlocked > 30 ):
                    self.nCptBlocked = 0;
                    self.bBlocked = False;
                
            time.sleep( rPeriod );

        # end while
        self.bIsRunning = False;
        ALMotion.setWalkTargetVelocity(0., 0., 0., 0.);
        # to ensure the walk is really stopped:        
        time.sleep( 0.5 );
        ALMotion.setWalkTargetVelocity(0., 0., 0., 0. );
        self.onStopped() #~ activate output of the box
                
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_onObstaclesFound( self ):
        self.bBlocked = True;
        self.nCptBlocked = 0;
        self.rX = 0;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onObstaclesFound" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="100000" tooltip="period in seconds" id="6" />
                                                <Parameter name="bUseBumpers" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="do we test bumpers before avancing ?" id="7" />
                                                <Parameter name="bIsPod" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="is the object to walk to is the pod (so we know its height)" id="8" />
                                            </Box>
                                            <Box name="LookFor" robot="" id="8" tooltip="Jump to the frame in the name of this box&#x0A;&#x0A;v1.0" bitmap_expanded="1" plugin="" x="664" y="261">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# GotoAndStop
# v1.0 
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        strFrameName = self.boxName;
        self.log( "jumping to frame '%s'" % ( strFrameName ) );
        self.gotoAndStopParent(strFrameName)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="Standing" robot="" id="13" tooltip="# NaoLibrary-Launcher&#x0A;#  v 0.92&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal input and output params." bitmap_expanded="1" plugin="" x="198" y="18">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# NaoLibrary-Launcher
#  v 0.92
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, params):
        strBeName = self.getParameter( 'strBehaviorName' ); # override information
        if( strBeName == "" ):
            strBeName = self.boxName;

        self.log( "%s: behavior name: '%s'" % (self.boxName, naolibrary.getLibraryName( strBeName ) ) );
        self.onInput_onStartWithSpecificBehavior( strBeName, params );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName, params ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        
        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );            
        
        if( self.getParameter( 'bForceParamsToArray' ) and not altools.isArray( params ) and params != None ): # choice needs an array!
            params = eval( params ); # try to convert from a string
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), params );
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.onStopped();

    def onInput_onStop(self):
        strBeName = self.strBehaviorName;
        self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
        naolibrary.xarLoader.stop( self.strBehaviorName );
        self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="6" />
                                                <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="7" />
                                                <Parameter name="strBehaviorName" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                                                <Parameter name="bForceParamsToArray" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Force parameters to be evaluated as array (if not already an array)" id="9" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="4" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="3" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="2" outputowner="13" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="FollowTarget_ref" robot="" id="10" tooltip="Follow some target" bitmap_expanded="1" plugin="" x="618" y="997">
                            <bitmap>media/images/box/movement/walk_arc.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.log( "%s: unloading" % self.boxName );
        self.onInput_onStop();
        pass

    def onInput_onStart(self, p):
        # passage de parametre dans la mémoire globale
        self.log( "%s: started " % self.boxName );        
        altools.storeGlobalData( "FollowTarget_end_params", p );
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.log( "%s: stopped " % self.boxName );        
        self.gotoAndStop(100);

    def onInput_onTargetPosAndSize(self, p):
        pass

    def onInput_onTargetNotFound(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="2" type_size="4" nature="2" inner="0" tooltip="Params is the stop params in absolute value [head pitch max (bottom), head pitch min (top), sizeX min, sizeY min]&#x0A;&#x0A;set to -100 or 100 if the params is not relevant.&#x0A;&#x0A;Exemple: stop when object sizeX &gt; 0.20&#x0A;[0.2, -0.6, 0.2, 100]" id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onTargetPosAndSize" type="2" type_size="4" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="onTargetNotFound" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Output name="output_targetFound" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="init" index="1" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="waitalittle for params to be received for detect end" robot="" id="1" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="55" y="47">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0.1)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>0.1</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="Wait" robot="" id="2" tooltip="The wait that can be stopped immediately and reset at any time. Stopping the box won&apos;t output a signal." bitmap_expanded="1" plugin="" x="196" y="47">
                                                <bitmap>media/images/box/icons_appu/chrono.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self, p):
    self.startTimer( float(p) );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time. Warning: don&apos;t outputted if stopped before time lapse." id="4" />
                                            </Box>
                                            <Box name="Lookfor" robot="" id="3" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="331" y="73">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(10)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>10</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="4" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="485" y="73">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    self.gotoAndStopParent(p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="lookfor" index="10" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="Wait" robot="" id="1" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="330" y="170">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="WalkTo" robot="" id="2" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="332" y="341">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(30)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>30</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="LookAround" robot="" id="3" tooltip="Look around to find object in front and side of nao.&#x0A;&#x0A;The goal of this box, is to be easyly and fastly stoppable at every moment, so we can stop when something is seen&#x0A;*** ref box in: ./2_wip/motion/HeadMovement.xar ***&#x0A;*** last modification date(svn): 2009-05-19 15:43:15 +0200 (mar, 19 mai 2009) ***" bitmap_expanded="1" plugin="" x="338" y="38">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import math
import time

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nIDMoveYaw = -1;
        self.nIDMovePitch = -1;

    def onLoad(self):
        self.nIDMoveYaw = -1;
        self.nIDMovePitch = -1;
        
    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def increasingCircle( self ):
        "increasing circle around current head position"
        rAngle = 0;
        rDist = 0.01;
        rDistMax = 0.7;
        rAngleInc = 0.1;
        rDistInc = 0.005;
        rStartYaw = ALMotion.getAngles( "HeadYaw", True )[0];
        rStartPitch = ALMotion.getAngles( "HeadPitch", True )[0];
        while( not self.bMustStop and rDist < rDistMax ):
            self.nIDMoveYaw = ALMotion.post.angleInterpolationWithSpeed( ["HeadYaw","HeadPitch"], [rStartYaw + ( rDist * math.cos( rAngle ) ), rStartPitch + ( rDist * math.sin( rAngle ) ) ], 0.04 );
            ALMotion.wait( self.nIDMoveYaw, 10*1000 );
            rAngle += rAngleInc;
            rDist += rDistInc;
            time.sleep( 0.18 );
        # while - end
        
    # increasingCircle - end
    
    def zigzag( self ):
        "zigzag from center"
        rYawAmpli = 0.5;
        rYawInc = rYawAmpli/8;        # we define a small steps so, we can interrupt the movement precisely
        rYaw = 0;
        rPitchAmpli = 0.5;
        rPitchInc = rPitchAmpli/37;        # we put a value not multiple of rYawInc
        rPitch = 0;
        while( not self.bMustStop ):
            self.log( "before, time: %f" % time.time() );
            self.nIDMoveYaw = ALMotion.post.angleInterpolationWithSpeed( "HeadYaw", rYaw, 0.04 );
            self.nIDMovePitch = ALMotion.post.angleInterpolationWithSpeed( "HeadPitch", rPitch, 0.04 );
            rYaw += rYawInc;
            if( rYaw > rYawAmpli or rYaw < -rYawAmpli ):
                rYawInc *= -1;
            rPitch += rPitchInc;
            if( rPitch > rPitchAmpli or rPitch < -rPitchAmpli ):
                rPitchInc *= -1;
            ALMotion.wait( self.nIDMoveYaw, 10*1000 );
            ALMotion.wait( self.nIDMovePitch, 10*1000 );
            self.log( "after, time: %f" % time.time() );
            time.sleep( 0.25 );
        # while - end
        
    # zigzag - end
    

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            print( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        self.increasingCircle();
        self.zigzag();

        self.bIsRunning = False;
        self.onStopped();
        print( self.boxName + ": start - end" );    

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nIDMoveYaw != -1 ):
            ALMotion.stop( self.nIDMoveYaw );
            self.nIDMoveYaw = -1;
        if( self.nIDMovePitch != -1 ):
            ALMotion.stop( self.nIDMovePitch );
            self.nIDMovePitch = -1;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="4" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="486" y="315">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    self.gotoAndStopParent(p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="NumberEdit" robot="" id="5" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="563" y="176">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(20)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>20</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="6" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="739" y="166">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    self.gotoAndStopParent(p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="movelookfor" index="20" bitmap="media/images/box/movement/walk_forward.png">
                                        <Diagram scale="100">
                                            <Box name="RazDown" robot="" id="1" tooltip="reset head to the center" bitmap_expanded="1" plugin="" x="266" y="3">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        ALMotion.post.angleInterpolationWithSpeed( ["HeadYaw", "HeadPitch"], [0.0,+0.25], 0.04 );
        self.onStopped();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="BranchOnlyOne_ref" robot="" id="2" tooltip="once triggered, the branch will stay open" bitmap_expanded="1" plugin="" x="330" y="368">
                                                <bitmap>media/images/box/icons_appu/aiguillage.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        #~ puts code for box initialization here
        self.bFlipFlop = False;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.bFlipFlop ):
            self.output_2();
        else:
            self.output_1();
        pass

    def onInput_onChangeDirection(self):
        self.bFlipFlop = True;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onChangeDirection" type="1" type_size="1" nature="1" inner="0" tooltip="Change the direction of the branch, it begins at output_1, then toggle to output_2, then to output_1 ..." id="3" />
                                                <Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="SlowTurnTT" robot="" id="3" tooltip="The robot will turn around itself." bitmap_expanded="1" plugin="" x="331" y="107">
                                                <bitmap>media/images/box/movement/turn_around.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="100">
                                                                <Box name="Angle" robot="" id="1" tooltip="Transmit an angle. The angle is converted to radians (according to NaoQi&apos;s unit system), and then sent through its output." bitmap_expanded="1" plugin="angleedit_plugin" x="110" y="49">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(0.698132)]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <angle>40</angle>
                                                                        <unit>0</unit>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Angle (in radians)" id="4" />
                                                                </Box>
                                                                <Box name="SlowTurnTT" robot="" id="2" tooltip="Turns the given angle (in radian) received on its input." bitmap_expanded="1" plugin="" x="187" y="261">
                                                                    <bitmap>media/images/box/movement/turn_around.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import mutex
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.mutex = mutex.mutex();
    
  def onUnload(self):
    #puts code for box cleanup here
    self.onInput_onStop()

  def onInput_onStart(self, p):
    if( self.mutex.testandset() == False ):
        self.log( self.boxName + ": already started => nothing" );
        return;
        
    if( ALMotion.walkIsActive() ):
        self.log( self.boxName + ": already walking => nothing" );
        self.mutex.unlock();
        return;
    self.log( "%s: turning..." % self.boxName );
    ALMotion.walkTo(0., 0., p) 
    ALMotion.waitUntilWalkIsFinished() #Blocking Function
    self.mutex.unlock();
    self.onStopped()

  def onInput_onStop(self):
    ALMotion.setWalkTargetVelocity(0.0, 0.0, 0.0, 0.0);]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="LookBottomUp_ref" robot="" id="4" tooltip="Look bottom up" bitmap_expanded="1" plugin="" x="472" y="9">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import math
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nIDMovePitch = -1;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def upAndDown( self ):
        "increasing up then decreasing"
        "zigzag from center"
        rPitchOffset = 0.25;    # center of movement        
        rPitchAmpli = 0.2;      # half amplitude of movement
        nSpeedPercent = 4;   #  speed of movement
        rPitchInc = 0.1;          # step - has no effect on speed (but has to be a multiple or smaller than pitchampli to be precise)
        rPitch = ALMotion.getAngle( "HeadPitch" );
        while( not self.bMustStop ):
            self.nIDMovePitch = ALMotion.post.gotoAngleWithSpeed( "HeadPitch", rPitch+rPitchOffset, nSpeedPercent, 0 );
            rPitch += rPitchInc;
            if( rPitch > rPitchAmpli or rPitch < -rPitchAmpli ):
                if( rPitch > rPitchAmpli ):
                    rPitch = rPitchAmpli;
                elif( rPitch < -rPitchAmpli ):
                    rPitch = -rPitchAmpli;
                rPitchInc *= -1;
#            self.log( "rPitch: %f, rPitchInc: %f, rPitchAmpli: %f" % ( rPitch, rPitchInc, rPitchAmpli ) );
            ALMotion.wait( self.nIDMovePitch, 10*1000 );
            time.sleep( 0.25 );
        # while - end
        
    # upAndDown - end
    

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            print( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        self.upAndDown();        

        self.bIsRunning = False;
        self.onStopped();
        print( self.boxName + ": start - end" );    

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nIDMovePitch != -1 ):
            ALMotion.stop( self.nIDMovePitch );
            self.nIDMovePitch = -1;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="TextEdit" robot="" id="5" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="488" y="152">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ATTENTION: il ne faut pas quitter cette frame pour aller jusqu'a celle ou on marche si on n'a pas fini le turn.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>ATTENTION: il ne faut pas quitter cette frame pour aller jusqu&apos;a celle ou on marche si on n&apos;a pas fini le turn.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WaitWalkIsFinished_ref" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="514" y="319">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        while( ALMotion.getRemainingFootStepCount() > 0 ):
            time.sleep( 0.05 );
        time.sleep( 0.25 ); # wait end step and double support
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WalkTo" robot="" id="7" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="645" y="319">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(30)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>30</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="8" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="809" y="319">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    self.gotoAndStopParent(p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="walkTo" index="30" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="NumberEdit" robot="" id="1" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="218" y="226">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(4)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>4</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WaitN_p" robot="" id="2" tooltip="Wait n triggering, then emit one signal" bitmap_expanded="1" plugin="" x="294" y="402">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nNbrToWait = 1;
        self.nNbrCount = 0;

    def onLoad(self):
        #~ puts code for box initialization here
        self.onInput_onReset();

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        self.nNbrToWait = p;

    def onInput_onStop(self):
        self.nNbrToWait = float( '+inf' ); # stop all future emission
        
    def onInput_onReceive(self):
        self.nNbrCount += 1;
        if( self.nNbrCount == self.nNbrToWait ):
            self.onEmit( self.nNbrToWait );


    def onInput_onReset(self):
        self.nNbrCount = 0;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onReceive" type="1" type_size="1" nature="1" inner="0" tooltip="receive one more event" id="4" />
                                                <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEmit" type="2" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                            </Box>
                                            <Box name="HeadTrackingSmooth_p - modified at 20% - modified take 4 and result to 2" robot="" id="3" tooltip="Move the head relatively to its current position, of an angle relative to the image size." bitmap_expanded="1" plugin="" x="398" y="13">
                                                <bitmap>media/images/box/interaction/face.png</bitmap>
                                                <bitmap>media/images/box/interaction/look.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.motion = ALMotion; # ALProxy("ALMotion");
        self.motion.setStiffnesses( "HeadYaw", 0.4 );
        self.motion.setStiffnesses( "HeadPitch", 0.4 );
        self.bInStart = False;

    def onUnload(self):
        pass

    def onInput_onStart(self, aPos ):
        if( not self.bInStart ):
            self.bInStart = True;
            nPercent = 20;
            rAngleYaw = self.motion.getAngles( "HeadYaw", True )[0];
            rAnglePitch = self.motion.getAngles( "HeadPitch", True )[0];
#            self.log( "time avant: %s" % str( time.time() ) );
            nId = self.motion.post.angleInterpolationWithSpeed( "HeadYaw", rAngleYaw + aPos[0] * 0.8, nPercent/100. );    # we should wait the longer time between the two of them, because the two length could be very different
            self.motion.angleInterpolationWithSpeed( "HeadPitch", rAnglePitch + aPos[1] * 0.6, nPercent/100. );
            self.motion.wait( nId, 10000 );
            time.sleep( 0.4 ); # wait than the movement is finished and we've take another picture before accepting another order (the delay should be related to the period of the extractor)
#            self.log( "time apres: %s" % str( time.time() ) );
            self.bInStart = False;            
        self.onStopped(aPos[2:]);]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="4" nature="2" inner="0" tooltip="Receive a MoveTo order" id="2" />
                                                <Output name="onStopped" type="2" type_size="4" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WalkToDirectionOfHead_TT_ref" robot="" id="4" tooltip="Walk to the direction pointed by the head - stop when object looked is too high or to low (we are perhaps arrived)" bitmap_expanded="1" plugin="" x="422" y="102">
                                                <bitmap>media/images/box/movement/walk_arc.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import mutex

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();        
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning or self.mutex.testandset() == False ):
            print( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        self.nSpeed = 35;
        self.rLenWalk = 0.1;
        self.rRadius = 1.0;
        self.rAngle = 3.14159 / 8;      
        self.rAngleTurn = (2 * 3.14159 ) / 16;
        self.rThreshold = 0.1;
        self.rThresholdTurn = 0.3;
        self.nLastCommand = -10;
        self.nStopContiguousTimes = 0;
        while( not self.bMustStop ):
            # insert some good and powerful code there
            self.log( "avance?");
            rAngleYaw = ALMotion.getAngles( "HeadYaw", True )[0];
            self.log( "rAngleYaw: %f" % rAngleYaw );
            if( rAngleYaw > self.rThresholdTurn ):
                self.log( "left turn");
                nCommand = -2;
            elif( rAngleYaw < -self.rThresholdTurn ):
                self.log( "right turn");                
                nCommand = 2;            
            elif( rAngleYaw > self.rThreshold ):
                self.log( "walk left");
                nCommand = -1;
            elif( rAngleYaw < -self.rThreshold ):
                self.log( "walk right");                
                nCommand = 1;                    
            else:
                self.log( "straight");
                nCommand = 0;                    
            if( self.nLastCommand != nCommand ):
                self.nLastCommand = nCommand;
                ALMotion.clearFootsteps();
                time.sleep( 0.1 );
                
            while( ALMotion.walkIsActive() ):
                self.log( "%s: wait end of activities of walk" % self.boxName() );
                
            if( nCommand == -1 ):
                ALMotion.addWalkArc( self.rAngle, self.rRadius, self.nSpeed );
            elif( nCommand == 1 ):
                ALMotion.addWalkArc( -self.rAngle, self.rRadius, self.nSpeed );                    
            elif( nCommand == -2 ):
                ALMotion.addTurn( self.rAngleTurn, self.nSpeed );
            elif( nCommand == 2 ):
                ALMotion.addTurn( -self.rAngleTurn, self.nSpeed );
            elif( nCommand == 0 ):              
                ALMotion.addWalkStraight( self.rLenWalk, self.nSpeed );            
            ALMotion.walk();
            time.sleep( 0.03 );
        # end while
        self.bIsRunning = False;
        print( self.boxName + ": start - end" );
        self.mutex.unlock();
        self.onStopped();        

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="WaitWalkIsFinished_p" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="566" y="250">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        while( ALMotion.walkIsActive() ):
            self.log( "%s: waiting..." % self.boxName() );
            time.sleep( 0.05 );
        self.log( "%s: exiting..." % self.boxName );
        time.sleep( 0.25 ); # wait end step and double support
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="TextEdit" robot="" id="6" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="721" y="238">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("If walk has been launched at least one time, then we must wait the end of walk to leave")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>If walk has been launched at least one time, then we must wait the end of walk to leave</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="LookTo" robot="" id="7" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="783" y="80">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(10)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>10</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="8" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="968" y="71">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    self.gotoAndStopParent(p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="4" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="5" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="3" outputowner="2" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="targetFound" index="80" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="WaitWalkIsFinished_p" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="363" y="43">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        while( ALMotion.walkIsActive() ):
            self.log( "%s: waiting..." % self.boxName() );
            time.sleep( 0.05 );
        self.log( "%s: exiting..." % self.boxName );
        time.sleep( 0.25 ); # wait end step and double support
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="exit" robot="" id="2" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="568" y="113">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(100)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>100</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="3" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="714" y="97">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    ALFrameManager.gotoAndStop(self.parentId, p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="7" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="exit" index="100" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="WaitWalkIsFinished_p" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="211" y="32">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        while( ALMotion.walkIsActive() ):
            self.log( "%s: waiting..." % self.boxName() );
            time.sleep( 0.05 );
        self.log( "%s: exiting..." % self.boxName );
        time.sleep( 0.25 ); # wait end step and double support
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="detect end" index="10" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="AnalyseHeadPitchToDetectTargetIsNear - and size too!" robot="" id="1" tooltip="will analyse the pitch of head and decide we are near the target and stop the behaviors" bitmap_expanded="1" plugin="" x="285" y="117">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        #~ puts code for box initialization here
        aParams = altools.getGlobalData( "FollowTarget_end_params" );
        self.log( "params: %s" % str( aParams ) );
        self.rPitchMax, self.rPitchMin, self.rSizeXMin, self.rSizeYMin = aParams;
        self.log( "%s: end condition: (%f, %f, %f, %f)" % (self.boxName, self.rPitchMax, self.rPitchMin, self.rSizeXMin, self.rSizeYMin ) );
        
        self.bIsNearTriggered = False;



    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, aPosAndSize ):
        rPitch = ALMotion.getAngles( "HeadPitch", True )[0];
        rSizeX = aPosAndSize[2];
        rSizeY = aPosAndSize[3];
        self.log( "%s: rPitch: %f, rSizeX: %f, rSizeY: %f, neartriggered: %s)" % ( self.boxName, rPitch, rSizeX, rSizeY, str(self.bIsNearTriggered) ) );        
#        if( rPitch < -0.61 or rPitch > 0.3 or self.bIsNearTriggered ):
        if( rPitch < self.rPitchMin or rPitch > self.rPitchMax or rSizeX > self.rSizeXMin or rSizeY > self.rSizeYMin or self.bIsNearTriggered ):
            self.log( "%s: NEAR" % ( self.boxName ) );
            self.bIsNearTriggered = True;
            self.output_near();
        else:
            self.log( "%s: FAR" % ( self.boxName ) );
            self.output_far();
            
    def onInput_onReset(self):
        self.bIsNearTriggered = False;
        
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="4" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="output_near" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_far" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="target found" robot="" id="2" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="545" y="102">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(80)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>80</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="3" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="730" y="97">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)

  def onUnload(self):
    ""

  def onInput_onStart(self, p):
    self.log( "%s: goto %d" % ( self.boxName, p ) );
    ALFrameManager.gotoAndStop(self.parentId, p)

  def onInput_onStop(self):
    ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="nothing" index="80" bitmap="">
                                        <Diagram scale="100" />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="Enter name here" robot="" id="11" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="644" y="510">
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Please, charge me!"
		sFrench = "S'il vous plais, branchez moi !"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                            </script>
                            <pluginContent>
                                <english>Please, charge me!</english>
                                <french>S&apos;il vous plais, branchez moi !</french>
                                <spanish></spanish>
                                <italian></italian>
                                <german></german>
                                <chinese></chinese>
                                <polish></polish>
                                <korean></korean>
                                <language>0</language>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="SayTextPrerender_p" robot="" id="12" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.02" bitmap_expanded="1" plugin="" x="959" y="503">
                            <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# SayTextPrerender - v1.02
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        self.nStep = self.nStateInit;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
#        txt = "\\RSPD=85\\ " + altools.transformAsciiAccentForSynthesis( p ); # not usefull now!
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        if( not self.getParameter( 'bJustPrepare' ) ):
            self.nStep = self.nStateSpeaking;
            self.output_onStartSpeaking();
            if( self.getParameter( "bWithLight" ) ):
                altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
            else:
                altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.nStep = self.nStateStopped;
        self.output_onStopSpeaking();
        
    def onInput_onStop(self):
        while( self.nStep == self.nStatePreparing ): # can't kill while preparing
            time.sleep( 0.2 );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                            <Output name="output_onStartSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak" id="5" />
                            <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking" id="6" />
                            <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="use light in eyes to speak" id="7" />
                            <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="8" />
                            <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="9" />
                            <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="10" />
                        </Box>
                        <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="9" indexofinput="3" outputowner="3" indexofoutput="5" />
                        <Link inputowner="9" indexofinput="3" outputowner="4" indexofoutput="10" />
                        <Link inputowner="9" indexofinput="3" outputowner="5" indexofoutput="5" />
                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="6" />
                        <Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="8" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
