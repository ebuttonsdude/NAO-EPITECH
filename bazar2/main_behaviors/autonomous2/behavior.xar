<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="2">
    <Box name="root" robot="" id="-1" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." bitmap_expanded="1" plugin="" x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
            <watches />
            <BehaviorLayer name="behavior_layer1" mute="0">
                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                    <Diagram scale="-1">
                        <Box name="AutonomousInfo" robot="" id="1" tooltip="AutonomousInfo: extractors and information about the world." bitmap_expanded="1" plugin="" x="321" y="259">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Extractors_basic" robot="" id="1" tooltip="AutonomousExtractors" bitmap_expanded="1" plugin="" x="369" y="351">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="UpdateVisionInfo" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="150" y="66">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="ChangeCamera" robot="" id="1" tooltip="Change the currently used camera.&#x0A;*** ref box in: ./4_localize/ChangeCamera/ExampleChangeCamera.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="65" y="109">
                                                                                        <bitmap>media/images/box/interaction/look.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self),
        self.kCameraSelectID = 18;
        self.cameraModule = ALProxy( "ALVideoDevice" ); # "ALVideoDevice"

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        #~ self.log( self.boxName + ": Use Top Camera" );
        self.cameraModule.setParam( self.kCameraSelectID, 0 );
        self.output_Finished();

    def onInput_onUseBottomCamera(self):
        #~ self.log( self.boxName + ": Use Bottom Camera" );    
        self.cameraModule.setParam( self.kCameraSelectID, 1 );
        self.output_Finished();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="use the camera at the top of the head (forehead)" id="2" />
                                                                                        <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)" id="3" />
                                                                                        <Output name="output_Finished" type="1" type_size="1" nature="1" inner="0" tooltip="The change is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="ExtractInfo - modified data wroten directly in the module" robot="" id="2" tooltip="Detect various info (luminosity, darkness, flash, average color)" bitmap_expanded="1" plugin="" x="293" y="76">
                                                                                        <bitmap>media/images/box/icons_appu/luminosity.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.extractor = ALProxy("UsageVisionInfo");
        self.strALMemoryValRoot =  "extractors/UsageVisionInfo/";
        self.astrALMemoryVal = [ "luminosity", "blackout", "flash", "average_rgb", "move" ];
            
    def onLoad(self):
        self.bIsRunning = False;
        self.bDebugMode = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self ):
        rPeriod = self.getParameter( "refreshPeriodMs" );
        if( self.bIsRunning == False ):
            self.bIsRunning = True;
            self.extractor.subscribe(self.getName(),  rPeriod, 0.0 )
            self.extractor.setAutonomousPost_activate( True ); # activate auto post to the autonomous life variable
            # on a plus besoin de se registrer vu que c'est fait dans le module directement
            #~ for val in self.astrALMemoryVal:
                #~ strTotalName = self.strALMemoryValRoot + val;
                #~ ALMemory.subscribeOnData(strTotalName, self.getName(), val, "myDataChanged") # set to "subscribeOnData" if you want to trigger output_NoMark after every analyses without mark
                #~ ALMemory.subscribeOnDataSetTimePolicy(strTotalName, self.getName(),rPeriod/2)
            self.log("%s detection: on" % self.boxName );
        
    def onInput_onStop(self):
        if(self.bIsRunning == True):
            self.bIsRunning = False    
            self.extractor.unsubscribe(self.getName())
            #~ for val in self.astrALMemoryVal:
                #~ strTotalName = self.strALMemoryValRoot + val;
                #~ ALMemory.unsubscribeOnData(strTotalName, self.getName())
            self.log("%s detection: off" % self.boxName );
            self.onStopped();
            
    def onInput_onSetDebugMode(self ):
        self.bDebugMode = not self.bDebugMode;
        self.extractor.setDebugMode( self.bDebugMode );
      
    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s::myDataChanged: pDataName: %s, pValue: %s, pMessage: %s" % ( self.boxName, pDataName, pValue, pMessage ) );
        outputFunc = getattr( self, "output_" + pMessage );
        if( pMessage[0] == 'l' or pMessage[0] == 'a' or pMessage[0] == 'm' ):
            # output has params:
            outputFunc( pValue );
        else:
            # no params
            outputFunc();
    # myDataChanged - end
    
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onSetDebugMode" type="1" type_size="1" nature="1" inner="0" tooltip="Call me if you want to have the possibility to have many times the same mark. By default, once a mark is seen, there will be no triggering until another mark is seen." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="sdfqsdf" id="5" />
                                                                                        <Output name="output_luminosity" type="2" type_size="1" nature="2" inner="0" tooltip="output global luminosity [0...1.]" id="6" />
                                                                                        <Output name="output_blackout" type="1" type_size="1" nature="2" inner="0" tooltip="suddenly the darkness has fall." id="7" />
                                                                                        <Output name="output_flash" type="1" type_size="1" nature="2" inner="0" tooltip="suddenly the light has arrived (flash)." id="8" />
                                                                                        <Output name="output_average_rgb" type="2" type_size="3" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Output name="output_move" type="2" type_size="3" nature="2" inner="0" tooltip="output information about the most moving zone [posX, posY,moving value]" id="10" />
                                                                                        <Parameter name="refreshPeriodMs" inherits_from_parent="0" content_type="1" value="200" default_value="200" min="0" max="100000" tooltip="The refresh period of the extractor in milliseconds, eg: 500." id="11" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Sound" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="155" y="170">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_new_peak" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TextEdit" robot="" id="14" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="228" y="24">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("noise_increase")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>noise_increase</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="TextEdit" robot="" id="15" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="231" y="142">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("music_detected")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>music_detected</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_SetBool_MemorizeLastTrue" robot="" id="22" tooltip="Change the value of a bool data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...) - memorize last time the data was set to true&#x0A;*** ref box in: ./2_wip/AutonomousLife/AutonomousLife_process.xar ***&#x0A;*** last modification date(git):   Thu Nov 26 16:26:54 2009 +0100 ***" bitmap_expanded="1" plugin="" x="596" y="324">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.nLastRequirement = -1;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.nLastRequirement );

    def onInput_onSetTrue(self):
        behaviordata.extractedData.updateValue( self.dataName + "_last_true", int( time.time() ) );
        self.onChangeValue( 1 );

    def onInput_onSetFalse(self):
        behaviordata.extractedData.updateValue( self.dataName + "_last_false", int( time.time() ) );    
        self.onChangeValue( 0 );
        
    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, nValue ):
        if( nValue != -1 ):
            self.nLastRequirement = nValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.nLastRequirement > 0.5 );
    # onChangeValue - end
    
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onSetTrue" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onSetFalse" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_SetBool_MemorizeLastTrue" robot="" id="23" tooltip="Change the value of a bool data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...) - memorize last time the data was set to true&#x0A;*** ref box in: ./2_wip/AutonomousLife/AutonomousLife_process.xar ***&#x0A;*** last modification date(git):   Thu Nov 26 16:26:54 2009 +0100 ***" bitmap_expanded="1" plugin="" x="594" y="210">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.nLastRequirement = -1;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.nLastRequirement );

    def onInput_onSetTrue(self):
        behaviordata.extractedData.updateValue( self.dataName + "_last_true", int( time.time() ) );
        self.onChangeValue( 1 );

    def onInput_onSetFalse(self):
        behaviordata.extractedData.updateValue( self.dataName + "_last_false", int( time.time() ) );
        self.onChangeValue( 0 );
        
    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, nValue ):
        if( nValue != -1 ):
            self.nLastRequirement = nValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.nLastRequirement > 0.5 );
    # onChangeValue - end
    
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onSetTrue" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                        <Input name="onSetFalse" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                    </Box>
                                                                                    <Box name="NoiseExtractor_ref - desactive sortie energy" robot="" id="1" tooltip="# NoiseExtractor_ref&#x0A;# v0.82&#x0A;&#x0A;Graphic Interface for Autonomous/ALNoiseExtractor.&#x0A;Value are roughly [0..2000]" bitmap_expanded="1" plugin="" x="272" y="311">
                                                                                        <bitmap>media/images/box/interaction/processing_sound.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# NoiseExtractor_ref
# v0.82
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.noise = ALProxy( "UsageNoiseExtractor" );
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.BIND_PYTHON( self.getName(),"myDataChangedPeak" );
        self.BIND_PYTHON( self.getName(),"myDataChangedCZ" );        
        self.strVarNameEnergy = "UsageNoiseExtractor/Energy";
        self.strVarNamePeak = "UsageNoiseExtractor/Peak";
        self.strVarNameCZ = "UsageNoiseExtractor/AverageCrossZero";
        self.mem = ALProxy( "ALMemory" );

    def onLoad(self):
        self.bIsRunning = False;
        self.timeMusicLastTrue = time.time();
        
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        self.noise.setVisualReturn( 2 );
        ALLeds.setIntensity( "EarLeds", 0. );
        
        self.bMusicIsDetected = False;
        
        self.noise.subscribe(self.getName());
        self.bIsRunning = True;
#        ALMemory.subscribeToMicroEvent( self.strVarNameEnergy, self.getName(), "", "myDataChanged" );
        ALMemory.subscribeToMicroEvent( self.strVarNamePeak, self.getName(), "", "myDataChangedPeak" );
        ALMemory.subscribeToMicroEvent( self.strVarNameCZ, self.getName(), "", "myDataChangedCZ" );

#        self.noise.setSaveInterestingBufferToFile( True ); # juste pour tester
        
        if( self.getParameter( 'bCategorizeSound' ) ):
            self.noise.enableCategorizeSound( True );
            self.nMusicThresholdCZ = self.getParameter("nMusicDetection_CZ_threshold");
            self.nMusicThresholdEnergy = self.getParameter("nMusicDetection_Energy_threshold");
                            
        else:
            self.noise.enableCategorizeSound( False );

    def onInput_onStop(self):
        if( self.bIsRunning ):
#            ALMemory.unsubscribeToMicroEvent( self.strVarNameEnergy, self.getName() );
            ALMemory.unsubscribeToMicroEvent( self.strVarNamePeak, self.getName() );
            ALMemory.unsubscribeToMicroEvent( self.strVarNameCZ, self.getName() );
            self.noise.unsubscribe(self.getName());
            self.bIsRunning = False;
            self.onStopped()

    def onInput_onSetDebugMode(self, nValue ):
        self.noise.setDebugMode( nValue > 0.5 );

    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.getName(), str( pMessage ), str( pDataName ), str( pValue ) ) );
        self.output_energy( pValue );
        
    def myDataChangedPeak(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChangedPeak: msg: %s; dataname: %s; value: %s" % ( self.getName(), str( pMessage ), str( pDataName ), str( pValue ) ) );
        if( pValue ):
            rEnergy = ALMemory.getData( self.strVarNameEnergy )
            self.output_new_peak_detected( rEnergy );

    def myDataChangedCZ(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChangedPeak: msg: %s; dataname: %s; value: %s" % ( self.getName(), str( pMessage ), str( pDataName ), str( pValue ) ) );
        bMusicDetectedNow = False;
        if( pValue > self.nMusicThresholdCZ ):
            rEnergy = self.mem.getData( "UsageNoiseExtractor/Energy" );
            if( rEnergy > self.nMusicThresholdEnergy ):
                bMusicDetectedNow = True;
        if( bMusicDetectedNow ):
            self.log( "CZ: %d, energy: %d" % ( pValue, int( rEnergy ) ) );
            self.output_MusicDetected(pValue);
            self.bMusicIsDetected = True;
            self.timeMusicLastTrue = time.time();
        elif( self.bMusicIsDetected ):
            if( time.time() - self.timeMusicLastTrue > 3.0 ): # 2 sec avant de s'arreter
                self.output_music_stopped();
                self.bMusicIsDetected = False;
# NoiseExtractor_ref - end     
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onSetDebugMode" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="output_energy" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Output name="output_new_peak_detected" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                        <Output name="output_MusicDetected" type="2" type_size="1" nature="2" inner="0" tooltip="some music is detected, output the number of frame with music detected" id="8" />
                                                                                        <Output name="output_music_stopped" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                                                        <Parameter name="bCategorizeSound" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Try to categorize sound (peaknoise, speech, music...)" id="10" />
                                                                                        <Parameter name="nMusicDetection_CZ_threshold" inherits_from_parent="0" content_type="1" value="550" default_value="550" min="100" max="10000" tooltip="music threshold to detect music: the CZ value" id="11" />
                                                                                        <Parameter name="nMusicDetection_Energy_threshold" inherits_from_parent="0" content_type="1" value="700" default_value="700" min="100" max="10000" tooltip="music threshold to detect music: the energy value" id="12" />
                                                                                    </Box>
                                                                                    <Link inputowner="23" indexofinput="2" outputowner="14" indexofoutput="3" />
                                                                                    <Link inputowner="22" indexofinput="2" outputowner="15" indexofoutput="3" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="23" indexofinput="3" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                                                                    <Link inputowner="22" indexofinput="3" outputowner="1" indexofoutput="8" />
                                                                                    <Link inputowner="22" indexofinput="4" outputowner="1" indexofoutput="9" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="InstantaneousExtractors_all_cpp" robot="" id="3" tooltip='Extractors &quot;instantaneous&quot; all recoded in cpp.' bitmap_expanded="1" plugin="" x="156" y="289">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.extractor = ALProxy( "ALInfo" );

    def onLoad(self):
        self.bIsRunning = False;
        self.bDebugMode = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        rPeriod = self.getParameter( "refreshPeriodMs" );
        if( self.bIsRunning == False ):
            self.bIsRunning = True;
            self.extractor.subscribe(self.getName(), int(rPeriod), 0. );
            self.log("%s detection: on" % self.boxName );

    def onInput_onStop(self):
        if(self.bIsRunning == True):
            self.bIsRunning = False    
            self.extractor.unsubscribe(self.getName())
            self.log("%s detection: off" % self.boxName );
            self.onStopped();
            
    def onInput_onSetDebugMode(self ):
        self.bDebugMode = not self.bDebugMode;
        self.extractor.setDebugMode( self.bDebugMode );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onSetDebugMode" type="1" type_size="1" nature="1" inner="0" tooltip="activate / deactivate debug on the cpp module" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                    <Parameter name="refreshPeriodMs" inherits_from_parent="0" content_type="2" value="100" default_value="200" min="10" max="1e+06" tooltip="periof refresh of the extractor in ms" id="6" />
                                                                </Box>
                                                                <Box name="RecordedExtractors" robot="" id="5" tooltip="Extractors of ponctual data that change fast, so we record to them." bitmap_expanded="1" plugin="" x="155" y="411">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="DetectCheatCode_ref" robot="" id="1" tooltip="detect some command / cheat code, command are a combination of feet + an area on the head" bitmap_expanded="1" plugin="" x="251" y="24">
                                                                                        <bitmap>media/images/box/icons_appu/combo.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rTime = 1.0;
        strTemplate ="%sBumperPressed";
        aBumpName = [ strTemplate % "Left", strTemplate % "Right"];
        strTemplate ="%sTactilTouched";
        aTactilName = [ strTemplate % "Front", strTemplate % "Middle", strTemplate % "Rear" ];
        while( not self.bMustStop ):
            aListPress = ALMemory.getListData( aBumpName );
            if( aListPress[0] or aListPress[1] ):
                # check tactile
                aListPress = ALMemory.getListData( aTactilName );
                for i in range( 3 ):
                    if( aListPress[i] ):
                        self.output_cheatDetected( i );
                    
            time.sleep( rTime );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_cheatDetected" type="2" type_size="1" nature="2" inner="0" tooltip="output the number of cheat detected" id="5" />
                                                                                    </Box>
                                                                                    <Box name="UpdateBumper" robot="" id="2" tooltip="Listens to bumpers sensors. Stimulate left or right output depending on what bumper has been stimulated." bitmap_expanded="1" plugin="" x="248" y="136">
                                                                                        <bitmap>media/images/box/movement/move_foot.png</bitmap>
                                                                                        <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):       
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        self.onStopped()
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="369" y="25">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("foot_left_bump")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>foot_left_bump</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="374" y="141">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("foot_right_bump")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>foot_right_bump</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetValue_p - play sound" robot="" id="3" tooltip="Change the value of a float data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...)" bitmap_expanded="1" plugin="" x="624" y="342">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.rLastValueReceived = 0.42; # not initialised

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.rLastValueReceived );

    def onInput_onSetValue(self, rValue ):
        self.onChangeValue( rValue );

    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, rValue ):
        if( rValue != 0.42 ):
            self.rLastValueReceived = rValue;
            if( rValue > 0.5 ):
                ALLeds.fadeListRGB( "LeftFootLeds", [0xFF, 0x00], [0.2,1.5] );
#                behaviordata.expressHey();                
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.rLastValueReceived );
                self.onStopped();
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetValue" type="2" type_size="1" nature="1" inner="0" tooltip="change the value" id="3" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetValue_p - play sound" robot="" id="4" tooltip="Change the value of a float data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...)" bitmap_expanded="1" plugin="" x="631" y="458">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.rLastValueReceived = 0.42; # not initialised

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.rLastValueReceived );

    def onInput_onSetValue(self, rValue ):
        self.onChangeValue( rValue );

    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, rValue ):
        if( rValue != 0.42 ):
            self.rLastValueReceived = rValue;
            if( rValue > 0.5 ):
                ALLeds.fadeListRGB( "RightFootLeds", [0xFF, 0x00], [0.2,1.5] );
#                behaviordata.expressAngry();                
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.rLastValueReceived );
                self.onStopped();
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetValue" type="2" type_size="1" nature="1" inner="0" tooltip="change the value" id="3" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="TactilExtractors_p" robot="" id="3" tooltip="Update tactile related variable" bitmap_expanded="1" plugin="" x="251" y="329">
                                                                                        <bitmap>media/images/box/icons_appu/icon_tete_nao.png</bitmap>
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_tap" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="84" y="43">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("tap")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>tap</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="114" y="389">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("caress")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>caress</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="Detect_HeadTactilAction" robot="" id="3" tooltip="Detect touch on head tactil sensor pour v1.6" bitmap_expanded="1" plugin="" x="120" y="181">
                                                                                                            <bitmap>media/images/box/icons_appu/icon_tete_nao.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# Detect Head Tactil Action - v1.6.5
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.strTemplate ="%sTactilTouched";
        self.listDeviceName = ["Front", "Middle", "Rear" ];
        self.sensors = ALProxy( "ALSensors" );
        self.rPeriod = 50;
        self.rPrecision = 1;

        self.rTimeMaxTap = 0.28;
        self.rTimeMinCaress = 0.50;
        self.rTimeMinCalmDown = 3.;
        self.astrListDevice = [];
        
    def onLoad(self):
        self.timeBegin = False;
        self.abPushed = [ False, False, False ];
        self.bMustStop = False;
        self.bIsRunning = False;
        self.bCalmDownAlreadyTriggered = False;
        self.bRearFirst = False;


    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self ):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;
            
        self.bIsRunning = True;
        self.bMustStop = False;
        
#        self.sensors.subscribe( self.getName(), self.rPeriod, self.rPrecision );
        self.astrListDevice = [];
        for strDevice in self.listDeviceName:
            ALMemory.subscribeToEvent( self.strTemplate % strDevice, self.getName(), "myDataChanged" ); # pour le calm down qui sort tout seul
#            ALMemory.subscribeOnDataSetTimePolicy( self.strTemplate % strDevice, self.getName(), 0 );
            self.astrListDevice.append( self.strTemplate % strDevice );
            
        while( not self.bMustStop ):
            # insert some good and powerful code here
            self.testTimeoutCalmDown();
            time.sleep( 0.5 );
            pass
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 
        
    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
#        self.sensors.unsubscribe( self.getName() );
        for strDevice in self.listDeviceName:
            ALMemory.unsubscribeToEvent( self.strTemplate % strDevice, self.getName() );        
            
    def testTimeoutCalmDown( self ):
        bPushed = self.abPushed[0] or self.abPushed[1] or self.abPushed[2];
        if( bPushed and not self.bCalmDownAlreadyTriggered ):
            timeCurrent = time.time();
            timeElapsed = timeCurrent - self.timeBegin;
            if( timeElapsed > self.rTimeMinCalmDown ):
                self.bCalmDownAlreadyTriggered = True;
                self.output_CalmDown();
            


    def myDataChanged(self, pDataName, pValue, pMessageNotUsed ):
#        self.log( "%s.myDataChanged: time: %f; msg: %s; dataname: %s; value: %s" % ( self.boxName, time.time(), str( pMessage ), str( pDataName ), str( pValue ) ) );

        nIndex = 0;
        if( pDataName[0] == "M" ):
            nIndex = 1;
        elif( pDataName[0] == "R" ):
            nIndex = 2;
            
        bLast = self.abPushed[0] or self.abPushed[1] or self.abPushed[2];
#        self.abPushed[nIndex] = pValue; # pas assez précis; on peut des fois avoir un faux event si un event push et juste apres un relaché
        self.abPushed[0], self.abPushed[1],  self.abPushed[2] = ALMemory.getListData( self.astrListDevice );
        bNew = self.abPushed[0] or self.abPushed[1] or self.abPushed[2];
            
        if( bLast != bNew ):
            if( bNew ):
                # first touch
                self.timeBegin = time.time();
                self.bCalmDownAlreadyTriggered = False;
                if( nIndex == 2 ):
                    self.bRearFirst = True;
                else:
                    self.bRearFirst = False;
            else:
                # first frame without touch
                timeCurrent = time.time();
                timeElapsed = timeCurrent - self.timeBegin;    
                self.log( "%s: timeElapsed: %f" % ( self.boxName, timeElapsed ) );
                if( timeElapsed < self.rTimeMaxTap ):
                    self.output_Tap();
                elif( timeElapsed > self.rTimeMinCaress and timeElapsed < self.rTimeMinCalmDown ):
                    if( self.bRearFirst or nIndex == 0 ):
                        self.output_CaressRear();
                    else:
                        self.output_CaressFront();
                elif( timeElapsed > self.rTimeMinCalmDown ):
                    if( not self.bCalmDownAlreadyTriggered ):
                        self.output_CalmDown();
                else:
                    self.output_NotUnderstand();

    # myDataChanged - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="output_Tap" type="1" type_size="1" nature="2" inner="0" tooltip="A tap has just occured" id="5" />
                                                                                                            <Output name="output_CaressFront" type="1" type_size="1" nature="2" inner="0" tooltip="someone caress me" id="6" />
                                                                                                            <Output name="output_CaressRear" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                                                                            <Output name="output_CalmDown" type="1" type_size="1" nature="2" inner="0" tooltip="Someone ask me to calm down" id="8" />
                                                                                                            <Output name="output_NotUnderstand" type="1" type_size="1" nature="2" inner="0" tooltip="We are not sure if it&apos;s a long tap or a short caress" id="9" />
                                                                                                        </Box>
                                                                                                        <Box name="WaitThenFalse" robot="" id="4" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="145" y="561">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                                                            <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="SoundContent" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="357" y="438">
                                                                                                            <bitmap>media/images/box/interaction/play_sound.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nNumSound = random.randint( 1, 5 );
        altools.playSound( 'contentement%d.wav' % nNumSound, bDirectPlay = True );
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetBool_MemorizeLastTrue - modif ui_state - modif sound" robot="" id="6" tooltip="Change the value of a bool data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...) - memorize last time the data was set to true&#x0A;*** ref box in: ./2_wip/AutonomousLife/AutonomousLife_process.xar ***&#x0A;*** last modification date(git):   Thu Nov 26 16:26:54 2009 +0100 ***" bitmap_expanded="1" plugin="" x="535" y="186">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.nLastRequirement = -1;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.nLastRequirement );

    def onInput_onSetTrue(self):
        self.onChangeValue( 1 );

    def onInput_onSetFalse(self):
        if(  self.nLastRequirement != 0 ):
            self.onChangeValue( 0 );
        
    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, nValue ):
        if( nValue != -1 ):
            if( behaviordata.extractedData.getValue( 'ui_state' ) != '' or ( time.time() - behaviordata.extractedData.getValue( 'ui_state_last_stop' ) ) < 2.2 ):
                print( "%s: event disabled" % self.boxName );
                return; # do nothing if in some ui
            if( nValue > 0.5 ):
                behaviordata.extractedData.updateValue( self.dataName + "_last_true", int( time.time() ), bPostToALMemoryToo = True );
                altools.playSound( 'hu1.wav', bWait = False, bDirectPlay = True ); # ATTENTION CODE SPECIFIC A LA TAPPE !!!
            self.nLastRequirement = nValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.nLastRequirement > 0.5, bPostToALMemoryToo = True );
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetTrue" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Input name="onSetFalse" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetBool_MemorizeLastTrue - modif ui_state" robot="" id="7" tooltip="Change the value of a bool data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...) - memorize last time the data was set to true&#x0A;*** ref box in: ./2_wip/AutonomousLife/AutonomousLife_process.xar ***&#x0A;*** last modification date(git):   Thu Nov 26 16:26:54 2009 +0100 ***" bitmap_expanded="1" plugin="" x="540" y="338">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.nLastRequirement = -1;

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.nLastRequirement );

    def onInput_onSetTrue(self):
        self.onChangeValue( 1 );

    def onInput_onSetFalse(self):
        if(  self.nLastRequirement != 0 ):
            self.onChangeValue( 0 );
        
    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, nValue ):
        if( nValue != -1 ):
            if( behaviordata.extractedData.getValue( 'ui_state' ) != '' or ( time.time() - behaviordata.extractedData.getValue( 'ui_state_last_stop' ) ) < 2.2 ):
                print( "%s: event disabled" % self.boxName );
                return; # do nothing if in some ui
            if( nValue > 0.5 ):
                behaviordata.extractedData.updateValue( self.dataName + "_last_true", int( time.time() ), bPostToALMemoryToo = True );
            self.nLastRequirement = nValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.nLastRequirement > 0.5, bPostToALMemoryToo = True );
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetTrue" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                                                                            <Input name="onSetFalse" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                                        </Box>
                                                                                                        <Box name="TimerReset" robot="" id="8" tooltip="Send a bang with a predefined period." bitmap_expanded="1" plugin="" x="123" y="745">
                                                                                                            <bitmap>media/images/box/wait.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import threading # opkg install python-threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False;

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value (seconds)." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the timer." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                                                                            <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="2.5" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds). The box output will be stimulated at this period." id="6" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="3" indexofoutput="6" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="3" indexofoutput="7" />
                                                                                                        <Link inputowner="7" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="4" outputowner="3" indexofoutput="6" />
                                                                                                        <Link inputowner="6" indexofinput="4" outputowner="3" indexofoutput="7" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="7" />
                                                                                                        <Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="8" />
                                                                                                        <Link inputowner="7" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="6" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="7" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="8" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="9" />
                                                                                                        <Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="7" indexofinput="4" outputowner="8" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="4" outputowner="8" indexofoutput="5" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="UpdateTactil" robot="" id="4" tooltip="Listens to bumpers sensors. Stimulate left or right output depending on what bumper has been stimulated." bitmap_expanded="1" plugin="" x="253" y="238">
                                                                                        <bitmap>media/images/box/movement/move_foot.png</bitmap>
                                                                                        <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        self.onStopped() #~ activate output of the box        
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                                        <Output name="output_touched" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="385" y="48">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("tactil_touch_front")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>tactil_touch_front</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="385" y="155">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("tactil_touch_middle")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>tactil_touch_middle</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="3" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="385" y="266">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("tactil_touch_rear")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>tactil_touch_rear</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetValue_p" robot="" id="4" tooltip="Change the value of a float data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...)" bitmap_expanded="1" plugin="" x="637" y="578">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.rLastValueReceived = 0.42; # not initialised

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.rLastValueReceived );

    def onInput_onSetValue(self, rValue ):
        self.onChangeValue( rValue );

    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, rValue ):
        if( rValue != 0.42 ):
            self.rLastValueReceived = rValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.rLastValueReceived );
                self.onStopped();
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetValue" type="2" type_size="1" nature="1" inner="0" tooltip="change the value" id="3" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetValue_p" robot="" id="5" tooltip="Change the value of a float data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...)" bitmap_expanded="1" plugin="" x="638" y="335">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.rLastValueReceived = 0.42; # not initialised

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.rLastValueReceived );

    def onInput_onSetValue(self, rValue ):
        self.onChangeValue( rValue );

    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, rValue ):
        if( rValue != 0.42 ):
            self.rLastValueReceived = rValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.rLastValueReceived );
                self.onStopped();
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetValue" type="2" type_size="1" nature="1" inner="0" tooltip="change the value" id="3" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="EnvData_SetValue_p" robot="" id="6" tooltip="Change the value of a float data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...)" bitmap_expanded="1" plugin="" x="641" y="454">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import altools
import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.dataName = "";
        self.rLastValueReceived = 0.42; # not initialised

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSetDataName(self, pDataName ):
        self.dataName = pDataName;
        self.onChangeValue( self.rLastValueReceived );

    def onInput_onSetValue(self, rValue ):
        self.onChangeValue( rValue );

    def onInput_onUnknownState(self):
        self.onChangeValue( altools.const.state_unknown );
        
    def onChangeValue( self, rValue ):
        if( rValue != 0.42 ):
            self.rLastValueReceived = rValue;
            if( self.dataName != "" ):
                behaviordata.extractedData.updateValue( self.dataName, self.rLastValueReceived );
                self.onStopped();
    # onChangeValue - end
    
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onSetDataName" type="3" type_size="1" nature="1" inner="0" tooltip="" id="2" />
                                                                                                            <Input name="onSetValue" type="2" type_size="1" nature="1" inner="0" tooltip="change the value" id="3" />
                                                                                                            <Input name="onUnknownState" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="TactilTouchFusion" robot="" id="7" tooltip="Do an logical or on the third part of the tactil head and store result in extractData" bitmap_expanded="1" plugin="" x="803" y="395">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        bComputedData = behaviordata.extractedData.getValue( "tactil_touch_front" ) > 0.5 or behaviordata.extractedData.getValue( "tactil_touch_middle" ) > 0.5 or behaviordata.extractedData.getValue( "tactil_touch_rear" ) > 0.5;
        behaviordata.extractedData.updateValue( "tactil_touch", bComputedData );
        if( bComputedData ):
            behaviordata.extractedData.updateValue( "tactil_touch_last_true", int( time.time() ) );
            self.output_touched();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_touched" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="3" outputowner="0" indexofoutput="4" />
                                                                                                        <Link inputowner="6" indexofinput="3" outputowner="0" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="6" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                                        <Link inputowner="0" indexofinput="8" outputowner="7" indexofoutput="3" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="SoundSoupir" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="392" y="591">
                                                                                        <bitmap>media/images/box/interaction/play_sound.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nNumSound = random.randint( 1, 1 );
        behaviordata.extractedData.updateValue( "calmdown", True );
        behaviordata.extractedData.updateValue( "calmdown_last_true", int( time.time() ) );
        altools.playSound( 'soupir%d.wav' % nNumSound, bDirectPlay = True );
        behaviordata.extractedData.updateValue( "calmdown", False );        
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="CommandRecordValue" robot="" id="6" tooltip="post/record info about command or cheat codes" bitmap_expanded="1" plugin="" x="407" y="28">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, nNumCheatcode ):
        strVarName = "command_code_" + str( nNumCheatcode );
        behaviordata.extractedData.updateValue( strVarName, True );
        behaviordata.extractedData.updateValue( strVarName + '_last_true', int( time.time() ) );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="UpdateExcitement_ref" robot="" id="7" tooltip="update the excitement state" bitmap_expanded="1" plugin="" x="564" y="265">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import behaviordata

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.info = ALProxy( "UsageVisionInfo" );
        self.noise = ALProxy( "UsageNoiseExtractor" );        
        life = ALProxy( 'ALLife' );
        if( life.isFullExcitedAtStartup() ):
            self.info.raiseAverageMoving( 80. ); # a big, big, big value
            self.info.raiseAverageMoving( 80. );
            self.info.raiseAverageMoving( 80. );
            

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.rExcitement = 0.3; # plus réaliste de partir un peu excité! (ne change rien si rRatio est proche de 1.)
        life = ALProxy( "ALLife" );
        self.rExcitementRatioModifier = life.getExcitingRatio();

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        rPeriod = self.getParameter( "rPeriod" );
        
        while( not self.bMustStop ):
            # insert some good and powerful code here
            rRatio = 1.0; # 0 -> tres lent; 1.0 => direct
            rAvgMove = ALMemory.getData( "extracted_data/camera_medium_average_moving", 0 );
            rAvgNoise = ALMemory.getData( "UsageNoiseExtractor/MediumAverageEnergy", 0 );
            # on pourra dépasser relativement facilement 1.0 sur chaqun des deux params, et donc atteindre l'excitation maxi, meme si on a que du sons ou que du mouvement, mais c'est pas génant...
            #  valeur correcte: 14/600, mais je baisse pour test en interne... => 10/400
            rNewValue = ( rAvgMove/10. + rAvgNoise/400. ) / 2.;
            rExcitementPrev = self.rExcitement;
            self.rExcitement = (( 1. - rRatio ) * self.rExcitement + rRatio * rNewValue) * self.rExcitementRatioModifier;
            self.rExcitement = altools.limitRange( self.rExcitement, 0., 1. );
            if( rExcitementPrev < behaviordata.getSleepingValue() and self.rExcitement >= behaviordata.getSleepingValue() ):
                behaviordata.extractedData.updateValue( "wakeup_last_true", int( time.time() ) );
            elif( rExcitementPrev >= behaviordata.getSleepingValue() and self.rExcitement < behaviordata.getSleepingValue() ):
                behaviordata.extractedData.updateValue( "all_asleep_last_true", int( time.time() ) );
                
#            self.log( "%s: rAvgMove; %f, rAvgNoise; %f rNewValue: %f, excite: %f" % ( self.boxName, rAvgMove, rAvgNoise, rNewValue, self.rExcitement ) );
            behaviordata.extractedData.updateValue( "excitement", self.rExcitement );
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_onCalmDown(self):
        for i in range( 6 ):
            self.info.lowerAverageMoving();
            self.noise.lowerAverageEnergy();

    def onInput_onAddExcitement(self):
        self.info.raiseAverageMoving( 0.5 );
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Input name="onAddExcitement" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                                        <Input name="onCalmDown" type="1" type_size="1" nature="1" inner="0" tooltip="Calm down !" id="5" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                                        <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="2" default_value="2" min="0" max="600" tooltip="Refresh period in seconds" id="7" />
                                                                                    </Box>
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="5" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="4" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="MetaExtractors" robot="" id="4" tooltip="Compute meta things / combinated information" bitmap_expanded="1" plugin="" x="160" y="531">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# MetaExtractors v0.5
import time
import behaviordata

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.life = ALProxy( 'ALLife' );
        except:
            self.life = False;
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        pass
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            # bHuman = behaviordata.extractedData.human_visible or behaviordata.extractedData.human_visible or behaviordata.extractedData.caress or behaviordata.extractedData.tap; # ici on ne met pas des getValue, car on veut avoir des false si la variable n'existe pas
            human_last_true = max( behaviordata.extractedData.human_is_visible_last_true, behaviordata.extractedData.tactil_touch_last_true );
            behaviordata.extractedData.updateValue( "human_last_true", human_last_true );

            time.sleep( rPeriod );
        # end while
            
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="1000" tooltip="Period of refresh in second" id="5" />
                                                                </Box>
                                                                <Box name="MoodVariator_p" robot="" id="21" tooltip="Change its mood" bitmap_expanded="1" plugin="" x="445" y="30">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
import time

import abcdk.profiler as profiler

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        # internal var [0..1] (some are 0..5)
        self.rStress = 0.;   # this is increased by noise
        self.rHappy = 0.;   # this is increased by caress
        self.rAngry = 0.;    # this is increased by tap
        self.rConfort = 0.;  # this is increased by movement detection or human seen
        self.strCurrentMoodState = "";
        self.astrListVariable = [ "tap", "caress", "human_is_visible" ];

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def subscribeOnData( self ):
        for variable in self.astrListVariable:
            ALMemory.subscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + variable, self.getName(), variable[0], "myDataChanged" );
        
    def unsubscribeOnData( self ):
        for variable in self.astrListVariable:
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + variable, self.getName() );        
            
    def updateInternal( self, rVal, rUpdateVal, rMaxValue = 1. ):
        rVal -= rUpdateVal;
        rVal = altools.limitRange( rVal, 0., rMaxValue );
        return rVal;
    
    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        self.subscribeOnData();
        
        while( not self.bMustStop ):
            # behaviordata.extractedData.updateValue( self.dataName + "_last_true", int( time.time() ) );
            timeProfile = profiler.UsageProfilerHelperBox( self.getName() );
                       
            strNewState = "normal";
            if( self.rHappy > 0.2 ):
                strNewState = "happy";
                self.rStress = 0.;
            elif( self.rStress > 2 * self.rConfort ):
               strNewState = "scared";
            elif( self.rAngry > 0.5 ):
                strNewState = "angry";

            
            self.rStress = self.updateInternal( self.rStress, 0.6, 2. );
            self.rHappy = self.updateInternal( self.rHappy, 0.2, 5. );
            self.rAngry = self.updateInternal( self.rAngry, 0.2 );
            self.rConfort = self.updateInternal( self.rConfort, 0.2 );

#            self.log( "rStress: %f, rHappy: %f, rAngry: %f, rConfort: %f" % ( self.rStress, self.rHappy, self.rAngry, self.rConfort ) );

            if( self.strCurrentMoodState != strNewState ):
                self.log( "state: %s => %s" % ( self.strCurrentMoodState, strNewState ) );
                self.strCurrentMoodState = strNewState;
                behaviordata.extractedData.updateValue( "mood_state", strNewState, bPostToALMemoryToo = True );
            timeProfile = None
            time.sleep( 1.0 );
            pass
        # end while
        
        self.unsubscribeOnData();
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_onNoiseIncrease(self, rValue ):
        self.rStress += rValue / 1000;
            
    def myDataChanged(self, pDataName, pValue, pMessage):
        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        if( pValue ):
            if( pMessage == "t" ):
                self.rAngry += 0.5;
            if( pMessage == "c" ):
                self.rHappy += 0.5;
            if( pMessage == "h" ):
                self.rConfort += 0.5;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onNoiseIncrease" type="2" type_size="1" nature="1" inner="0" tooltip="Increasing noise applyed to Nao" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                </Box>
                                                                <Box name="InjectPythonWorldToALMemory" robot="" id="6" tooltip="Add information from python world to ALMemory" bitmap_expanded="1" plugin="" x="165" y="648">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# VariousExtractors v0.5
import time
import behaviordata

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        pass
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            behaviordata.behaviorDescManager.updateInfo();
            time.sleep( rPeriod );
        # end while
            
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="1000" tooltip="Period of refresh in second" id="5" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="21" indexofinput="4" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Extractors_advanced" robot="" id="2" tooltip="AutonomousExtractors" bitmap_expanded="1" plugin="" x="367" y="476">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1" />
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="HandleOnOff_ref" robot="" id="3" tooltip="Register to a variable and ouput value when the variable is changing to on or to off" bitmap_expanded="1" plugin="" x="127" y="353">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_start" type="1" type_size="1" nature="2" inner="0" tooltip="This variable is on" id="5" />
                                                <Output name="output_stop" type="1" type_size="1" nature="2" inner="0" tooltip="this variable is off" id="6" />
                                                <Parameter name="strName" inherits_from_parent="0" content_type="3" value="autonomous_extractors_basic" default_value="" custom_choice="0" tooltip="Name of the variable to watch" id="7" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="6" tooltip="Transmits the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="120" y="509">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("TODO: Gerer l'arret et la gestion des priorités.")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>TODO: Gerer l&apos;arret et la gestion des priorités.</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="DebugTools" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="322" y="387">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="getCpuComsumption" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="108" y="154">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rCpuLoad = altools.getCpuLoad();
        self.log( "rCpuLoad: %f" % (rCpuLoad/1000. ) );
        self.output_value( rCpuLoad ) #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_value" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="ExportBehaviorData" robot="" id="23" tooltip="Change the value of a bool data in the environment. The order of the triggered input has no meanings. (the data name can be received after the value...) - memorize last time the data was set to true&#x0A;*** ref box in: ./2_wip/AutonomousLife/AutonomousLife_process.xar ***&#x0A;*** last modification date(git):   Thu Nov 26 16:26:54 2009 +0100 ***" bitmap_expanded="1" plugin="" x="276" y="320">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        behaviordata.usageDataManager.exportToALMemory();
        self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="Timer" robot="" id="1" tooltip="Send a bang with a predefined period." bitmap_expanded="1" plugin="" x="98" y="316">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False;

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value (seconds)." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the timer." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="60" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds). The box output will be stimulated at this period." id="6" />
                                            </Box>
                                            <Box name="EnableAltoolsDebug_ref" robot="" id="6" tooltip="active ou desactive le mode debug d&apos;altools" bitmap_expanded="1" plugin="" x="103" y="612">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onDisable(self):
        altools.setDebugMode( False );    
        self.onStopped() #~ activate output of the box


    def onInput_onEnable(self):
        altools.setDebugMode( True );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onEnable" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
                                                <Input name="onDisable" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_PrintVar_p" robot="" id="7" tooltip="Print all variable of the extracted data." bitmap_expanded="1" plugin="" x="96" y="433">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/print.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.alinfo = ALProxy( "ALInfo" );

    def onInput_onStart(self):
        try:
            print( "*** Current Time: %f\n" % time.time() );
            self.log( "*** Current Time: %f" % time.time() );
            self.log( self.alinfo.printVariables() );
            behaviordata.extractedData.dumpAllExtractedData();
        except:
            pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="PrintAllBehaviors_stats" robot="" id="8" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="97" y="500">
                                                <bitmap>media/images/box/icons_appu/mind.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/print.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        print( "*** Current Time: %f\n" % time.time() );
        behaviordata.behaviorDescManager.printAll();
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="FullMusicNoiseSimulation_Debug" robot="" id="9" tooltip="simulate a plain half hour of loud music experience" bitmap_expanded="1" plugin="" x="358" y="54">
                                                <bitmap>media/images/box/icons_appu/dj_black.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        noise = ALProxy( "UsageNoiseExtractor" );
        noise.setAverageValue_ForTestPurpose( 2000 );
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="ZeroMusicNoiseSimulation_Debug" robot="" id="10" tooltip="simulate a null sound" bitmap_expanded="1" plugin="" x="359" y="151">
                                                <bitmap>media/images/box/icons_appu/dj_black.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/flat.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        noise = ALProxy( "UsageNoiseExtractor" );
        noise.setAverageValue_ForTestPurpose( 0 );
        uvi = ALProxy( "UsageVisionInfo" );
        for i in range( 10 ):
            uvi.lowerAverageMoving();
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_GetArea_ref" robot="" id="12" tooltip="Get the Autonomous Life Area info." bitmap_expanded="1" plugin="" x="400" y="623">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/area.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.strVarName = "Autonomous/Life/Area";

    def onLoad(self):
        #~ puts code for box initialization here
        self.life = ALProxy( "ALLife" );

    def onUnload(self):
        pass

    def onInput_onStart(self):
        nValue = self.life.getArea();
        if( nValue == altools.const.area_stay_sit ):
            self.output_stay_sit();
        if( nValue == altools.const.area_stay_there ):
            self.output_stay_there();            
        elif( nValue == altools.const.area_limited ):
            self.output_limited();
        elif( nValue == altools.const.area_free ):
            self.output_free();
            
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="output_stay_sit" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="output_stay_there" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="output_limited" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="output_free" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="AutonomousLife_SetArea_ref" robot="" id="13" tooltip="Change the Autonomous Life Area." bitmap_expanded="1" plugin="" x="398" y="511">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStaySit(self):
        self.life.setArea( altools.const.area_stay_sit );
        
    def onInput_onStayThere(self):
        self.life.setArea( altools.const.area_stay_there );

    def onInput_onLimited(self):
        self.life.setArea( altools.const.area_limited );
    
    def onInput_onFree(self):    
        self.life.setArea( altools.const.area_free );]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStaySit" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStayThere" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Input name="onLimited" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Input name="onFree" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Profiling" robot="" id="14" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="106" y="37">
                                                <bitmap>media/images/box/icons_appu/system_profiler.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Activate" robot="" id="4" tooltip="Activate the profiler (default is activated)" bitmap_expanded="1" plugin="" x="110" y="123">
                                                                    <bitmap>media/images/box/icons_appu/system_profiler.png</bitmap>
                                                                    <bitmap>media/images/box/icons_appu/settings.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.up = ALProxy( "UsageProfiler" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_input_on(self):
        self.up.enableMeasures( True );

    def onInput_input_off(self):
        self.up.enableMeasures( False );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="input_on" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="input_off" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                </Box>
                                                                <Box name="ActivateDebug" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="208" y="122">
                                                                    <bitmap>media/images/box/icons_appu/system_profiler.png</bitmap>
                                                                    <bitmap>media/images/box/icons_appu/settings.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.up = ALProxy( "UsageProfiler" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_input_on(self):
        self.up.setDebugMode( True );

    def onInput_input_off(self):
        self.up.setDebugMode( False );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="input_on" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                    <Input name="input_off" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                </Box>
                                                                <Box name="ProfilerMainReference" robot="" id="11" tooltip="Permits to compare with the total time&#x0A;v0.9&#x0A;" bitmap_expanded="1" plugin="" x="209" y="41">
                                                                    <bitmap>media/images/box/icons_appu/system_profiler.png</bitmap>
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# ProfilerMainReference box
# v0.9

import time

import abcdk.profiler as profiler

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.up = ALProxy( "UsageProfiler" );
        

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        nCpt = 0;
        while( not self.bMustStop ):
            nCpt += 1;
            if( nCpt >= 10 ):
                nCpt = 0;            
                self.up.resetMeasuresIntermediate(); # on fait la mesure sur 10 coups...
#            uph = profiler.UsageProfilerHelper( "AAA_main" );
            time.sleep( rPeriod );
#            uph = None; # force destruction now, or else it would be destructed only at the beginning of the next loop (and just after the new start, so bad news)
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
# ProfilerMainReference box - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="100000" tooltip="period in seconds" id="5" />
                                                                </Box>
                                                                <Box name="ProfilerReset" robot="" id="3" tooltip="ProfilerReset&#x0A;v0.9&#x0A;Reset all the profiler" bitmap_expanded="1" plugin="" x="100" y="41">
                                                                    <bitmap>media/images/box/icons_appu/system_profiler.png</bitmap>
                                                                    <bitmap>media/images/box/icons_appu/settings.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# ProfilerReset box
# v0.9

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.up = ALProxy( "UsageProfiler" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.up.resetMeasures();
        self.onStopped() #~ activate output of the box
        pass
# ProfilerReset box - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                </Box>
                                                                <Link inputowner="11" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="DetectCombo_ret" robot="" id="11" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;*** ref box in: ./4_localize/Templates/TemplateWhile/ExampleTemplateWhile.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="74" y="717">
                                                <bitmap>media/images/box/icons_appu/combo.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nCptTwoFeet = 0;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        while( not self.bMustStop ):
            # insert some good and powerful code here
            if( altools.isFootPressed( 'L') and altools.isFootPressed( 'R') ):
                self.nCptTwoFeet += 1;
                if( self.nCptTwoFeet >= 3 ):
                    self.nCptTwoFeet = 0;
                    self.output_comboDoubleFeetLong();
                    altools.playSound( 'appMail1.wav', bDirectPlay = True );
                    try:
#                        altools.sayAndCache( 'combo double feet long' );
                        pass
                    except:
                        pass
            else:
                self.nCptTwoFeet = 0;            
            time.sleep( 1. );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_comboDoubleFeetLong" type="1" type_size="1" nature="2" inner="0" tooltip="the combo is detected" id="5" />
                                            </Box>
                                            <Box name="IterateZone" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="215" y="718">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        # change zone
        life = ALProxy( "ALLife" );
        nArea = life.getArea();
        life.setArea( ( nArea + 1 ) % 4 );
        nNewArea = life.getArea();                        
        self.log( "changing life area from %d to %d" % ( nArea, nNewArea ) );    
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_SetFreeze_ref" robot="" id="26" tooltip="Pause/Resume the Autonomous Life State." bitmap_expanded="1" plugin="" x="396" y="427">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onFreeze(self):
        self.life.pause( True );
        self.output_freezed() #~ activate output of the box

    def onInput_onUnFreeze(self):
        self.life.pause( False );
        self.output_unfreezed() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onFreeze" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onUnFreeze" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="output_freezed" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="output_unfreezed" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="23" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="Action" robot="" id="4" tooltip="Template_StateMachine&#x0A;v0.9&#x0A;A small state machine, the most simple and efficient. Developped by the Applications and Usage Team At Aldebaran." bitmap_expanded="1" plugin="" x="323" y="137">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# Template_StateMachine
# v0.9

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bRunning = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        self.bRunning = True;
        self.gotoAndStop(1)

    def onInput_onStop(self):
        if( self.bRunning ):
            self.bRunning = False;
            self.onStopped();
        pass
        
# Template_StateMachine - end
pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="Init" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="SayTextPrerender_ref" robot="" id="6" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.22 - altools" bitmap_expanded="1" plugin="" x="344" y="56">
                                                <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# SayTextPrerender
# v1.22 - altools
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
        if( p == None ):
            self.output_onStopSpeaking(); # on le fait ca ou pas ?
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        rLength = None;
        if( self.getParameter( "bWithLight" ) ):
            rLength = altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            rLength = altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared( rLength );
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking( rLength );
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ), bDirectPlay = self.getParameter( 'bDirectPlay' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );
                
# SayTextPrerender - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                <Output name="output_onPrepared" type="2" type_size="1" nature="2" inner="0" tooltip="The sound is prepared and ready to be launched.&#x0A;The length of the speak is outputted." id="5" />
                                                <Output name="output_onStartSpeaking" type="2" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak.&#x0A;The length of the speak is outputted." id="6" />
                                                <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking." id="7" />
                                                <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                <Parameter name="bDirectPlay" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="Launch the speak sound without a latency of 1-2 sec (directly) (automatically enabled when speaking with light)." id="12" />
                                            </Box>
                                            <Box name="Enter name here" robot="" id="10" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="55" y="28">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Autonomous life is running."
		sFrench = "Vie autonome en cours."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <english>Autonomous life is running.</english>
                                                    <french>Vie autonome en cours.</french>
                                                    <spanish></spanish>
                                                    <italian></italian>
                                                    <german></german>
                                                    <chinese></chinese>
                                                    <polish></polish>
                                                    <korean></korean>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="5" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="637" y="79">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="GotoReinit" robot="" id="7" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="473" y="77">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="ReInit" index="5" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="Text Edit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="278" y="363">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("This frame is used to simply reinit the 'choose...' behaviors (so he will detect/evaluate standing position, sleeping or ...)")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>This frame is used to simply reinit the &apos;choose...&apos; behaviors (so he will detect/evaluate standing position, sleeping or ...)</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="GotoWait" robot="" id="3" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="211" y="144">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(10)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>10</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="4" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="356" y="145">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: autonomouslifeaction: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="InformLifeStep_p" robot="" id="5" tooltip="Inform the ALLife module of the current step" bitmap_expanded="1" plugin="" x="161" y="6">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.life.updateStep( 0 );

    def onInput_onStart(self):
        self.life.updateStep( self.getParameter( 'nNumStep' ) );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nNumStep" inherits_from_parent="0" content_type="1" value="2" default_value="0" min="0" max="100" tooltip="The step numbers" id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="9" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="288" y="13">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Box name="FallManager" robot="" id="1" tooltip="Enable or disable the fall manager." bitmap_expanded="1" plugin="" x="176" y="217">
                                                <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        proxy = ALProxy( "ALMotion" )
        proxy.setMotionConfig([["ENABLE_FALL_MANAGEMENT_PROTECTION",False]])
        pass

    def onInput_onEnable(self):
        proxy = ALProxy( "ALMotion" )
        proxy.setMotionConfig([["ENABLE_FALL_MANAGEMENT_PROTECTION",True]])

    def onInput_onDisable(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onEnable" type="1" type_size="1" nature="1" inner="0" tooltip="Enable the fall manager." id="2" />
                                                <Input name="onDisable" type="1" type_size="1" nature="1" inner="0" tooltip="Disable the fall manager." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Disable the fall manager." id="4" />
                                            </Box>
                                            <Box name="IfDisableStiffResetBored" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="104" y="347">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( "ALLife" );
        self.info = ALProxy( "ALInfo" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isDisableStiffness() ):
            self.info.resetBoredom(); # to shnouff the watchdog
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Wait" index="10" bitmap="">
                                        <Diagram scale="88">
                                            <Box name="AutoAdjustSoundVolume_ref" robot="" id="3" tooltip="Adjust sound volume to ambiant sound" bitmap_expanded="1" plugin="" x="431" y="11">
                                                <bitmap>media/images/box/icons_appu/mental.png</bitmap>
                                                <bitmap>media/images/box/interaction/play_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );
        self.lastSoundVolume = -15;

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isEnabledAdjustSoundVolume() ):
            rAvgNoise = ALMemory.getData( "UsageNoiseExtractor/MediumAverageEnergy", 0 );
            # sound are from 40 (salle vide), to 400 (some music)
            # we want to use a table approximatively like: 50=>30, 75=>65 (tested in our office), 130=>100
            nNoiseMin = -30; # we put there a lower value than the reality to have a better ramping
            nNoiseMax = 240;
            nOutputMin = 30;
            nOutputMax = 100;
            nNewSound = ( ( rAvgNoise - nNoiseMin ) * (nOutputMax-nOutputMin) / (nNoiseMax-nNoiseMin) ) + nOutputMin;
#            nNewSound = int( math.log( 2+nNewSound / 100., 10 ) * 100 ); # using a log scale
            nNewSound = altools.limitRange( nNewSound, nOutputMin, nOutputMax );
            nNewSound = ( nNewSound * self.life.getSoundVolume() ) / 100;
            if( self.lastSoundVolume != nNewSound ):
                self.lastSoundVolume = nNewSound;
                print( "%s: nNewSound: %d" % ( self.boxName, nNewSound ) );
                altools.setMasterVolume( nNewSound );
        # if - end
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="InformLifeStep_ref" robot="" id="2" tooltip="Inform the ALLife module of the current step" bitmap_expanded="1" plugin="" x="158" y="7">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.life.updateStep( 0 );

    def onInput_onStart(self):
        self.life.updateStep( self.getParameter( 'nNumStep' ) );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nNumStep" inherits_from_parent="0" content_type="1" value="3" default_value="0" min="0" max="100" tooltip="The step numbers" id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="9" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="286" y="20">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Box name="ManageMove" robot="" id="8" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="137" y="374">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_nao_is_stabilized" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="ChooseToStandOrSit" robot="" id="1" tooltip="Choose to stand or not (sometimes)." bitmap_expanded="1" plugin="" x="70" y="90">
                                                                    <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="72">
                                                                                    <Box name="StandOrSit" robot="" id="1" tooltip="if excited and at randomly stand up!" bitmap_expanded="1" plugin="" x="84" y="139">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
#        info = ALProxy( "ALInfo" );
#        self.log( "time stand: %f; time sit: %f" % ( info.getDuration_Standing(), info.getDuration_Sitting() ) );
#        if( 
#                     ( random.random() > 0.2 and ( info.getBodyPosition() == "sitting" or  info.getBodyPosition() == "standing" ) )
#                or  False # behaviordata.isSleeping()
#            ):
#            self.output_dontmove();
#            return;
        if( behaviordata.isItTheMomentToStandup() ):
            self.output_stand();
        elif( not self.life.isDisableStiffness() ):
            self.output_sit();
        else:
            self.output_dontmove();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_dontmove" type="1" type_size="1" nature="2" inner="0" tooltip="don&apos;t change anything" id="3" />
                                                                                        <Output name="output_sit" type="1" type_size="1" nature="2" inner="0" tooltip="nao is calm" id="4" />
                                                                                        <Output name="output_stand" type="1" type_size="1" nature="2" inner="0" tooltip="super excité" id="5" />
                                                                                    </Box>
                                                                                    <Box name="AutonomousLife_GetArea_p" robot="" id="2" tooltip="Get the Autonomous Life Area info." bitmap_expanded="1" plugin="" x="103" y="15">
                                                                                        <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                                                        <bitmap>media/images/box/icons_appu/area.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.BIND_PYTHON( self.getName(),"dataChanged" );
        self.strVarName = "Autonomous/Life/Area";

    def onLoad(self):
        #~ puts code for box initialization here
        self.life = ALProxy( "ALLife" );

    def onUnload(self):
        pass

    def onInput_onStart(self):
        nValue = self.life.getArea();
        if( nValue == altools.const.area_stay_sit ):
            self.output_stay_sit();
        if( nValue == altools.const.area_stay_there ):
            self.output_stay_there();            
        elif( nValue == altools.const.area_limited ):
            self.output_limited();
        elif( nValue == altools.const.area_free ):
            self.output_free();
            
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_stay_sit" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_stay_there" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_limited" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_free" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="IsFeetFixed_ref" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="94" y="356">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isFeetFixed() ):
            self.output_yes( True );
        else:
            self.output_no( False );
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="IsOk" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="424" y="661">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if( p == 1 or ( altools.isArray( p ) and len(p) > 0 and p[0] == 1 ) ):
            self.output_yes();
        else:
            self.output_no();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="IsOk" robot="" id="9" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="513" y="206">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if( p == 1 or ( altools.isArray( p ) and len(p) > 0 and p[0] == 1 ) ):
            self.output_yes();
        else:
            self.output_no();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="WaitAndRetry_p" robot="" id="11" tooltip="Wait a little then retry a certain number of times" bitmap_expanded="1" plugin="" x="566" y="413">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.nNumTimes = 0;

    def onUnload(self):
        pass

    def onInput_onStart(self):
        time.sleep( self.getParameter( 'nTimeWait' ) );
        if( self.nNumTimes < self.getParameter( 'nNbrTries' ) ):
            self.nNumTimes += 1;
            self.output_onRetry();            
            return;
        self.onStopped(); #~ activate output of the box

    def onInput_onReset(self):
        self.nNumTimes = 0;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_onRetry" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Parameter name="nNbrTries" inherits_from_parent="0" content_type="1" value="5" default_value="3" min="0" max="100000" tooltip="number of times to retry" id="6" />
                                                                                        <Parameter name="nTimeWait" inherits_from_parent="0" content_type="2" value="2" default_value="0.02" min="0" max="1e+06" tooltip="Time to wait after each retry" id="7" />
                                                                                    </Box>
                                                                                    <Box name="PerhapsSleepingPosition" robot="" id="13" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="656" y="125">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.isSleeping() ):
            rDiff = altools.PoseLibrary.comparePosition( altools.PoseLibrary.getPosition( 'Sitting' ), ['Head'] );
            self.log( "rDiff: %f" % rDiff );
            if( rDiff > 0.03 ):
                self.log( "%s: going to sleep position..." % self.boxName );
                altools.assumeStiffness( 'Body', 0.5 );
                altools.PoseLibrary.setPosition( altools.PoseLibrary.getPosition( 'Sitting' ), 1.5 );
                ALMotion.angleInterpolation( 'Head', [0.3,0.8], 3.0, True );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="WaitAndRetry_p" robot="" id="12" tooltip="Wait a little then retry a certain number of times" bitmap_expanded="1" plugin="" x="526" y="830">
                                                                                        <bitmap>media/images/box/loop.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        self.nNumTimes = 0;

    def onUnload(self):
        pass

    def onInput_onStart(self):
        time.sleep( self.getParameter( 'nTimeWait' ) );
        if( self.nNumTimes < self.getParameter( 'nNbrTries' ) ):
            self.nNumTimes += 1;
            self.output_onRetry();            
            return;
        self.onStopped(); #~ activate output of the box

    def onInput_onReset(self):
        self.nNumTimes = 0;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_onRetry" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Parameter name="nNbrTries" inherits_from_parent="0" content_type="1" value="5" default_value="3" min="0" max="100000" tooltip="number of times to retry" id="6" />
                                                                                        <Parameter name="nTimeWait" inherits_from_parent="0" content_type="2" value="2" default_value="0.02" min="0" max="1e+06" tooltip="Time to wait after each retry" id="7" />
                                                                                    </Box>
                                                                                    <Box name="Sitting" robot="" id="3" tooltip="# NaoLibrary-Launcher&#x0A;# v 1.02&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal parameters and output value." bitmap_expanded="1" plugin="" x="359" y="210">
                                                                                        <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# NaoLibrary-Launcher
#  v 1.02
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        self.bStarted = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart( self, inputData ):
        strBeName = self.boxName;
        self.onStartBehavior( strBeName, inputData );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName ):
        self.onStartBehavior( strBeName, None );    
        
    def onStartBehavior( self, strBeName, inputData ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        self.log( "%s: starting behavior: '%s'" % (self.boxName, self.strBehaviorName ) );
        if( self.bStarted ):
            strMsg = "%s: starting behavior: '%s' => already started => nothing" % (self.boxName, self.strBehaviorName );
            self.log( strMsg );
            print( strMsg );
            return;

        self.bStarted = True;

        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );
        
        # get parameters from box parameters
        listBoxParams = self.getParametersList();
        allParams = [];
        for param_name in listBoxParams:
            if( param_name.find( "NaoLibrary-Launcher" ) == -1 ):
                allParams.append( [param_name, self.getParameter( param_name ) ] );
        
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), allParams );
        
        # add value from box input data
        ALMemory.insertData( naolibrary.xarLoader.getVarName_InputData( self.strBehaviorName ), inputData );        
        
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName, rTimeOutInSec = self.getParameter("NaoLibrary-Launcher_timeout") );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.bStarted = False;
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.bStarted = False;        
        self.onStopped();

    def onInput_onStop(self):
        if( self.bStarted ):
            strBeName = self.strBehaviorName;
            self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
            naolibrary.xarLoader.stop( self.strBehaviorName );
            self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );
# NaoLibrary-Launcher - end
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="6" />
                                                                                        <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="7" />
                                                                                        <Parameter name="NaoLibrary-Launcher_timeout" inherits_from_parent="0" content_type="2" value="30" default_value="3600" min="0" max="1e+17" tooltip="A timeout value for executing the underlying behavior.&#x0A;&#x0A;(value in seconds)" id="8" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="100" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Standing" robot="" id="5" tooltip="# NaoLibrary-Launcher&#x0A;# v 1.02&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal parameters and output value." bitmap_expanded="1" plugin="" x="284" y="670">
                                                                                        <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# NaoLibrary-Launcher
#  v 1.02
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        self.bStarted = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart( self, inputData ):
        strBeName = self.boxName;
        self.onStartBehavior( strBeName, inputData );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName ):
        self.onStartBehavior( strBeName, None );    
        
    def onStartBehavior( self, strBeName, inputData ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        self.log( "%s: starting behavior: '%s'" % (self.boxName, self.strBehaviorName ) );
        if( self.bStarted ):
            strMsg = "%s: starting behavior: '%s' => already started => nothing" % (self.boxName, self.strBehaviorName );
            self.log( strMsg );
            print( strMsg );
            return;

        self.bStarted = True;

        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );
        
        # get parameters from box parameters
        listBoxParams = self.getParametersList();
        allParams = [];
        for param_name in listBoxParams:
            if( param_name.find( "NaoLibrary-Launcher" ) == -1 ):
                allParams.append( [param_name, self.getParameter( param_name ) ] );
        
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), allParams );
        
        # add value from box input data
        ALMemory.insertData( naolibrary.xarLoader.getVarName_InputData( self.strBehaviorName ), inputData );        
        
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName, rTimeOutInSec = self.getParameter("NaoLibrary-Launcher_timeout") );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.bStarted = False;
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.bStarted = False;        
        self.onStopped();

    def onInput_onStop(self):
        if( self.bStarted ):
            strBeName = self.strBehaviorName;
            self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
            naolibrary.xarLoader.stop( self.strBehaviorName );
            self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );
# NaoLibrary-Launcher - end
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="6" />
                                                                                        <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="7" />
                                                                                        <Parameter name="NaoLibrary-Launcher_timeout" inherits_from_parent="0" content_type="2" value="30" default_value="3600" min="0" max="1e+17" tooltip="A timeout value for executing the underlying behavior.&#x0A;&#x0A;(value in seconds)" id="8" />
                                                                                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="100" tooltip="" id="9" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="13" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="9" indexofoutput="3" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="12" indexofoutput="4" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="12" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="7" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="7" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="stiffhead" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="395" y="181">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( not behaviordata.isSleeping() ):
            rBodyStiffness = 0.3;
        else:
            rBodyStiffness = 0.0;
        rTime = 0.2;    
        ALMotion.stiffnessInterpolation( "Head", rBodyStiffness, rTime );
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="HandleBody" robot="" id="11" tooltip="set things to body" bitmap_expanded="1" plugin="" x="217" y="91">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="stiffbody" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="101" y="73">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( not self.life.isDisableStiffness() ):
            if( not behaviordata.isSleeping() ):
                rBodyStiffness = 0.6;
                altools.assumeStiffness( 'LArm', rBodyStiffness, True );
                altools.assumeStiffness( 'RArm', rBodyStiffness, True );
                altools.assumeStiffness( 'LLeg', rBodyStiffness, True );
                altools.assumeStiffness( 'RLeg', rBodyStiffness );                
                if( self.life.isFeetFixed() and behaviordata.branchOnNaoPosition() == 1 ):
                    ALMotion.setStiffnesses( ['LAnklePitch', 'LKneePitch'], 0. );
            else:
                rBodyStiffness = 0.; # 0.05 for not falling
                altools.assumeStiffnessBelow( 'LArm', rBodyStiffness, True );
                altools.assumeStiffnessBelow( 'RArm', rBodyStiffness, True );
                altools.assumeStiffnessBelow( 'LLeg', rBodyStiffness, True );
                altools.assumeStiffnessBelow( 'RLeg', rBodyStiffness );            
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="HandleArms" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="326" y="87">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="IsStanding_p" robot="" id="1" tooltip="Is nao currenlty standing" bitmap_expanded="1" plugin="" x="194" y="104">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):

        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes()
        else:
            self.output_no()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="AssumeBothArmsAreInFrontOfNao_Sitting_p" robot="" id="2" tooltip="Test each arms and move it in front of nao but only if required! - sitting version" bitmap_expanded="1" plugin="" x="395" y="215">
                                                                                                            <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                                        <Diagram scale="100">
                                                                                                                            <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                                                                </script>
                                                                                                                                <pluginContent>
                                                                                                                                    <text>LArm</text>
                                                                                                                                </pluginContent>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                                            </Box>
                                                                                                                            <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                                                                </script>
                                                                                                                                <pluginContent>
                                                                                                                                    <text>RArm</text>
                                                                                                                                </pluginContent>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                                            </Box>
                                                                                                                            <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="586" y="40">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                                                <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="676" y="175">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                                                <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                                                <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                                            </Box>
                                                                                                                            <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                                                <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                                    <watches />
                                                                                                                                    <ActuatorList>
                                                                                                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-24.7879" />
                                                                                                                                            <Key frame="25" value="31.4628" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="94.657" />
                                                                                                                                            <Key frame="25" value="0" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="38.3184" />
                                                                                                                                            <Key frame="25" value="-42.2783" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-0.261271" />
                                                                                                                                            <Key frame="25" value="-56.5999" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                                                <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                                    <watches />
                                                                                                                                    <ActuatorList>
                                                                                                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-24.7879" />
                                                                                                                                            <Key frame="25" value="31.4628" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-94.657" />
                                                                                                                                            <Key frame="25" value="0" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-38.3184" />
                                                                                                                                            <Key frame="25" value="42.2783" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="0.261271" />
                                                                                                                                            <Key frame="25" value="56.5999" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                                                                <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                                                                <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                                                                <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                                                            <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                                                            <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                                                            <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                                <ActuatorList />
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="AssumeBothArmsAreInFrontOfNao_Standing_p" robot="" id="3" tooltip="Test each arms and move it in front of nao but only if required! - standing version" bitmap_expanded="1" plugin="" x="396" y="92">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                                        <Diagram scale="100">
                                                                                                                            <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                                                                </script>
                                                                                                                                <pluginContent>
                                                                                                                                    <text>LArm</text>
                                                                                                                                </pluginContent>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                                            </Box>
                                                                                                                            <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                                                                </script>
                                                                                                                                <pluginContent>
                                                                                                                                    <text>RArm</text>
                                                                                                                                </pluginContent>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                                            </Box>
                                                                                                                            <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="585" y="53">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                                                <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                                                                <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                                                                <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="678" y="177">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                                                <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                                                                <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                                                                <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                                                <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                                    <watches />
                                                                                                                                    <ActuatorList>
                                                                                                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-24.7879" />
                                                                                                                                            <Key frame="25" value="85" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="94.657" />
                                                                                                                                            <Key frame="25" value="0" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="38.3184" />
                                                                                                                                            <Key frame="25" value="-42.2783" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-0.261271" />
                                                                                                                                            <Key frame="25" value="-56.5999" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                                                <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                                    <watches />
                                                                                                                                    <ActuatorList>
                                                                                                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-24.7879" />
                                                                                                                                            <Key frame="25" value="67" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-94.657" />
                                                                                                                                            <Key frame="25" value="0" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="-38.3184" />
                                                                                                                                            <Key frame="25" value="42.2783" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                                            <Key frame="15" value="0.261271" />
                                                                                                                                            <Key frame="25" value="56.5999" />
                                                                                                                                        </ActuatorCurve>
                                                                                                                                    </ActuatorList>
                                                                                                                                </Timeline>
                                                                                                                            </Box>
                                                                                                                            <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                                                <script language="4">
                                                                                                                                    <content>
                                                                                                                                        <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                                                                </script>
                                                                                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                                                <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                                                                <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                                                                <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                                                                <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                                                            </Box>
                                                                                                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                                                            <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                                            <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                                                            <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                                                                        </Diagram>
                                                                                                                    </BehaviorKeyframe>
                                                                                                                </BehaviorLayer>
                                                                                                                <ActuatorList />
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="AutonomousLife_HeadBehavior_ref" robot="" id="12" tooltip="The living head mouvement" bitmap_expanded="1" plugin="" x="563" y="180">
                                                                    <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                                    <bitmap>media/images/box/icons_appu/head_manipulation.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onStart(self):
        self.log( "%s: start" % self.boxName );
        self.gotoAndStop(1)
        pass

    def onInput_onStop(self):
        self.log( "%s: stop" % self.boxName );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="random and focus" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="42" y="537">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("On va mettre random et focus dans une seule frame histoire de ne pas rater l'evenement qui a fait changer de frame")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>On va mettre random et focus dans une seule frame histoire de ne pas rater l&apos;evenement qui a fait changer de frame</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="66" y="405">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("mood_state")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>mood_state</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="EyesDimBlue_ref" robot="" id="3" tooltip="Eyes slightly lighten" bitmap_expanded="1" plugin="" x="103" y="29">
                                                                                        <bitmap>media/images/box/icons_appu/LED_blue.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        # efface les effets d'une précédente réaction
        ALLeds.post.fadeRGB( 'FaceLedsTop', 0x0, 0.5 );
        ALLeds.fadeRGB( 'FaceLedsBottom', 0x0, 0.5 );
        if( not behaviordata.isDeepSleeping() ):
            ALLeds.post.fadeRGB( 'FaceLedsExternal', 0x000080, 1.0 );
            ALLeds.fadeRGB( 'FaceLedsInternal', 0x000080, 1.0 );            
        # non en fait c'est chiant de mettre du bleu a chaque fois, pour quand il dort...
#        ALLeds.setIntensity( 'FaceLeds', 0 );
#        nColor = 0x101040;
#        ALLeds.post.fadeRGB( 'FaceLedsExternal', nColor, 0.1 );
#        ALLeds.fadeRGB( 'FaceLedsInternal', nColor, 0.1 );        
        self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="LookAtVariable_ref" robot="" id="4" tooltip="Register to some variable, and goto its position every time it change. The recorded variable has to be of the form [rAbsolutePosYaw, rAbsolutePosPitch, nSpeedInPercent (if no speed use default speed as in parameters)]" bitmap_expanded="1" plugin="" x="149" y="205">
                                                                                        <bitmap>media/images/box/icons_appu/find_guess.png</bitmap>
                                                                                        <bitmap>media/images/box/icons_appu/icon_tete_nao.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
import mutex
import time
import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.motionProxy = ALProxy('ALMotion')
        self.strDataName = self.getParameter( "strVarName" ); # eg: "Device/SubDeviceList/HeadYaw/Position/Sensor/Value" or extracted_data/head_focus_position
        self.nSpeedDefault = self.getParameter( "nDefaultSpeed" );
        self.mutex = mutex.mutex();
        
        ALMemory.raiseMicroEvent( self.strDataName, [0,0,0,0,0] ); # post a dummy value just to not have an error at subscribtion.
        
    def onLoad(self):
        self.nCurrentMoveID = -1;
        self.bRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.myDataChanged( "", ALMemory.getData( self.strDataName, 0 ), "" );    # lance un coup sur le dernier focus "au cas ou" 
        ALMemory.subscribeToMicroEvent( self.strDataName, self.getName(), "", "myDataChanged" );
#        ALMemory.subscribeOnDataSetTimePolicy( self.strDataName, self.getName(), 0 );        # optionnal: force every refresh of the value to be printed
        self.bRunning = True;


    def onInput_onStop(self):
        self.bRunning = False;
        ALMemory.unsubscribeToMicroEvent( self.strDataName, self.getName() );
        if( self.nCurrentMoveID != -1 ):
            self.motionProxy.stop( self.nCurrentMoveID );
            self.nCurrentMoveID = -1;
        self.onStopped();

    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        if( not self.bRunning ):
            return;
        # stop previous
        if( self.nCurrentMoveID != -1 ):
                self.motionProxy.stop( self.nCurrentMoveID );
        # wait previous is finished
        while( self.mutex.testandset() == False ):
            time.sleep( 0.02 );

        self.output_startMoving(); # prevent others than we are focusing on something
        
        rExcitement = behaviordata.extractedData.getValue( "excitement" );
        nSpeedPercent = int( altools.limitRange( rExcitement * pValue[2] * 2.0, 2, 90 ) ); # 2.0: pour avoir en moyenne comme avant        
        self.log( "look at: move: (%f,%f) pValue: %f; excite: %f, speedpercent: %d" % ( pValue[0], pValue[1], pValue[2], rExcitement, nSpeedPercent ) );
        # des fois ajoute un mouvement random
        if( random.random() > 0.995 ):
            print( "%s: Add a small random mouvement (up)" % self.boxName );
            pValue[0] = random.random()-0.5;
            pValue[1] = random.random()-0.8; # on veut qu'il regarde plus souvent vers le haut (dans le doute)
        self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed( 'Head', [pValue[0], pValue[1]-0.08], nSpeedPercent/100.); # -0.15: décalage caméra/oeil
        if( nSpeedPercent > 30. and random.random() > 0.85 ):
            self.output_ShouldProduceNoise();
        self.motionProxy.wait( self.nCurrentMoveID, 0 )
        self.nCurrentMoveID = -1;
        
        self.mutex.unlock();
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_startMoving" type="1" type_size="1" nature="2" inner="0" tooltip="every time we start moving, trigger!" id="5" />
                                                                                        <Output name="output_ShouldProduceNoise" type="1" type_size="1" nature="2" inner="0" tooltip="at some time, if excited, should produce some noise" id="6" />
                                                                                        <Parameter name="strVarName" inherits_from_parent="0" content_type="3" value="extracted_data/head_focus_position" default_value="" custom_choice="0" tooltip="The name of the variable to subscribe at it" id="7" />
                                                                                        <Parameter name="nDefaultSpeed" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="1" max="100" tooltip="speed in % if no speed specified" id="8" />
                                                                                    </Box>
                                                                                    <Box name="EyesRandomMedusa_p - w excitement" robot="" id="5" tooltip="A smooth and slow leds animation" bitmap_expanded="1" plugin="" x="247" y="31">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
import altools
import behaviordata
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nFadeID = -1;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;
        if( behaviordata.isDeepSleeping() ):
            ALLeds.fadeRGB( 'FaceLeds', 0x0, 1.0 );
            return;
            
        anListLedPossible = [];
        if( self.getParameter( 'bUseTopLeds' ) ):
            anListLedPossible.extend( [0,7] );
        if( self.getParameter( 'bUseBottomLeds' ) ):
            anListLedPossible.extend( [3,4] );
        if( self.getParameter( 'bUseExternalLeds' ) ):
            anListLedPossible.extend( [5,6] );
        if( self.getParameter( 'bUseInternalLeds' ) ):
            anListLedPossible.extend( [1,2] );
        if( len( anListLedPossible ) < 1 ):
            self.log( self.boxName + ": ERROR: no possible led, see parameters bUseXxxLeds => nothing" );            
            return;
        self.log( "anListLedPossible: " + str( anListLedPossible ) );

        self.bIsRunning = True;
        self.bMustStop = False;

        #aCol = ["Red", "Blue", "Yellow", "Green", "White", "Purple", "Orange", "vert kaki"]
        aCol = [0xff2010, 0x0000ff, 0xffff00, 0x00ff00, 0xffffff, 0xee00ff, 0xff8800, 0x72a7a1]
        
        for i in range( len( aCol ) ):
            aCol[i] = altools.darkenColor( aCol[i], self.getParameter( 'rLuminosity' ) );

        nTimeMinBase = 1;
        nTimeMaxBase = 3;
        nRandomColor = 0;

        while( not self.bMustStop ):
            # choose a led quarter.
            nRandomLedsNumber = anListLedPossible[ random.randint( 0, len(anListLedPossible) - 1 )  ];
            nRandomColor = random.randint( 0, len( aCol ) - 1 );
            rExcitement = behaviordata.extractedData.getValue( "excitement" );
            rRatioExcitement = altools.limitRange( 5*(1. - rExcitement), 0.15, 5 );
            rTimeMin = nTimeMinBase * rRatioExcitement;
            rTimeMax = nTimeMaxBase * rRatioExcitement;
            rRandomDuration = random.random() * rTimeMax + rTimeMin;
#            rRandomWait = ( random.random() * rTimeMax + rTimeMin ) / 4.;
#            self.log( "====================> randdur: %f randwait: %f" % ( rRandomDuration, rRandomWait) );
            self.nFadeID = ALLeds.post.fadeRGB( "FaceLed"+str(nRandomLedsNumber), aCol[nRandomColor], rRandomDuration )
            ALLeds.wait( self.nFadeID, 0 );
            self.nFadeID = -1;
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nFadeID != -1 ):
            try:
                ALLeds.stop( self.nFadeID );
            except:
                pass # cas ou la méthode a fini entre le test et le stop]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="rLuminosity" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.5" min="0" max="1" tooltip="Global luminosity of the lights" id="5" />
                                                                                        <Parameter name="bUseTopLeds" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Use this quarter to make animation (don&apos;t disable all quarter !)" id="6" />
                                                                                        <Parameter name="bUseBottomLeds" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Use this quarter to make animation (don&apos;t disable all quarter !)" id="7" />
                                                                                        <Parameter name="bUseExternalLeds" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use this quarter to make animation (don&apos;t disable all quarter !)" id="8" />
                                                                                        <Parameter name="bUseInternalLeds" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use this quarter to make animation (don&apos;t disable all quarter !)" id="9" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_RegisterToStringValue_p - modif get new event" robot="" id="6" tooltip="Subscribe to a value to know when data has changed" bitmap_expanded="1" plugin="" x="250" y="416">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.strRegisteredDataName = "";
        self.BIND_PYTHON( self.getName(),"myDataChanged" );

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onDataName(self, pstrDataName):
        self.onInput_onStop();
        self.strRegisteredDataName = pstrDataName;
        strALMemoryVarName = behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName;
        ALMemory.subscribeToMicroEvent( strALMemoryVarName, self.getName(), "", "myDataChanged" );
        self.myDataChanged( strALMemoryVarName, ALMemory.getData(strALMemoryVarName, 0 ), ""); # launch one event
       
    def onInput_onStop(self):
        if( self.strRegisteredDataName != "" ):
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName() );
            self.strRegisteredDataName = "";
 
    def myDataChanged(self, pDataName, pValue, pMessage):
        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        self.output_Value( str( pValue ) );
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDataName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_Value" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="PlayEtonnement" robot="" id="7" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="295" y="256">
                                                                                        <bitmap>media/images/box/interaction/play_sound.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nNumSound = random.randint( 1, 12 );
        altools.playSound( 'eto%d.wav' % nNumSound, bDirectPlay = True );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Dispatcher" robot="" id="8" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" bitmap_expanded="1" plugin="dispatcher_plugin" x="364" y="407">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("scared")):
			self.output_1(p)
		elif(p == ("happy")):
			self.output_2(p)
		else:
			self.onDefault()]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <keywords>
                                                                                                <keyword>&quot;scared&quot;</keyword>
                                                                                                <keyword>&quot;happy&quot;</keyword>
                                                                                                <keyword></keyword>
                                                                                            </keywords>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="5" />
                                                                                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="6" />
                                                                                    </Box>
                                                                                    <Box name="HeadRandomStoppable w excite" robot="" id="9" tooltip="Random head behaviour - un nouveau trop sympa et corrigé ! - avec une très bonne réactivité sur le stop." bitmap_expanded="1" plugin="" x="411" y="22">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.chain = "Head"
        self.duration = 0.8 # 1 second
        self.motionProxy = ALProxy('ALMotion')
        # Put adequate max
        self.nMaxPitch = self.getParameter( 'rPitchRangeMax' );
        self.nMaxYaw = self.getParameter( 'rYawRangeMax' );
        self.nPitchOffset = self.getParameter( 'rPitchOffset' ); # direction of look
        self.nSpeedMovementBase = self.getParameter( 'nSpeedMovement' ); # direction of look
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nCurrentMoveID = -1;
        self.nCurrentSleepID = -1;
        self.life = ALProxy( "ALLife" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
    
    def onUnload(self):
        self.onInput_onStop()
    
    def onInput_onStart(self):
        self.log( "%s: on start - begin" % self.boxName );
        if( self.bIsRunning ):
            self.log( "%s: on start - already started" % self.boxName );
            return;
        self.bIsRunning = True;
        self.bMustStop = False;
        nMaxWaitBase = int( self.getParameter( "nMaxWait" ) );
        while True:
            if self.bMustStop:
                break;
            nValPitch = random.uniform( -self.nMaxPitch , self.nMaxPitch  );
            nValYaw = random.uniform( -self.nMaxYaw , self.nMaxYaw );
            angles = [nValYaw,nValPitch+self.nPitchOffset] # add an offset on pitch
            rExcitement = behaviordata.extractedData.getValue( "excitement" );
            nSpeedMovement = int( altools.limitRange( self.nSpeedMovementBase * 2.0 * rExcitement, 1, 20 ) );
            if( rExcitement > 0.1 ):
                nMaxWait = int( (1. - rExcitement) * nMaxWaitBase );
            else:
                nMaxWait = nMaxWaitBase;
            #if nValPitch*nValPitch + nValYaw*nValYaw > 0.04:
            self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed(self.chain, angles, nSpeedMovement/100.);
            self.motionProxy.wait( self.nCurrentMoveID, 0 )
            self.nCurrentMoveID = -1;
            if( not self.bMustStop ):
                self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                self.life.wait( self.nCurrentSleepID, 0 )
                self.nCurrentSleepID = -1;
            if( random.uniform( 0, 1.0 ) > 0.5 and not self.bMustStop ):
                # often add a return to center
                self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed( self.chain, [0,self.nPitchOffset], random.randint( 1, nSpeedMovement * 2 )/100. ); # la vitesse du return to center est aléatoire, et peut etre plus rapide
                self.motionProxy.wait( self.nCurrentMoveID, 0 )
                self.nCurrentMoveID = -1;
                if( not self.bMustStop ):                
                    self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                    self.life.wait( self.nCurrentSleepID, 0 )
                    self.nCurrentSleepID = -1;    
            # if random - end
        # while - end
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 
    # onInput_onStart - end
    
    def onInput_onStop(self):
            if( self.bIsRunning ):
                self.bMustStop = True;
            if( self.nCurrentMoveID != -1 ):
                try:
                    self.motionProxy.stop( self.nCurrentMoveID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentMoveID = -1;
            if( self.nCurrentSleepID != -1 ):
                try:
                    self.life.stopCall( self.nCurrentSleepID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentSleepID = -1;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="nMaxWait" inherits_from_parent="0" content_type="1" value="6000" default_value="3000" min="1" max="100000000" tooltip="Maximum milliseconds of wait between two movement" id="5" />
                                                                                        <Parameter name="nSpeedMovement" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="speed movement in %" id="6" />
                                                                                        <Parameter name="rPitchOffset" inherits_from_parent="0" content_type="2" value="-0.2" default_value="-0.2" min="-2" max="2" tooltip="Offset to add to the barycentre of all position (to look around top or ...)" id="7" />
                                                                                        <Parameter name="rPitchRangeMax" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="2" tooltip="max of movement range" id="8" />
                                                                                        <Parameter name="rYawRangeMax" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="2" tooltip="max of movement range" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Wait" robot="" id="10" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="430" y="193">
                                                                                        <bitmap>media/images/box/wait.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                                        <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                                    </Box>
                                                                                    <Box name="HeadRandomStoppable_p" robot="" id="11" tooltip="Random head behaviour - un nouveau trop sympa et corrigé ! - avec une très bonne réactivité sur le stop." bitmap_expanded="1" plugin="" x="553" y="27">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.chain = "Head"
        self.duration = 0.8 # 1 second
        self.motionProxy = ALProxy('ALMotion')
        # Put adequate max
        self.nMaxPitch = self.getParameter( 'rPitchRangeMax' );
        self.nMaxYaw = self.getParameter( 'rYawRangeMax' );
        self.nPitchOffset = self.getParameter( 'rPitchOffset' ); # direction of look
        self.nSpeedMovement = self.getParameter( 'nSpeedMovement' ); # direction of look
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nCurrentMoveID = -1;
        self.nCurrentSleepID = -1;
        self.life = ALProxy( "ALLife" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
    
    def onUnload(self):
        self.onInput_onStop()
    
    def onInput_onStart(self):
        self.log( "%s: on start - begin" % self.boxName );
        if( self.bIsRunning ):
            self.log( "%s: on start - already started" % self.boxName );
            return;
        self.bIsRunning = True;
        self.bMustStop = False;
        nMaxWait = self.getParameter( "nMaxWait" );
        while True:
            if self.bMustStop:
                break;
            nValPitch = random.uniform( -self.nMaxPitch , self.nMaxPitch  );
            nValYaw = random.uniform( -self.nMaxYaw , self.nMaxYaw );
            angles = [nValYaw,nValPitch+self.nPitchOffset] # add an offset on pitch
            #if nValPitch*nValPitch + nValYaw*nValYaw > 0.04:
            self.nCurrentMoveID = self.motionProxy.post.gotoChainAnglesWithSpeed(self.chain, angles, self.nSpeedMovement, 0);
            self.motionProxy.wait( self.nCurrentMoveID, 0 )
            self.nCurrentMoveID = -1;
            if( not self.bMustStop ):
                self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                self.life.wait( self.nCurrentSleepID, 0 )
                self.nCurrentSleepID = -1;
            if( random.uniform( 0, 1.0 ) > 0.5 and not self.bMustStop ):
                # often add a return to center
                self.nCurrentMoveID = self.motionProxy.post.gotoChainAnglesWithSpeed( self.chain, [0,self.nPitchOffset], random.randint( 1, self.nSpeedMovement * 2 ) , 0 ); # la vitesse du return to center est aléatoire, et peut etre plus rapide
                self.motionProxy.wait( self.nCurrentMoveID, 0 )
                self.nCurrentMoveID = -1;
                if( not self.bMustStop ):                
                    self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                    self.life.wait( self.nCurrentSleepID, 0 )
                    self.nCurrentSleepID = -1;    
            # if random - end
        # while - end
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 
    # onInput_onStart - end
    
    def onInput_onStop(self):
            if( self.bIsRunning ):
                self.bMustStop = True;
            if( self.nCurrentMoveID != -1 ):
                try:
                    self.motionProxy.stop( self.nCurrentMoveID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentMoveID = -1;
            if( self.nCurrentSleepID != -1 ):
                try:
                    self.life.stopCall( self.nCurrentSleepID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentSleepID = -1;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="nMaxWait" inherits_from_parent="0" content_type="1" value="6000" default_value="3000" min="1" max="100000000" tooltip="Maximum milliseconds of wait between two movement" id="5" />
                                                                                        <Parameter name="nSpeedMovement" inherits_from_parent="0" content_type="1" value="2" default_value="2" min="1" max="100" tooltip="speed movement in %" id="6" />
                                                                                        <Parameter name="rPitchOffset" inherits_from_parent="0" content_type="2" value="-0.2" default_value="-0.2" min="-2" max="2" tooltip="Offset to add to the barycentre of all position (to look around top or ...)" id="7" />
                                                                                        <Parameter name="rPitchRangeMax" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="2" tooltip="max of movement range" id="8" />
                                                                                        <Parameter name="rYawRangeMax" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="2" tooltip="max of movement range" id="9" />
                                                                                    </Box>
                                                                                    <Box name="GotoScared" robot="" id="12" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="589" y="409">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(25)]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <number>25</number>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="GotoHappy" robot="" id="13" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="592" y="486">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(50)]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <number>50</number>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="gotoAndStop" robot="" id="14" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="738" y="396">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="3" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="9" indexofinput="3" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="10" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="13" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="13" indexofoutput="3" />
                                                                                    <Link inputowner="12" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="scared" index="25" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="73" y="359">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("mood_state")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>mood_state</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="Light_SurprisedEyes2_ref" robot="" id="2" tooltip="Set An Animated Gaze Which Expresses Surprise (fast stop)" bitmap_expanded="1" plugin="" x="378" y="231">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import behaviordata
import random
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );
    
    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;
    
    if( not behaviordata.isSleepy() and random.randint( 0,100 ) > 70 ):
        nNumSound = random.randint( 1, 3 );
        altools.playSound( 'surprise%d.wav' % nNumSound, bDirectPlay = True );
    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0x000000, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0xffff00, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0x000000, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0xffff00, rDuration );
    
    
    while( not self.bMustStop ):
        rTime=0.2
        ALLeds.post.fadeRGB( "FaceLed7", 0x000000, rTime );
        ALLeds.fadeRGB( "FaceLed4", 0x000000, rTime );
        if( self.bMustStop ):
            break;       
        ALLeds.post.fadeRGB( "FaceLed7", 0xffff00, rTime );      
        ALLeds.fadeRGB( "FaceLed4", 0xffff00, rTime );

    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_RegisterToStringValue_p" robot="" id="3" tooltip="Subscribe to a value to know when data has changed" bitmap_expanded="1" plugin="" x="244" y="437">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.strRegisteredDataName = "";
        self.BIND_PYTHON( self.getName(),"myDataChanged" );

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onDataName(self, pstrDataName):
        self.onInput_onStop();
        self.strRegisteredDataName = pstrDataName;
        ALMemory.subscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName(), "", "myDataChanged" );
       
    def onInput_onStop(self):
        if( self.strRegisteredDataName != "" ):
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName() );
            self.strRegisteredDataName = "";
 
    def myDataChanged(self, pDataName, pValue, pMessage):
        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        self.output_Value( str( pValue ) );
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDataName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_Value" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="HeadRandomStoppable_p" robot="" id="4" tooltip="Random head behaviour - un nouveau trop sympa et corrigé ! - avec une très bonne réactivité sur le stop." bitmap_expanded="1" plugin="" x="376" y="136">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.chain = "Head"
        self.duration = 0.8 # 1 second
        self.motionProxy = ALProxy('ALMotion')
        # Put adequate max
        self.nMaxPitch = self.getParameter( 'rPitchRangeMax' );
        self.nMaxYaw = self.getParameter( 'rYawRangeMax' );
        self.nPitchOffset = self.getParameter( 'rPitchOffset' ); # direction of look
        self.nSpeedMovement = self.getParameter( 'nSpeedMovement' ); # direction of look
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nCurrentMoveID = -1;
        self.nCurrentSleepID = -1;
        self.life = ALProxy( "ALLife" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
    
    def onUnload(self):
        self.onInput_onStop()
    
    def onInput_onStart(self):
        self.log( "%s: on start - begin" % self.boxName );
        if( self.bIsRunning ):
            self.log( "%s: on start - already started" % self.boxName );
            return;
        self.bIsRunning = True;
        self.bMustStop = False;
        nMaxWait = self.getParameter( "nMaxWait" );
        while True:
            if self.bMustStop:
                break;
            nValPitch = random.uniform( -self.nMaxPitch , self.nMaxPitch  );
            nValYaw = random.uniform( -self.nMaxYaw , self.nMaxYaw );
            angles = [nValYaw,nValPitch+self.nPitchOffset] # add an offset on pitch
            #if nValPitch*nValPitch + nValYaw*nValYaw > 0.04:
            self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed(self.chain, angles, self.nSpeedMovement / 100. );
            self.motionProxy.wait( self.nCurrentMoveID, 0 )
            self.nCurrentMoveID = -1;
            if( not self.bMustStop ):
                self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                self.life.wait( self.nCurrentSleepID, 0 )
                self.nCurrentSleepID = -1;
            if( random.uniform( 0, 1.0 ) > 0.5 and not self.bMustStop ):
                # often add a return to center
                self.nCurrentMoveID = self.motionProxy.post.angleInterpolationWithSpeed( self.chain, [0,self.nPitchOffset], random.randint( 1, self.nSpeedMovement * 2 )  / 100. ); # la vitesse du return to center est aléatoire, et peut etre plus rapide
                self.motionProxy.wait( self.nCurrentMoveID, 0 )
                self.nCurrentMoveID = -1;
                if( not self.bMustStop ):                
                    self.nCurrentSleepID = self.life.post.sleep( 500 + random.randint(0,nMaxWait) )
                    self.life.wait( self.nCurrentSleepID, 0 )
                    self.nCurrentSleepID = -1;    
            # if random - end
        # while - end
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 
    # onInput_onStart - end
    
    def onInput_onStop(self):
            if( self.bIsRunning ):
                self.bMustStop = True;
            if( self.nCurrentMoveID != -1 ):
                try:
                    self.motionProxy.stop( self.nCurrentMoveID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentMoveID = -1;
            if( self.nCurrentSleepID != -1 ):
                try:
                    self.life.stopCall( self.nCurrentSleepID );
                except:
                    pass # cas ou la méthode a fini entre le test et le stop
                self.nCurrentSleepID = -1;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="nMaxWait" inherits_from_parent="0" content_type="1" value="1000" default_value="3000" min="1" max="100000000" tooltip="Maximum milliseconds of wait between two movement" id="5" />
                                                                                        <Parameter name="nSpeedMovement" inherits_from_parent="0" content_type="1" value="50" default_value="2" min="1" max="100" tooltip="speed movement in %" id="6" />
                                                                                        <Parameter name="rPitchOffset" inherits_from_parent="0" content_type="2" value="-0.2" default_value="-0.2" min="-2" max="2" tooltip="Offset to add to the barycentre of all position (to look around top or ...)" id="7" />
                                                                                        <Parameter name="rPitchRangeMax" inherits_from_parent="0" content_type="2" value="1.1" default_value="0.3" min="0" max="2" tooltip="max of movement range" id="8" />
                                                                                        <Parameter name="rYawRangeMax" inherits_from_parent="0" content_type="2" value="1.2" default_value="1" min="0" max="2" tooltip="max of movement range" id="9" />
                                                                                    </Box>
                                                                                    <Box name="Dispatcher" robot="" id="5" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" bitmap_expanded="1" plugin="dispatcher_plugin" x="345" y="334">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("scared")):
			self.output_1(p)
		else:
			self.onDefault()]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <keywords>
                                                                                                <keyword>&quot;scared&quot;</keyword>
                                                                                                <keyword></keyword>
                                                                                            </keywords>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="5" />
                                                                                    </Box>
                                                                                    <Box name="GotoNormal" robot="" id="6" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="558" y="315">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <number>1</number>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="gotoAndStop" robot="" id="7" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="701" y="300">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                                                                    </Box>
                                                                                    <Box name="Sometimes" robot="" id="8" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="130" y="69">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( random.random() < 0.2 ):
            self.output_sometimes();
        else:
            self.output_othertimes();        

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_sometimes" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="output_othertimes" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="ATesSouhaits" robot="" id="11" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="376" y="38">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Enter name here" robot="" id="9" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="104" y="105">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Bless you!"
		sFrench = "A tes souhaits !"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <english>Bless you!</english>
                                                                                                                <french>A tes souhaits !</french>
                                                                                                                <spanish></spanish>
                                                                                                                <italian></italian>
                                                                                                                <german></german>
                                                                                                                <chinese></chinese>
                                                                                                                <polish></polish>
                                                                                                                <korean></korean>
                                                                                                                <language>0</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="SayTextPrerender_ref" robot="" id="23" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.21 - altools" bitmap_expanded="1" plugin="" x="425" y="101">
                                                                                                            <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# SayTextPrerender
# v1.21 - altools
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
        if( p == None ):
            self.output_onStopSpeaking(); # on le fait ca ou pas ?
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        rLength = None;
        if( self.getParameter( "bWithLight" ) ):
            rLength = altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            rLength = altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared( rLength );
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking( rLength );
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );
                
# SayTextPrerender - end
pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                                                            <Output name="output_onPrepared" type="2" type_size="1" nature="2" inner="0" tooltip="The sound is prepared and ready to be launched.&#x0A;The length of the speak is outputted." id="5" />
                                                                                                            <Output name="output_onStartSpeaking" type="2" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak.&#x0A;The length of the speak is outputted." id="6" />
                                                                                                            <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking." id="7" />
                                                                                                            <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                                                                            <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                                                                            <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                                                                            <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="23" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="23" indexofoutput="7" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="6" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="6" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="11" indexofinput="2" outputowner="8" indexofoutput="5" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                            <BehaviorKeyframe name="happy" index="50" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="85" y="189">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("mood_state")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>mood_state</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_RegisterToStringValue_p" robot="" id="2" tooltip="Subscribe to a value to know when data has changed" bitmap_expanded="1" plugin="" x="112" y="444">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.strRegisteredDataName = "";
        self.BIND_PYTHON( self.getName(),"myDataChanged" );

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onDataName(self, pstrDataName):
        self.onInput_onStop();
        self.strRegisteredDataName = pstrDataName;
        ALMemory.subscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName(), "", "myDataChanged" );
       
    def onInput_onStop(self):
        if( self.strRegisteredDataName != "" ):
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName() );
            self.strRegisteredDataName = "";
 
    def myDataChanged(self, pDataName, pValue, pMessage):
        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        self.output_Value( str( pValue ) );
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDataName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_Value" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="Dispatcher" robot="" id="3" tooltip="Dispatch an event carrying an information, depending on the information. Will be tested against all the values of the table, and the matching output will be stimulated !" bitmap_expanded="1" plugin="dispatcher_plugin" x="244" y="424">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self, p):
		if(p == ("happy")):
			self.output_1(p)
		else:
			self.onDefault()]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <keywords>
                                                                                                <keyword>&quot;happy&quot;</keyword>
                                                                                                <keyword></keyword>
                                                                                            </keywords>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If nothing has been matched in dispatcher." id="3" />
                                                                                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO as been Automatically added by box. Read box tooltip for more information." id="5" />
                                                                                    </Box>
                                                                                    <Box name="happyLeds" robot="" id="4" tooltip="happy" bitmap_expanded="1" plugin="" x="363" y="50">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        if( self.bIsRunning ):
              
            return;        

        rDuration = 0.5;
        self.bMustStop = False;
        self.bIsRunning = True;
        
        while( not self.bMustStop ):
            ALLeds.post.fadeRGB( "FaceLed0", 0x002e30, rDuration );
            ALLeds.post.fadeRGB( "FaceLed1", 0x002022, rDuration );
            ALLeds.post.fadeRGB( "FaceLed2", 0x20d700, rDuration );
            ALLeds.post.fadeRGB( "FaceLed3", 0xb59b04, rDuration );
            ALLeds.post.fadeRGB( "FaceLed4", 0x3aff00, rDuration );
            ALLeds.post.fadeRGB( "FaceLed5", 0x001a2a, rDuration );
            ALLeds.post.fadeRGB( "FaceLed6", 0x00182e, rDuration );
            ALLeds.post.fadeRGB( "FaceLed7", 0x001232, rDuration );
        
            #time.sleep( 0.1 );
            
            ALLeds.post.fadeRGB( "FaceLed0", 0x007030, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed1", 0x006622, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed2", 0xdb8f00, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed3", 0x0aff04, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed4", 0xd3dd00, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed5", 0x004c2a, rDuration*2 );
            ALLeds.post.fadeRGB( "FaceLed6", 0x00502e, rDuration*2 );
            ALLeds.fadeRGB( "FaceLed7", 0x004e32, rDuration*2 );

        
            if( self.bMustStop ):
                break;   
                
        self.bIsRunning = False;
        self.onStopped();
        
    def onInput_onStop(self):
        self.bMustStop = True;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="LookHappy_ref" robot="" id="5" tooltip="Move head and seems happy." bitmap_expanded="1" plugin="" x="367" y="186">
                                                                                        <bitmap>media/images/box/interaction/face.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import math
import random

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.nIDMove = -1;

    def onLoad(self):
        self.nIDMove = -1;
        
    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
 
    
    def nod( self ):
        "nod and looks like happy"
        rYawAmpli = 0.8;
        rYawInc = rYawAmpli/40;
        rYaw = ALMotion.getAngles( "HeadYaw", True )[0];
        rYaw = altools.limitRange( rYaw, -rYawAmpli, rYawAmpli );
        rPitchAmpli = 0.3;
        rPitchInc = rPitchAmpli/8;
        rPitch = ALMotion.getAngles( "HeadPitch", True )[0];
        rPitch = altools.limitRange( rPitch, -rPitchAmpli, rPitchAmpli );        
        nSpeed = 100;
        while( not self.bMustStop ):
            self.nIDMove = ALMotion.post.angleInterpolationWithSpeed( "Head", [rYaw, rPitch], nSpeed / 100. );
#            self.log( "rYaw: %f rPitch: %f" % (rYaw, rPitch ) );
            rYaw += rYawInc;
            if( rYaw > rYawAmpli or rYaw < -rYawAmpli ):
                rYawInc *= -1;
            rPitch += rPitchInc;
            if( rPitch > rPitchAmpli or rPitch < -rPitchAmpli ):
                rPitchInc *= -1;
            ALMotion.wait( self.nIDMove, 10*1000 );
        # while - end
        
    # zigzag - end
    

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            print( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        self.nod();

        self.bIsRunning = False;
        self.onStopped();
        print( self.boxName + ": start - end" );    

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nIDMove != -1 ):
            try:
                ALMotion.stop( self.nIDMove );
            except:
                pass
            self.nIDMove = -1;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="GotoNormal" robot="" id="6" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="476" y="403">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <number>1</number>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="gotoAndStop" robot="" id="7" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="676" y="460">
                                                                                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="AutonomousLife_BodyBehavior_ref" robot="" id="24" tooltip="The living body mouvement" bitmap_expanded="1" plugin="" x="402" y="329">
                                                                    <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="IsItHotAndSit" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="63" y="71">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.branchOnNaoPosition() == 1 and behaviordata.extractedData.getValue( 'body_temperature' ) > 65 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="RandomBreathOrNot" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="280" y="372">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( random.random() > 0.5 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="RestPosition" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="288" y="49">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import altools
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        altools.assumeStiffness( 'Body', 0.5 );
        altools.PoseLibrary.setPosition( altools.PoseLibrary.getPosition( 'Sitting' ), 1.5 );    
        altools.assumeStiffnessBelow( 'Body', 0. );
        time.sleep( 1.0 ); # so the keep pose has time to resresh it
        altools.assumeStiffnessBelow( 'Body', 0. );
        altools.assumeStiffness( 'HeadYaw', 0.4 );
        altools.assumeStiffness( 'HeadPitch', 0.4 );        
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="WaitALittle_ref" robot="" id="4" tooltip="Like the wait it can be stopped immediately and reset at any time.&#x0A;&#x0A;The difference is the fact that the waiting time is random.&#x0A;&#x0A;Min: something minimal but never null (related to the max value)" bitmap_expanded="1" plugin="" x="299" y="176">
                                                                                        <bitmap>media/images/box/icons_appu/chrono.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import threading # opkg install python-threading
import random

class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.onInput_onStop(); # to clean everything
    self.timerOutput();
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self ):
    rMax = self.getParameter( 'rWaitMax' );
    rMin = rMax * 0.5; # the minimum time is relative to the maximum time (10 sec => 5 sec minimum)
    rValueTime = random.random() * ( rMax - rMin ) + rMin;
    self.log( "%s: wait %5.1f sec" % ( self.boxName, rValueTime ) );
    self.startTimer( float(rValueTime) );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                                        <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time. Warning: don&apos;t outputted if stopped before time lapse." id="4" />
                                                                                        <Parameter name="rWaitMax" inherits_from_parent="0" content_type="2" value="30" default_value="30" min="0" max="1e+08" tooltip="the wait max value in seconds" id="5" />
                                                                                    </Box>
                                                                                    <Box name="Get6PosesToInterpolate" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="466" y="480">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        list = behaviordata.getOneWait_6Poses();
        self.onStopped(str( list )) #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="BreathAnimation" robot="" id="6" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="470" y="350">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="IsStanding_ref" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="83" y="23">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Anim_stand_breathLoop" robot="" id="2" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="311" y="54">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="80" value="-0.79343" />
                                                                                                                        <Key frame="105" value="-0.881321" />
                                                                                                                        <Key frame="155" value="-0.705538" />
                                                                                                                        <Key frame="180" value="-1.40867" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="80" value="-4.57277" />
                                                                                                                        <Key frame="105" value="-4.57277" />
                                                                                                                        <Key frame="155" value="-12.3072" />
                                                                                                                        <Key frame="180" value="-14.5045" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="89.0319" />
                                                                                                                        <Key frame="102" value="90.9655" />
                                                                                                                        <Key frame="152" value="88.5925" />
                                                                                                                        <Key frame="177" value="88.5925" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="6.58948" />
                                                                                                                        <Key frame="102" value="6.3258" />
                                                                                                                        <Key frame="152" value="6.15002" />
                                                                                                                        <Key frame="177" value="6.23791" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="-65.9212" />
                                                                                                                        <Key frame="102" value="-69.4369" />
                                                                                                                        <Key frame="152" value="-69.7005" />
                                                                                                                        <Key frame="177" value="-72.9525" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="-39.5489" />
                                                                                                                        <Key frame="102" value="-41.3067" />
                                                                                                                        <Key frame="152" value="-32.957" />
                                                                                                                        <Key frame="177" value="-29.6171" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="6.58948" />
                                                                                                                        <Key frame="102" value="6.41369" />
                                                                                                                        <Key frame="152" value="6.15002" />
                                                                                                                        <Key frame="177" value="6.15002" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="12.8414" />
                                                                                                                        <Key frame="102" value="12.8414" />
                                                                                                                        <Key frame="152" value="12.8414" />
                                                                                                                        <Key frame="177" value="12.8414" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="88.5973" />
                                                                                                                        <Key frame="98" value="88.6852" />
                                                                                                                        <Key frame="148" value="91.7614" />
                                                                                                                        <Key frame="173" value="91.7614" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="-6.15482" />
                                                                                                                        <Key frame="98" value="-5.27591" />
                                                                                                                        <Key frame="148" value="-4.39699" />
                                                                                                                        <Key frame="173" value="-4.57277" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="66.0922" />
                                                                                                                        <Key frame="98" value="69.3442" />
                                                                                                                        <Key frame="148" value="77.6939" />
                                                                                                                        <Key frame="173" value="80.067" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="45.0909" />
                                                                                                                        <Key frame="98" value="44.5635" />
                                                                                                                        <Key frame="148" value="35.3349" />
                                                                                                                        <Key frame="173" value="32.6981" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="10.193" />
                                                                                                                        <Key frame="98" value="10.1051" />
                                                                                                                        <Key frame="148" value="10.1051" />
                                                                                                                        <Key frame="173" value="10.1051" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="22.5214" />
                                                                                                                        <Key frame="98" value="22.5214" />
                                                                                                                        <Key frame="148" value="22.5214" />
                                                                                                                        <Key frame="173" value="22.5214" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-8.52309" />
                                                                                                                        <Key frame="100" value="-8.52309" />
                                                                                                                        <Key frame="150" value="-8.17153" />
                                                                                                                        <Key frame="175" value="-8.4352" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="3.43018" />
                                                                                                                        <Key frame="100" value="3.43018" />
                                                                                                                        <Key frame="150" value="7.56109" />
                                                                                                                        <Key frame="175" value="7.56109" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="12.0436" />
                                                                                                                        <Key frame="100" value="11.9557" />
                                                                                                                        <Key frame="150" value="12.1315" />
                                                                                                                        <Key frame="175" value="12.0436" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-5.18802" />
                                                                                                                        <Key frame="100" value="-5.10012" />
                                                                                                                        <Key frame="150" value="-5.18802" />
                                                                                                                        <Key frame="175" value="-5.18802" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="3.24959" />
                                                                                                                        <Key frame="100" value="3.33748" />
                                                                                                                        <Key frame="150" value="3.42537" />
                                                                                                                        <Key frame="175" value="3.24959" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-4.04062" />
                                                                                                                        <Key frame="100" value="-4.04062" />
                                                                                                                        <Key frame="150" value="-7.20472" />
                                                                                                                        <Key frame="175" value="-7.29261" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-6.3258" />
                                                                                                                        <Key frame="100" value="-6.23791" />
                                                                                                                        <Key frame="150" value="-2.01911" />
                                                                                                                        <Key frame="175" value="-1.93121" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="10.5446" />
                                                                                                                        <Key frame="100" value="10.6325" />
                                                                                                                        <Key frame="150" value="11.1598" />
                                                                                                                        <Key frame="175" value="11.1598" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-4.2164" />
                                                                                                                        <Key frame="100" value="-4.2164" />
                                                                                                                        <Key frame="150" value="-4.30429" />
                                                                                                                        <Key frame="175" value="-4.39218" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="3.60596" />
                                                                                                                        <Key frame="100" value="3.69386" />
                                                                                                                        <Key frame="150" value="3.60596" />
                                                                                                                        <Key frame="175" value="3.43018" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="5.80326" />
                                                                                                                        <Key frame="100" value="5.62747" />
                                                                                                                        <Key frame="150" value="2.55126" />
                                                                                                                        <Key frame="175" value="2.55126" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="IsNearlyExcited" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="324" y="217">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.isNearlyExcited() ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="Text Edit" robot="" id="4" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="467" y="35">
                                                                                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Ces anims ont les pistes de tetes muté")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>Ces anims ont les pistes de tetes muté</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="Anim_sit_breathLoop_normal" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="499" y="160">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="80" value="-1.0571" />
                                                                                                                        <Key frame="105" value="-1.0571" />
                                                                                                                        <Key frame="155" value="-1.32078" />
                                                                                                                        <Key frame="180" value="-1.145" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="80" value="0.261271" />
                                                                                                                        <Key frame="105" value="0.261271" />
                                                                                                                        <Key frame="155" value="0.876513" />
                                                                                                                        <Key frame="180" value="-0.441863" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="55.8088" />
                                                                                                                        <Key frame="102" value="55.0178" />
                                                                                                                        <Key frame="152" value="57.0393" />
                                                                                                                        <Key frame="177" value="56.5999" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="15.8181" />
                                                                                                                        <Key frame="102" value="15.115" />
                                                                                                                        <Key frame="152" value="17.1365" />
                                                                                                                        <Key frame="177" value="16.697" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="-40.081" />
                                                                                                                        <Key frame="102" value="-39.9931" />
                                                                                                                        <Key frame="152" value="-38.5869" />
                                                                                                                        <Key frame="177" value="-38.9384" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="-61.8734" />
                                                                                                                        <Key frame="102" value="-59.764" />
                                                                                                                        <Key frame="152" value="-60.1155" />
                                                                                                                        <Key frame="177" value="-59.764" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="-4.39699" />
                                                                                                                        <Key frame="102" value="-4.3091" />
                                                                                                                        <Key frame="152" value="-4.48488" />
                                                                                                                        <Key frame="177" value="-4.13332" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="77" value="5.92144" />
                                                                                                                        <Key frame="102" value="5.92144" />
                                                                                                                        <Key frame="152" value="6.06144" />
                                                                                                                        <Key frame="177" value="6.16144" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="54.8468" />
                                                                                                                        <Key frame="98" value="54.6711" />
                                                                                                                        <Key frame="148" value="56.7805" />
                                                                                                                        <Key frame="173" value="56.341" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="-15.9108" />
                                                                                                                        <Key frame="98" value="-15.6471" />
                                                                                                                        <Key frame="148" value="-17.6686" />
                                                                                                                        <Key frame="173" value="-17.2292" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="34.8027" />
                                                                                                                        <Key frame="98" value="35.1543" />
                                                                                                                        <Key frame="148" value="34.4512" />
                                                                                                                        <Key frame="173" value="34.9785" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="64.5149" />
                                                                                                                        <Key frame="98" value="63.636" />
                                                                                                                        <Key frame="148" value="61.8782" />
                                                                                                                        <Key frame="173" value="61.8782" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="-0.266079" />
                                                                                                                        <Key frame="98" value="-0.266079" />
                                                                                                                        <Key frame="148" value="-0.529755" />
                                                                                                                        <Key frame="173" value="-0.353971" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="73" value="12.1414" />
                                                                                                                        <Key frame="98" value="12.1414" />
                                                                                                                        <Key frame="148" value="12.3014" />
                                                                                                                        <Key frame="173" value="12.3014" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-37.9668" />
                                                                                                                        <Key frame="100" value="-37.9668" />
                                                                                                                        <Key frame="150" value="-37.6153" />
                                                                                                                        <Key frame="175" value="-37.6153" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="10.7252" />
                                                                                                                        <Key frame="100" value="10.7252" />
                                                                                                                        <Key frame="150" value="10.901" />
                                                                                                                        <Key frame="175" value="10.8131" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-92.6355" />
                                                                                                                        <Key frame="100" value="-92.5476" />
                                                                                                                        <Key frame="150" value="-87.2741" />
                                                                                                                        <Key frame="175" value="-87.0983" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="76.9029" />
                                                                                                                        <Key frame="100" value="76.9029" />
                                                                                                                        <Key frame="150" value="76.5513" />
                                                                                                                        <Key frame="175" value="76.6392" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="51.5021" />
                                                                                                                        <Key frame="100" value="51.5021" />
                                                                                                                        <Key frame="150" value="51.3264" />
                                                                                                                        <Key frame="175" value="51.4143" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="0.969213" />
                                                                                                                        <Key frame="100" value="0.969213" />
                                                                                                                        <Key frame="150" value="1.0571" />
                                                                                                                        <Key frame="175" value="0.969213" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-11.6872" />
                                                                                                                        <Key frame="100" value="-11.5993" />
                                                                                                                        <Key frame="150" value="-11.9509" />
                                                                                                                        <Key frame="175" value="-11.6872" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-92.904" />
                                                                                                                        <Key frame="100" value="-92.904" />
                                                                                                                        <Key frame="150" value="-87.4547" />
                                                                                                                        <Key frame="175" value="-87.2789" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="76.0287" />
                                                                                                                        <Key frame="100" value="76.0287" />
                                                                                                                        <Key frame="150" value="76.1166" />
                                                                                                                        <Key frame="175" value="76.2045" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="51.9464" />
                                                                                                                        <Key frame="100" value="51.9464" />
                                                                                                                        <Key frame="150" value="51.7706" />
                                                                                                                        <Key frame="175" value="51.8585" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-0.964405" />
                                                                                                                        <Key frame="100" value="-0.964405" />
                                                                                                                        <Key frame="150" value="-1.0523" />
                                                                                                                        <Key frame="175" value="-0.964405" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Anim_sit_breathLoop_calm" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="512" y="282">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-1.0571" />
                                                                                                                        <Key frame="100" value="-1.0571" />
                                                                                                                        <Key frame="150" value="-1.0571" />
                                                                                                                        <Key frame="175" value="-1.0571" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="0.261271" />
                                                                                                                        <Key frame="100" value="0.261271" />
                                                                                                                        <Key frame="150" value="1.75543" />
                                                                                                                        <Key frame="175" value="1.75543" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="55.6331" />
                                                                                                                        <Key frame="100" value="55.8088" />
                                                                                                                        <Key frame="150" value="55.8088" />
                                                                                                                        <Key frame="175" value="55.7209" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="15.8181" />
                                                                                                                        <Key frame="100" value="15.8181" />
                                                                                                                        <Key frame="150" value="15.8181" />
                                                                                                                        <Key frame="175" value="15.8181" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-39.5537" />
                                                                                                                        <Key frame="100" value="-39.9053" />
                                                                                                                        <Key frame="150" value="-39.1142" />
                                                                                                                        <Key frame="175" value="-39.0263" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-62.0492" />
                                                                                                                        <Key frame="100" value="-62.0492" />
                                                                                                                        <Key frame="150" value="-61.8734" />
                                                                                                                        <Key frame="175" value="-61.7855" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-4.39699" />
                                                                                                                        <Key frame="100" value="-4.3091" />
                                                                                                                        <Key frame="150" value="-4.3091" />
                                                                                                                        <Key frame="175" value="-4.3091" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="5.92144" />
                                                                                                                        <Key frame="100" value="5.92144" />
                                                                                                                        <Key frame="150" value="5.92144" />
                                                                                                                        <Key frame="175" value="5.92144" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="55.6379" />
                                                                                                                        <Key frame="100" value="55.55" />
                                                                                                                        <Key frame="150" value="56.0773" />
                                                                                                                        <Key frame="175" value="56.0773" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-15.5592" />
                                                                                                                        <Key frame="100" value="-15.5592" />
                                                                                                                        <Key frame="150" value="-15.6471" />
                                                                                                                        <Key frame="175" value="-15.6471" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="35.3301" />
                                                                                                                        <Key frame="100" value="35.3301" />
                                                                                                                        <Key frame="150" value="35.0664" />
                                                                                                                        <Key frame="175" value="35.0664" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="65.2181" />
                                                                                                                        <Key frame="100" value="65.2181" />
                                                                                                                        <Key frame="150" value="65.2181" />
                                                                                                                        <Key frame="175" value="65.1302" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-0.266079" />
                                                                                                                        <Key frame="100" value="-0.266079" />
                                                                                                                        <Key frame="150" value="-0.266079" />
                                                                                                                        <Key frame="175" value="-0.266079" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="12.1414" />
                                                                                                                        <Key frame="100" value="12.1414" />
                                                                                                                        <Key frame="150" value="12.1414" />
                                                                                                                        <Key frame="175" value="12.1414" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-37.9668" />
                                                                                                                        <Key frame="100" value="-37.9668" />
                                                                                                                        <Key frame="150" value="-37.5274" />
                                                                                                                        <Key frame="175" value="-37.5274" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="10.7252" />
                                                                                                                        <Key frame="100" value="10.7252" />
                                                                                                                        <Key frame="150" value="10.7252" />
                                                                                                                        <Key frame="175" value="10.7252" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-91.5808" />
                                                                                                                        <Key frame="100" value="-91.3171" />
                                                                                                                        <Key frame="150" value="-90.3503" />
                                                                                                                        <Key frame="175" value="-90.3503" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="76.9908" />
                                                                                                                        <Key frame="100" value="76.9908" />
                                                                                                                        <Key frame="150" value="76.9029" />
                                                                                                                        <Key frame="175" value="76.9029" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="51.5021" />
                                                                                                                        <Key frame="100" value="51.5021" />
                                                                                                                        <Key frame="150" value="51.5021" />
                                                                                                                        <Key frame="175" value="51.5021" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="0.969213" />
                                                                                                                        <Key frame="100" value="0.881321" />
                                                                                                                        <Key frame="150" value="0.969213" />
                                                                                                                        <Key frame="175" value="0.969213" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-11.6872" />
                                                                                                                        <Key frame="100" value="-11.5993" />
                                                                                                                        <Key frame="150" value="-11.5993" />
                                                                                                                        <Key frame="175" value="-11.5993" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-91.8493" />
                                                                                                                        <Key frame="100" value="-91.5856" />
                                                                                                                        <Key frame="150" value="-90.7067" />
                                                                                                                        <Key frame="175" value="-90.7067" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="76.1166" />
                                                                                                                        <Key frame="100" value="76.2045" />
                                                                                                                        <Key frame="150" value="76.2924" />
                                                                                                                        <Key frame="175" value="76.2924" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="51.9464" />
                                                                                                                        <Key frame="100" value="52.0343" />
                                                                                                                        <Key frame="150" value="51.9464" />
                                                                                                                        <Key frame="175" value="51.9464" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="75" value="-0.964405" />
                                                                                                                        <Key frame="100" value="-0.964405" />
                                                                                                                        <Key frame="150" value="-0.876513" />
                                                                                                                        <Key frame="175" value="-0.876513" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="InterpolateFourPoseOnHead_p w excite" robot="" id="7" tooltip="The same than InterpolateFourPose but in only one box - can handle 6 pose too" bitmap_expanded="1" plugin="" x="647" y="470">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);        
        self.rOldX = -42;
        self.rOldY = -42;
        self.initPos();
    # __init__ - end
        
    def initPos(self):
        self.aPosTL = {
    'LAnklePitch': 0.748550057411,
    'LAnkleRoll': 0.0583339631557,
    'LElbowRoll': -1.25323605537,
    'LElbowYaw': -0.461775958538,
    'LHand': 0.162571415305,
    'LHipPitch': -1.5876480341,
    'LHipRoll': -0.42487603426,
    'LHipYawPitch': -0.328234046698,
    'LKneePitch': 0.780764043331,
    'LShoulderPitch': 1.02927207947,
    'LShoulderRoll': 0.075124040246,
    'LWristYaw': -0.00924596190453,
    'RAnklePitch': 0.742497980595,
    'RAnkleRoll': 0.0552659630775,
    'RElbowRoll': 0.834537982941,
    'RElbowYaw': 1.46799612045,
    'RHand': 0.0571172088385,
    'RHipPitch': -1.58313000202,
    'RHipRoll': -0.705598056316,
    'RKneePitch': 1.12139594555,
    'RShoulderPitch': 1.23030996323,
    'RShoulderRoll': -0.36053198576,
    'RWristYaw': 0.00302603840828,
        };
        
        self.aPosTR = {
    'LAnklePitch': 0.742414057255,
    'LAnkleRoll': -0.0275700390339,
    'LElbowRoll': -0.839056074619,
    'LElbowYaw': -1.47114801407,
    'LHand': 0.0552990324795,
    'LHipPitch': -1.59378409386,
    'LHipRoll': 0.676535964012,
    'LHipYawPitch': -0.328234046698,
    'LKneePitch': 1.13665211201,
    'LShoulderPitch': 1.22869205475,
    'LShoulderRoll': 0.369652032852,
    'LWristYaw': -0.00464396178722,
    'RAnklePitch': 0.745566010475,
    'RAnkleRoll': -0.0321720391512,
    'RElbowRoll': 1.25638794899,
    'RElbowYaw': 0.458624064922,
    'RHand': 0.159298703074,
    'RHipPitch': -1.57545995712,
    'RHipRoll': 0.409619987011,
    'RKneePitch': 0.762439966202,
    'RShoulderPitch': 1.0446959734,
    'RShoulderRoll': -0.0874799638987,
    'RWristYaw': -4.19616699219e-05,
        };
        self.aPosBL = {
    'LAnklePitch': 0.743948042393,
    'LAnkleRoll': 0.122761964798,
    'LElbowRoll': -0.851328074932,
    'LElbowYaw': -0.833003997803,
    'LHand': 0.166935041547,
    'LHipPitch': -1.5876480341,
    'LHipRoll': -0.409536063671,
    'LHipYawPitch': -0.394196033478,
    'LKneePitch': 0.561402082443,
    'LShoulderPitch': 0.891212046146,
    'LShoulderRoll': 0.013764038682,
    'LWristYaw': -0.00464396178722,
    'RAnklePitch': 0.688807964325,
    'RAnkleRoll': -0.0735900402069,
    'RElbowRoll': 1.02935600281,
    'RElbowYaw': 1.46032607555,
    'RHand': 0.0582081153989,
    'RHipPitch': -1.62301397324,
    'RHipRoll': -0.662646055222,
    'RKneePitch': 0.567621946335,
    'RShoulderPitch': 1.17662000656,
    'RShoulderRoll': -0.296103954315,
    'RWristYaw': 0.00149203836918,
        };
        
        self.aPosBR = {
    'LAnklePitch': 0.690258026123,
    'LAnkleRoll': 0.104353964329,
    'LElbowRoll': -1.00626206398,
    'LElbowYaw': -1.45887601376,
    'LHand': 0.0589353851974,
    'LHipPitch': -1.59378409386,
    'LHipRoll': 0.648923993111,
    'LHipYawPitch': -0.389594048262,
    'LKneePitch': 0.59975206852,
    'LShoulderPitch': 1.17500209808,
    'LShoulderRoll': 0.297554045916,
    'LWristYaw': -0.00310996174812,
    'RAnklePitch': 0.745566010475,
    'RAnkleRoll': -0.090464040637,
    'RElbowRoll': 0.846809983253,
    'RElbowYaw': 0.839056074619,
    'RHand': 0.16766230762,
    'RHipPitch': -1.57392597198,
    'RHipRoll': 0.408085972071,
    'RKneePitch': 0.547679960728,
    'RShoulderPitch': 0.900499999523,
    'RShoulderRoll': -0.0169159621,
    'RWristYaw': 0.00149203836918,
        };
        
        self.aPosTC = None; # optionnal centered position
        self.aPosBC = None;           
    # initPos - end        

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.rNewSpeedRatio = 0.;
        self.nID = -1;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def doStuffInterpolateOnHead(self):
        rX, rY = ALMotion.getAngles( "Head", True );
        self.rNewSpeedRatio *= 0.85; # la vitesse ralenti petit a petit apres un coup de speed        
        if( abs( self.rOldX - rX ) < 0.01 and abs( self.rOldY - rY ) < 0.01 ):
            return;
        ratioMove = abs( self.rOldX - rX ) + abs( self.rOldY - rY );            
        self.rOldX = rX;
        self.rOldY = rY;
        rY = rY*1.485; # *1.27: because headpitch is between -0.78 and 0.78 # with new version, angle is between -0.67 and 0.51 => *1.485
        if( self.aPosTC == None ):
            somePos = altools.PoseLibrary.interpolatePositionXY( self.aPosTR, self.aPosTL, self.aPosBR, self.aPosBL, rX, rY );
        else:
            somePos = altools.PoseLibrary.interpolatePositionXY6( self.aPosTR, self.aPosTC, self.aPosTL, self.aPosBR, self.aPosBC, self.aPosBL, rX, rY );
#        self.log( "pos: %f => %s" % ( rX, str( somePos ) ) );
        if( self.nID != -1 ):
            try:
                ALMotion.stop( self.nID );
            except:
                pass
#        nSpeedPercent = 3; # 10 is fine, but 4 is very smoothy cooly                
  
        # speed could be modifief by excitement  
        rExcitement = behaviordata.extractedData.getValue( "excitement" );
#        self.log( "exc: %f ratio: %f" % (rExcitement, ratioMove ) );        
        ratioMove = ( rExcitement * 4 ) * ratioMove; # peut appliquer jusqu'a un bonus * 4 a la vitesse (ne change rien avec un excite a 0.25)
        
        # speed is relative to the sum to move
#        rApplyRatio = 0.5;        
#        self.rNewSpeedRatio = self.rNewSpeedRatio * ( 1. - rApplyRatio ) + ratioMove * rApplyRatio;
        if( ratioMove > self.rNewSpeedRatio ):
            self.rNewSpeedRatio = ratioMove;
#        self.log( "ratioMove: %f; rNewSpeedRatio: %f" % ( ratioMove, self.rNewSpeedRatio ) );
        nSpeedPercent = altools.limitRange( int( 30 * self.rNewSpeedRatio + 0.5 ), 3, 40 );
#        self.log( "apres:    ratio: %f, nSpeedPercent: %d" % (ratioMove, nSpeedPercent) )        
        self.nID = altools.PoseLibrary.setPositionWithSpeed( somePos, nSpeedPercent, False );
        
    # doStuffInterpolateOnHead - end
    
    def mainLoop( self ):
        self.log( self.boxName + ": start - begin" );
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );        
        self.rOldX = ALMotion.getAngles( "HeadYaw", True )[0];
        self.rOldY = ALMotion.getAngles( "HeadPitch", True )[0] + 0.1; # we add 0.1 to force the next refresh to be done (but slowly)!
        while( not self.bMustStop ):
            # insert some good and powerful code here
            self.doStuffInterpolateOnHead();
            if( not self.bMustStop ):
                time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStartWithStandardPose(self):
        self.initPos();
        self.mainLoop();

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.nID != -1 ):
            try:
                ALMotion.stop( self.nID );
            except:
                pass
            self.nID = -1;
            
    def onInput_onStartWithCustomPose(self, listPos):
        listPos = eval( listPos );
        self.log( "%s.onInput_onChangeFourPose: listPos has %d pos" % ( self.boxName, len( listPos ) ) );
#        self.log( "pos: %s" % str( self.aPosTL ) );
#        self.log( "posapres: %s" % str( listPos[0] ) );
        self.aPosTL = listPos[0];
        self.aPosTR = listPos[1];
        self.aPosBL = listPos[2];
        self.aPosBR = listPos[3];
        if( len( listPos ) > 5 ):
            # we have some centered pose too
            self.aPosTC = listPos[4];
            self.aPosBC = listPos[5];
        else:
            self.aPosTC = None;
            self.aPosBC = None;            
        self.mainLoop();
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStartWithStandardPose" type="1" type_size="1" nature="2" inner="0" tooltip="the prorata of the second pos [0..1]" id="2" />
                                                                                        <Input name="onStartWithCustomPose" type="3" type_size="1" nature="2" inner="0" tooltip="Change the pose to interpolate by passing a list of new pos.&#x0A;The ListPos is a string to evaluate as an array of dict [ {list joint 1: Top Left}, {list joint 2: Top Right}, {list joint 3: Bottom Left}, {list joint 4: Bottom Right} and optionnally: {list joint 5: Top Center}, {list joint 6: BottomCenter} ]" id="3" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                                        <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.2" min="0" max="10" tooltip="Define the period of the timer box (in seconds)." id="6" />
                                                                                    </Box>
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="IsStanding_p" robot="" id="27" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="525" y="323">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Box name="KeepPose_p" robot="" id="36" tooltip="Store legs position then relax them until the position change, then stiff them...&#x0A;&#x0A;C&apos;est marrant..." bitmap_expanded="1" plugin="" x="653" y="314">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[#KeepPose - v1.03
import time
import altools

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        # memorise legs positions
#        astrListJointName = [ "RKneePitch", "LKneePitch", "LHipPitch", "RHipPitch", "LAnklePitch", "RAnklePitch", "HeadPitch", "HeadYaw" ];        
        astrListJointName = ALMotion.getJointNames('Body');
        # here you can choose wich joint you want to remove from the keep pose optimisation
        if( self.getParameter( 'bRemoveHead' ) ):
            astrListJointName.remove( "HeadYaw" );
            astrListJointName.remove( "HeadPitch" );
        if( self.getParameter( 'bRemoveAnkle' ) ):
            astrListJointName.remove( "LAnklePitch" );
            astrListJointName.remove( "RAnklePitch" );
        if( self.getParameter( 'bRemoveArms' ) ):            
            listJointArms = altools.PoseLibrary.getListJoints( ["Arms"] );
#            self.log( "listArms: %s" % str( listJointArms ) );
            astrListJointName = altools.substractList( astrListJointName, listJointArms );
#        self.log( "astrListJointName: %s" % str( astrListJointName ) );

        # to test on one only joint
#        astrListJointName = ['HeadPitch'];
        
        # sensed value to compare
        aPosLast = [];
        aStiffnessLast = [];
        aElectricCurrentLast = [];
        aTemperatureLast = [];
        aCptNotChange = [];        
        
        strPosTemplate = "Device/SubDeviceList/%s/Position/Sensor/Value";
        strPosActuatorTemplate = "Device/SubDeviceList/%s/Position/Actuator/Value";
#        strStiffnessTemplate = "Device/SubDeviceList/%s/Position/Sensor/Value";
        strTemperatureTemplate = "Device/SubDeviceList/%s/Temperature/Sensor/Value";
        strElectricCurrentTemplate = "Device/SubDeviceList/%s/ElectricCurrent/Sensor/Value";

        rValStiffnessMin = 0.001; # no effort, but sensor is not directly copied to actuator (must be inferior than rStiffInc)
        for i in range( len( astrListJointName ) ):
            rVal = ALMotion.getStiffnesses( astrListJointName[i] )[0];
            if( rVal < rValStiffnessMin ):
                rVal = rValStiffnessMin;
            aStiffnessLast.append( rVal );
            aPosLast.append( 0.0 );
            aCptNotChange.append( 0 );
        
        
        
        listPosKeyString = [];
        listPosKeyActuatorString = [];        
        for i in range( len( astrListJointName ) ):
            listPosKeyString.append( strPosTemplate % astrListJointName[i] );
            listPosKeyActuatorString.append( strPosActuatorTemplate % astrListJointName[i] );            
        aPosLast = ALMemory.getListData( listPosKeyString );
            
        rStiffInc = 0.005;
        rStiffMult = 60;
        rDT = self.getParameter( 'rPeriod' );
        bMovingPose = self.getParameter( 'bMovingPose' );
        rThreshold = 0.1;
        if( bMovingPose ):
            rThreshold = 0.022;
        while( not self.bMustStop ):
            # for each joint, look if it has moved, if moved, then restiff it more, else, remove a little, analyse temperature and current to see things and show statitics...

            listPos = ALMemory.getListData( listPosKeyString );
#            self.log( "pos[0]: %5.3f" % listPos[0] );
            if( bMovingPose ):
                aPosLast = ALMemory.getListData( listPosKeyActuatorString );
#                self.log( "    actu[0]: %5.3f" % aPosLast[0] );
            for i in range( len( listPos ) ):
                rDist = abs( listPos[i] - aPosLast[i] );
                bChanged = False;
#                self.log( "%d: dist:%f" % ( i, rDist ) );
                if( rDist > rThreshold ):
                    if( aStiffnessLast[i] <= 1.0-(rStiffInc*rStiffMult) ):
                        aStiffnessLast[i] += rStiffInc*rStiffMult;
                        if( not bMovingPose ):
#                            self.log( "** sending pos: %5.3f" % aPosLast[0] );
                            ALMotion.post.angleInterpolation( astrListJointName[i], (aPosLast[i]+listPos[i])/2, 0.01, True );
#                            aPosLast = ALMemory.getListData( listPosKeyActuatorString );                        
#                            self.log( "** sending pos (justafter): %5.3f" % aPosLast[0] );                        
#                            aPosLast[i] = listPos[i];    
#                            self.output_IncreaseHardnessOnJoint( i );
                        bChanged = True;
                elif( rDist < rThreshold / 2. ):
                    if( aStiffnessLast[i] >= rStiffInc ): # rStiffInc - 0.001 pour aller jusqu'a un stiffness a 0.00
                        aStiffnessLast[i] -= rStiffInc;
                        if( aStiffnessLast[i] < rValStiffnessMin ):
                            aStiffnessLast[i] = rValStiffnessMin;
                        bChanged = True;
#                        self.output_DecreaseHardnessOnJoint( i );
                if( bChanged ):
                    ALMotion.setStiffnesses( astrListJointName[i], aStiffnessLast[i] );
#                    self.log( "Send new stiffness on '%s': aStiffnessLast[%d]: %f, dist: %f" % ( astrListJointName[i], i, aStiffnessLast[i], rDist ) );
                else:
                    aCptNotChange[i] += 1;
                    if( aCptNotChange[i] > 20 ):
                        aCptNotChange[i] = 0;
                        # it's a long time we doesn't change the stiffness, perhaps someone else has moved the stiffness, so let's update it from the reality
                        aStiffnessLast[i] = ALMotion.getStiffnesses( astrListJointName[i] )[0];
                        
                
            time.sleep( rDT );
            pass
        # end while
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );    

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_IncreaseHardnessOnJoint" type="2" type_size="1" nature="2" inner="0" tooltip="when a joint is set to harder stiffness value, output the index of the joint" id="5" />
                                                                    <Output name="output_DecreaseHardnessOnJoint" type="2" type_size="1" nature="2" inner="0" tooltip="when a joint is set to lower stiffness value, output the index of the joint" id="6" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="10" tooltip="Period of refresh" id="7" />
                                                                    <Parameter name="bMovingPose" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="Enabled it to keep a &apos;moving pose&apos; (from exterior)" id="8" />
                                                                    <Parameter name="bRemoveHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="don&apos;t work on the head joints" id="9" />
                                                                    <Parameter name="bRemoveAnkle" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="don&apos;t work on the ankle pitch joints (because when standing, removing ankle is problematic: when we put back stiffness, it&apos;s not enough strong to stand back (feets are not enough heavy)" id="10" />
                                                                    <Parameter name="bRemoveArms" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="don&apos;t work on the arms joints" id="11" />
                                                                </Box>
                                                                <Box name="ProtectCurrent_p" robot="" id="3" tooltip="Watch current on every joint and remove stiffness if too big - not using cpp.&#x0A;&#x0A;v 1.2&#x0A;&#x0A;From the ProtectCurrent project." bitmap_expanded="1" plugin="" x="396" y="429">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import time

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        listHead, listUp, listBottom = altools.getJointListByChain();
        listToUse = [];
        nFirstIndexLegs = 10000; # note the first index corresponding to legs, so we can use a multiplicated threshold. Initialised to big index
        if( self.getParameter( "bProtectHead" ) ):
            listToUse.extend( listHead );
        if( self.getParameter( "bProtectArms" ) ):
            listToUse.extend( listUp );
        if( self.getParameter( "bProtectLegs" ) ):
            nFirstIndexLegs = len( listToUse );
            listToUse.extend( listBottom );
            
        listElecCurrent = [];
        listRemovedStiff = []; # list the joint where we removed the stiffness
        listRemovedStiffValue = []; # and store the prev stiffness value
        listElecValue = []; # filtering of electric value
        for strJoint in listToUse:
            listElecCurrent.append( "Device/SubDeviceList/%s/ElectricCurrent/Sensor/Value" % strJoint );
            listRemovedStiff.append( False );
            listRemovedStiffValue.append( 0. );
            listElecValue.append( 0. );
            
        rThreshold = self.getParameter( "rThreshold" );
        bRestoreStiffness = self.getParameter( "bRestoreStiffness" );
        rLoopPeriod = 0.2;
        
        while( not self.bMustStop ):
            listElecValueNew = ALMemory.getListData( listElecCurrent );
#            self.log( "listElecValue: %s" % listElecValue );
#            self.log( "listElecValueNew: %s" % listElecValueNew );
            
            # fast filtering
            for i in range( len( listElecValue ) ):
                rMaintainCoef = 0.7; # median on about 6-7 measures
                listElecValue[i] = listElecValue[i] * rMaintainCoef + listElecValueNew[i] * ( 1. - rMaintainCoef );
                
#                self.log( "%d: %f / %f" % ( i, listElecValueNew[i], listElecValue[i] ) );
#                if( i == 15 ):
#                    self.log( "%d: %f / %f" % ( i, listElecValueNew[i], listElecValue[i] ) );

                if( i >= nFirstIndexLegs ):
                    rThresholdToUse = rThreshold * 2.8; # ratio of difference of consumption max between legs and top of the body
                else:
                    rThresholdToUse = rThreshold;
                if( listElecValue[i] > rThresholdToUse ):
                    rPrevValue = ALMotion.getStiffnesses( listToUse[i] )[0];
                    ALMotion.post.stiffnessInterpolation( listToUse[i], 0.0, 0.01 );
                    print( "%s: warning: electric current too high on '%s': %f (instant: %f) (already removed: %d)" % ( self.boxName, listToUse[i], listElecValue[i], listElecValueNew[i], listRemovedStiff[i] ) );
                    if( not listRemovedStiff[i] ):
                        if( self.getParameter( 'bPlaySound' ) ):
                            altools.playSound( "aie_hard.wav", bWait = False, bDirectPlay = True );
                        listRemovedStiff[i] = True;
                        listRemovedStiffValue[i] = rPrevValue;
                elif( bRestoreStiffness ):
                    if( listRemovedStiff[i] and listElecValue[i] < rThresholdToUse / 2): # ca a l'air de plus trop frotter, on remet un peu de stiffness
                        rVal = ALMotion.getStiffnesses( listToUse[i] )[0] + listRemovedStiff[i] / 2.;
                        rVal = altools.limitRange( rVal, 0., 1. );
                        ALMotion.post.stiffnessInterpolation( listToUse[i], rVal, rLoopPeriod );
                        self.log( "new stiff: rVal: %f" % rVal );
                        if( listRemovedStiff[i] - rVal < 0.01 ):
                            listRemovedStiff[i] = False;
            time.sleep( rLoopPeriod );
            pass
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution # comment this line to have a never finishing box (to launch as a bonus or a TSR)
        pass # to simplify the fact when commenting the previous line
        
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Parameter name="rThreshold" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.25" min="0" max="15" tooltip="Value max to accept" id="5" />
                                                                    <Parameter name="bProtectHead" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Set this value to protect head joints" id="6" />
                                                                    <Parameter name="bProtectArms" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Set this value to protect arms joints" id="7" />
                                                                    <Parameter name="bProtectLegs" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Set this value to protect legs joints" id="8" />
                                                                    <Parameter name="bRestoreStiffness" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Restore slowly stiffness after having removing it" id="9" />
                                                                    <Parameter name="bPlaySound" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Play a outch sound, when protecting" id="10" />
                                                                </Box>
                                                                <Box name="IsDisableStiffness" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="260" y="430">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( "ALLife" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isDisableStiffness() ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                </Box>
                                                                <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="36" indexofinput="2" outputowner="27" indexofoutput="4" />
                                                                <Link inputowner="24" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="ManageBehaviorsChoice" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="138" y="230">
                                                <bitmap>media/images/box/icons_appu/mind.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="JumpOut" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Timer" robot="" id="10" tooltip="send a bang with a predefined period&#x0A;*** ref box in: ./4_localize/Time/Timer/ExampleTimer.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="73" y="104">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading

class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False
  
  def onUnload(self):
    if( self.tb ):
      self.tb.cancel()
      self.tb = False;
  
  def startTimer(self, period = 1):
    if( self.tb ):
      self.tb.cancel()
    self.tb = threading.Timer(period, self.startTimer, [period])
    self.tb.start()
    self.timerOutput()
  
  def onInput_onStart(self):
    self.startTimer( self.getParameter("period") )
  
  def onInput_onStop(self):
    self.onUnload()
    self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="start the timer with a specified period value (seconds)" id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="stop the timer." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="onStopped" id="4" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang periodically" id="5" />
                                                                    <Parameter name="period" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Define the period of the timer box (in seconds). The box output will be stimulated at this period." id="6" />
                                                                </Box>
                                                                <Box name="ComputePossibleBehavior_ref" robot="" id="14" tooltip="Compute a list of possible behavior to launch now!" bitmap_expanded="1" plugin="" x="211" y="110">
                                                                    <bitmap>media/images/box/icons_appu/neural.png</bitmap>
                                                                    <bitmap>media/images/box/icons_appu/mind.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import behaviordata
import time

import abcdk.profiler as profiler
import abcdk.choregraphetools as choregraphetools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        behaviordata.behaviorDescManager.loadAllBehaviorDesc();
        self.life = ALProxy( "ALLife" );
        
    def __del__(self):
        self.storeValue();

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        timeprofile = profiler.UsageProfilerHelperBox( self.getName() );
    
        if( self.life.getOrder() !=  altools.const.order_behavior and ( not self.life.isEnabledBehaviors() or behaviordata.isSleeping() ) ):
            # don't choose a behavior to launch
            return;

#        timeBegin = time.time();
        listBehav = behaviordata.behaviorDescManager.getAllPossibleBehavior();
#        print( "time: %s" % str( ( time.time() - timeBegin ) ) );
        self.output_ListPossibleBehavior( listBehav );
        
    # onInput_onStart - end

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass

    def onInput_onTestPerf(self):
        timeBegin = time.time();
        nNbr = 20;
        for i in range( nNbr ):
            behaviordata.behaviorDescManager.getAllPossibleBehavior();
        print( "TEST PERF TIME: %s" % str( ( time.time() - timeBegin ) / nNbr ) );
        
    def onInput_onReloadBehavior( self ):
        behaviordata.behaviorDescManager.loadAllBehaviorDesc( True );
        
    def onInput_onTestStoreValue( self ):
        self.storeValue();

    def storeValue( self ):
        timer = altools.TimeMethod();
        behaviordata.usageDataManager.storeAll();]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onReloadBehavior" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onTestStoreValue" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onTestPerf" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Output name="output_ListPossibleBehavior" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                                                                </Box>
                                                                <Box name="TheMind_Selector_ref" robot="" id="7" tooltip="Choose to launch some behaviors" bitmap_expanded="1" plugin="" x="363" y="123">
                                                                    <bitmap>media/images/box/icons_appu/mind.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# The Mind Selector
# v1.0
import altools
import behaviordata
import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );        

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass
        
    def launchThisBehavior( self, strBeName ):
        if( len( strBeName ) < 5 ):
            print( "ERROR: %s: weird error: behavior '%s' doesn't seems valid" % (self.boxName, strBeName ) );
            return;
        # remove root path
        strRootPathToRemove = behaviordata.getStandardBehaviorPath();
        self.log( "strBeName[:len(strRootPathToRemove)]: %s" % str( strBeName[:len(strRootPathToRemove)] ) );
        self.log( "strBeName: %s" % str( strBeName ) );        
        if( strRootPathToRemove == strBeName[:len(strRootPathToRemove)] ):
            strBeName = strBeName[len(strRootPathToRemove):];
        self.log( "strBeName: %s" % str( strBeName ) );
        self.output_launchBehavior( strBeName );        

    def onInput_onStart(self, listBehaviors):
    
        # force the launch of a specific behavior
        if( self.life.getOrder() ==  altools.const.order_behavior ):
            orders = self.life.getOrderParams();
            if( len( orders ) < 1 ):
                print( "%s: Order bugged: no params" % self.boxName );
                return;
            if( altools.isArray( orders ) ):
                strOrder = orders[0];
            else:
                strOrder = orders;
            print( "%s: Order => Launching behavior '%s'" % (self.boxName, strOrder ) );
            self.launchThisBehavior( strOrder );
            self.life.resetOrder();
            return;
            
        if( len( listBehaviors ) > 0 ):
            print( "%s: %s: launchable behaviors: %s" % ( self.boxName, altools.getHumanTimeStamp(), str( listBehaviors ) ) );
#            behaviordata.extractedData.dumpAllExtractedData(); # to debug and understand following log          

            listSystem = [];
            for behav in listBehaviors:
                if behav[1]:
                    listSystem.append( behav[0] );
            if( len( listSystem ) > 0 ):
                # system behavior asked
                self.launchThisBehavior( listSystem[0] );             # TODO: better things, here we launch just the first one
                return;
                
            # user behavior, launch randomly 
            # TODO: better things than random
            # TODO: choose from the beginning of the sort, and assume the would be sorted by less prioritaire en premier
#            if( random.randint( 1, 100 ) > 60 ):
#            if( True ): # Always take one !
#                nNumBehaviors = random.randint( 0, len( listBehaviors ) - 1 );
#                self.launchThisBehavior( listBehaviors[nNumBehaviors][0] );
#                return;

            nNumBehaviors = -1;
          # change: take very often the first one, and assume they are well sorted !            
#            if( random.random() < 0.85 ):
#                nNumBehaviors = 0;
            if( nNumBehaviors == -1 ):
                # other algo: choose one beginning beginning by the first one:
                for i in range( len( listBehaviors ) ):
                    if( random.random() < 0.6 ):
                        nNumBehaviors = i;
                        break;
                # sinon en prend un au pif (mais peut etre quand meme le premier!)
            if( nNumBehaviors == -1 ):                
                nNumBehaviors = random.randint( 0, len( listBehaviors ) - 1 );
            print( "%s: %s: launching the behavior of index: %d: %s" % ( self.boxName, altools.getHumanTimeStamp(), nNumBehaviors, str( listBehaviors[nNumBehaviors][0] ) ) );
            self.launchThisBehavior( listBehaviors[nNumBehaviors][0] );
            return;
               
        self.output_none();
        #~ self.onStopped(p) #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip='Receive list of possible behavior.&#x0A;format:&#x0A;[&#x0A;[ &quot;xarname&quot;, is_system ],&#x0A;[ &quot;xarname&quot;, is_system ],&#x0A;...&#x0A;]' id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="output_launchBehavior" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_none" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="SetBehaviorName" robot="" id="15" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="512" y="117">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strBehaviorName ):
        behaviordata.extractedData.updateValue( "behavior_to_launch", strBehaviorName );
        self.onStopped(); #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="14" indexofinput="2" outputowner="10" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="14" indexofoutput="7" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="GotoAction" robot="" id="4" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="326" y="250">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(20)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>20</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="5" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="468" y="250">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="WaitReinit" robot="" id="6" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="134" y="111">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="GotoReinit" robot="" id="7" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="333" y="111">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WaitOrder_ref" robot="" id="10" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;*** ref box in: ./4_localize/Templates/TemplateWhile/ExampleTemplateWhile.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="132" y="478">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Template_White
# v1.0

import altools
import behaviordata
import time

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( "ALLife" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            nOrder = self.life.getOrder();
            if( nOrder != altools.const.order_none and nOrder != altools.const.order_behavior ):
                self.output_order();
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
# Template_White - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_order" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="100000" tooltip="period in seconds" id="6" />
                                            </Box>
                                            <Box name="GotoOrder" robot="" id="11" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="301" y="482">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(50)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>50</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="UpdateBlog" robot="" id="12" tooltip="Update the nao blog!" bitmap_expanded="1" plugin="" x="472" y="358">
                                                <bitmap>media/images/box/icons_appu/wikipedia.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import altools
import behaviordata
import datetime
import os

import abcdk.blog as blog

    
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bFirstTime = True;
        self.bSleeping = False;
        self.nCptStateChangeSleep = 0;
        self.bHotHead = False;
        self.bHotBody = False;
        self.bLowBattery = False;
        self.bScary = False;
        
    def __del__( self ):
        updateBlog( "gnouk gnouk!" );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        mem = altools.myGetProxy( "ALMemory" );
        if( self.bFirstTime ):
            self.bFirstTime = False;
            blog.blog.updateBlog( "ognagnouk!" );
            
        bSleep = behaviordata.isSleeping();
        if( bSleep != self.bSleeping ):
            self.nCptStateChangeSleep += 1;
            if( self.nCptStateChangeSleep > 20 ): # small histeresis on about (20=>120 sec)
                self.nCptStateChangeSleep = 0;
                self.bSleeping = bSleep;
                if( self.bSleeping ):
                    strMsg = "I'm sleeping...";
                else:
                    strMsg = "I'm awake.";         
                blog.blog.updateBlog( strMsg );
        else: # if( bSleep != self.bSleeping ) -
            self.nCptStateChangeSleep = 0; # must wait again for have a strong real change
                
        bHotHead = altools.getHeadTemperature() > 100;
        if( bHotHead != self.bHotHead ):
            self.bHotHead = bHotHead;
            if( self.bHotHead ):
                strMsg = "I've got a headache!";
                nEmo = blog.blog.sad;
            else:
                strMsg = "My head feels good.";
                nEmo = blog.blog.happy;
            blog.blog.updateEmo( strMsg, nEmo );
            
        bHotBody = behaviordata.extractedData.getValue( "body_temperature" ) > 74;
        if( bHotBody != self.bHotBody ):
            self.bHotBody = bHotBody;
            if( self.bHotBody ):
                strMsg = "I'm hot!";
                nEmo = blog.blog.hot;
            else:
                strMsg = "I'm cooler.";
                nEmo = blog.blog.happy;
            blog.blog.updateEmo( strMsg, nEmo );
            
        bLowBattery = mem.getData( "ALSentinel/BatteryLevel" ) < 2;
        if( bLowBattery != self.bLowBattery ):
            self.bLowBattery = bLowBattery;
            if( self.bLowBattery ):
                strMsg = "I'm hungry!";
                nEmo = blog.blog.sad;                
            else:
                strMsg = "I'm full of energy.";
                nEmo = blog.blog.happy;
            blog.blog.updateEmo( strMsg, nEmo );
            
        bScary = behaviordata.extractedData.getValue( "mood_state" ) == "scared";
        if( bScary != self.bScary ):
            self.bScary = bScary;
            if( self.bScary ):
                if( random.random() < 0.2 ): # ne le poste qu'une fois sur n ! Attention, en fait comme on teste une seule fois cette valeur, c'est deja assez rare de tomber pile sur un moment scary !
                    strMsg = "I'm scared!";
                    blog.blog.updateEmo( strMsg, blog.blog.fear );
                
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="Timer" robot="" id="13" tooltip="Send a bang with a predefined period." bitmap_expanded="1" plugin="" x="318" y="362">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False;

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value (seconds)." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the timer." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds). The box output will be stimulated at this period." id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="2" outputowner="11" indexofoutput="3" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="13" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Behavior" index="20" bitmap="">
                                        <Diagram scale="100">
                                            <Box name="InformLifeStep_p" robot="" id="5" tooltip="Inform the ALLife module of the current step" bitmap_expanded="1" plugin="" x="132" y="30">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.life.updateStep( 0 );

    def onInput_onStart(self):
        self.life.updateStep( self.getParameter( 'nNumStep' ) );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nNumStep" inherits_from_parent="0" content_type="1" value="6" default_value="0" min="0" max="100" tooltip="The step numbers" id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="9" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="294" y="36">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Box name="AssumeArmsInFront" robot="" id="7" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="143" y="146">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="IsStanding_p" robot="" id="1" tooltip="Is nao currenlty standing" bitmap_expanded="1" plugin="" x="115" y="112">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):

        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes(  )
        else:
            self.output_no(  )

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="AssumeBothArmsAreInFrontOfNao_Sitting_p" robot="" id="2" tooltip="Test each arms and move it in front of nao but only if required! - sitting version" bitmap_expanded="1" plugin="" x="234" y="217">
                                                                    <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="100">
                                                                                    <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>LArm</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>RArm</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="586" y="40">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                        <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="676" y="175">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                        <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-24.7879" />
                                                                                                    <Key frame="25" value="31.4628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="94.657" />
                                                                                                    <Key frame="25" value="0" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="38.3184" />
                                                                                                    <Key frame="25" value="-42.2783" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.261271" />
                                                                                                    <Key frame="25" value="-56.5999" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-24.7879" />
                                                                                                    <Key frame="25" value="31.4628" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-94.657" />
                                                                                                    <Key frame="25" value="0" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-38.3184" />
                                                                                                    <Key frame="25" value="42.2783" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="0.261271" />
                                                                                                    <Key frame="25" value="56.5999" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                        <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                        <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                    </Box>
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="AssumeBothArmsAreInFrontOfNao_Standing_p" robot="" id="3" tooltip="Test each arms and move it in front of nao but only if required! - standing version" bitmap_expanded="1" plugin="" x="271" y="29">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="100">
                                                                                    <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>LArm</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>RArm</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="585" y="53">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                        <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                        <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                        <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                    </Box>
                                                                                    <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="678" y="177">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                        <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                        <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                        <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                    </Box>
                                                                                    <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-24.7879" />
                                                                                                    <Key frame="25" value="85" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="94.657" />
                                                                                                    <Key frame="25" value="0" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="38.3184" />
                                                                                                    <Key frame="25" value="-42.2783" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.261271" />
                                                                                                    <Key frame="25" value="-56.5999" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-24.7879" />
                                                                                                    <Key frame="25" value="67" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-94.657" />
                                                                                                    <Key frame="25" value="0" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-38.3184" />
                                                                                                    <Key frame="25" value="42.2783" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="0.261271" />
                                                                                                    <Key frame="25" value="56.5999" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                        <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                        <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                        <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                    <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="time out comments" robot="" id="20" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="506" y="562">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("timeout: always while loading. While running, two options: timeout (reseted after loading) or no timeout")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>timeout: always while loading. While running, two options: timeout (reseted after loading) or no timeout</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="GotoReinit" robot="" id="6" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="299" y="195">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="10" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="441" y="195">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="Wait" robot="" id="11" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="120" y="647">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="HandleBehavior" robot="" id="1" tooltip="Gere la gestion des comportements&#x0A;v0.9" bitmap_expanded="1" plugin="" x="148" y="253">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_skip" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="LoadXarPreLoad_p" robot="" id="2" tooltip="Load a xar and execute it.&#x0A;v1.12&#x0A;&#x0A;Features:&#x0A;- loading at project init&#x0A;- loading at random moment&#x0A;- loading on the fly if not previously loaded&#x0A;&#x0A;The behaviors is reusable many times without reloading it.&#x0A;&#x0A;You can change behavior name at run time, reuse the box to load another behavior...&#x0A;&#x0A;Information about current state is posted to ALMemory so we can synchronise betweend process or robot.&#x0A;&#x0A;You can specify another robot than the local one.&#x0A;&#x0A;KNOWN LIMITATIONS: to detect end of a remote robot, your behavior should post something else than a bang at the end !!!" bitmap_expanded="1" plugin="" x="667" y="405">
                                                                    <bitmap>media/images/box/icons_appu/WheelLoader.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# LoadXar preload script v1.12

import mutex
import altools # just for the list of currently launched xar
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.strLoadedBehaviorID = -1;
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.mutex = mutex.mutex();
        self.strFilenameXar = self.getParameter("path") 
        self.strHostName = "";
        self.mem = None;
        self.fm = None;
        self.bHostUnreachable = False;
#        self.createProxy();
        self.strLoadedBehaviorID = -1;
        if( self.getParameter("bPreload") ):
            self.loadBehavior();

    def __del__(self):
        if( self.strLoadedBehaviorID != -1 ):
            try:
                self.fm.deleteBehavior(self.strLoadedBehaviorID)
            except BaseException, err:
                strMessage = "ERROR: %s: deleteBehavior: deleting '%s' failure" % ( self.boxName, self.strFilenameXar );
                self.log( strMessage );
                altools.logToFile( strMessage );
                self.output_OnError( "deleting failure" );
            self.informOthers( False );
    # __del__ - end
    
    def onLoad(self):
        self.strNameVarEnd = ""; # stores the variable to wait.
        self.bFinished = False;  # put to True when the behavior has stopped.    
        self.returnValue = 0;    
        self.bMustStop = False;
        self.bIsRunning = False;       
   # onLoad - end
    
    
    def createProxy( self ):
        if( self.strHostName != self.getParameter( 'strHostName' ) ):
            self.strHostName = self.getParameter( 'strHostName' );
            self.log( "%s: connecting to '%s'" % (self.boxName, self.strHostName ) );
            try:
                self.fm = ALProxy( "ALFrameManager", self.strHostName, 9559 );        
                self.mem = ALProxy( "ALMemory", self.strHostName, 9559 );
                self.bHostUnreachable = False;
            except:
                strMessage = "%s: ERROR: host '%s' unreachable !" % ( self.boxName, self.strHostName );
                self.log( strMessage );
                altools.logToFile( strMessage );                
                self.output_OnError( "host unreachable" );                
                self.bHostUnreachable = True;
    # createProxy - end
    
    def isBehaviorFinished_alternate( self, bResetIt = False ):
        "alternate method acked to detect the end - work even on another robot"
        "return true if the behavior is finished"
        "if bResetIt: mark it so as to notice that it hasn't finished yet."

        # for the moment it's not really clean, when the framemanager inserts a 0 in a variable whose value already was 0, then it's the end...
        if( bResetIt ):
            self.mem.raiseEvent( self.strNameVarEnd, True );
        # le bug courant: pour detecter correctement la fin sur un robot a distance, il faut que le behavior poste autre chose qu'un bang a la fin
        # on ne peut pas subscribe sur un robot distant, et le load init a bang la variable, et poste ensuite la valeur a la fin (souvent bang)
        # et on ne peut pas initialiser a autre chose, car ca déchargerait le comportement...
        if( self.strHostName == 'localhost' ):
            return False;
        value = self.mem.getData( self.strNameVarEnd )
        bFinished = value != None;
        if( bFinished ):
            self.returnValue = value;
        #~ self.log( "finis___%s: %s" % (strNameVarEnd, str( bFinished ) ) );
        return bFinished;    
    # isBehaviorFinished - end
        
    def informOthers( self, bLoaded, bRunning = False ):
        # post in almemory information about this behavior, so, others Nao can synchronise.
        self.mem.insertData( self.strFilenameXar + '_loaded', int( bLoaded ) );
        self.mem.insertData( self.strFilenameXar + '_running', int( bRunning ) );        
    # informOthers - end
    
    def loadBehavior( self ):
        if( self.strLoadedBehaviorID == -1 or self.strFilenameXar != self.getParameter("path") ):
        
            self.createProxy(); # recreate proxy in case of strHostName has been changed            
            if( self.bHostUnreachable ):
                return;
            if( self.strLoadedBehaviorID != -1 ):    
                try:
                    self.fm.deleteBehavior( self.strLoadedBehaviorID );
                except BaseException, err:
                    strMessage = "ERROR: %s: deleteBehavior: deleting '%s' failure" % ( self.boxName, self.strFilenameXar );
                    self.log( strMessage );
                    altools.logToFile( strMessage );
                    self.output_OnError( "deleting failure (2)" );
                
                self.informOthers( False );
            self.strFilenameXar = self.getParameter("path"); 
            if( self.strFilenameXar == "" ):
                self.log( self.boxName + ": loadBehavior: no behavior => nothing" );        
                return;            
#            self.strLoadedBehaviorID = self.fm.newBehaviorFromFile( self.strFilenameXar, "" );
#            self.mem.raiseEvent( self.strLoadedBehaviorID + "__onStopped", True );
            try:
                timeBegin = time.time();
                self.strLoadedBehaviorID = self.fm.newBehaviorFromFile( self.strFilenameXar, "" );            
                duration = time.time() - timeBegin;
                print( "%s: loading time: %fs" % ( self.strFilenameXar, duration ) );
            except BaseException, err:
                strMessage = "ERROR: %s: newBehaviorFromFile: loading '%s' failure" % ( self.boxName, self.strFilenameXar );
                self.log( strMessage );
                altools.logToFile( strMessage );                
                self.output_OnError( "loading failure" );
                return;
            self.informOthers( True );
        self.output_onReadyToLaunch(); # even if it was previously loaded, we are ready to launch...
    
    def onUnload(self):
        self.onInput_onStop();
        
    def onInput_onLoadXar(self):
        while( self.mutex.testandset() == False ):
            print( "%s: onInput_onLoadXar: locked" % self.boxName );
            time.sleep( 0.05 );
        self.loadBehavior();
        self.mutex.unlock();    
    # onInput_onLoadXar - end

    def onInput_onPlayXar(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;
            
        if( self.bHostUnreachable ):
            return;
            
        while( self.mutex.testandset() == False ):
            print( "%s: onInput_onPlayXar: locked" % self.boxName );
            time.sleep( 0.05 );
            
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing( 2 )" );
            self.mutex.unlock();            
            return;
            
   
        if( altools.isActiveXar( self.strFilenameXar ) ):
            self.log( self.boxName + ": Xar already active => nothing" );
            self.mutex.unlock();
            return;
            
        self.bMustStop = False;            
            
        self.createProxy(); # recreate proxy in case of strHostName has been changed
        
        self.loadBehavior(); # loadit in case of loading not already done before
        if( self.strLoadedBehaviorID == -1 ):
            self.mutex.unlock();        
            return; # loading failed
            
        if( self.bMustStop ):
            # we receive a stop while loading.
            self.mutex.unlock();            
            return;
        
        altools.addActiveXar( self.strHostName + self.strFilenameXar );
            
        self.bIsRunning = True;
        
        timeBegin = time.time();        
        try:
            # to manage the end of the behavior
            self.bFinished = False;
            self.returnValue = 0;
            self.strNameVarEnd = self.strLoadedBehaviorID + "__onStopped";
#            self.log( "strNameVarEnd: " + self.strNameVarEnd );
#            self.isBehaviorFinished_alternate( True );            # will destroy the behavior

            self.mem.subscribeToEvent( self.strNameVarEnd, self.getName(), "myDataChanged" ); # faire un event au lieu d'un micro event péte le retour vers le framemanager et empeche le comportement d'etre déloadé ! c'est une utilisation détourné d'un bug !!!
#            self.mem.subscribeToMicroEvent( self.strNameVarEnd, self.getName(), "", "myDataChanged" );
            
            self.output_onPlayingNow();
            self.informOthers( True, True );
            self.fm.playBehavior( self.strLoadedBehaviorID );
#            self.fm.completeBehavior( self.strLoadedBehaviorID ); # would be good, it it leaves hand to user !!!
            # wait the end
#            self.log( "----> 1 self.bFinished: %d, self.isBehaviorFinished_alternate(): %d" % (self.bFinished, self.isBehaviorFinished_alternate() ) );            
#            self.log( "----> 1 varend: %s" % str( self.mem.getData( self.strNameVarEnd, -1 ) ) );
            while( not self.bFinished and not self.isBehaviorFinished_alternate() and not self.bMustStop ):
                # on 1.6.0: we are passing in this loop while the behavior is running (playBehavior is not blocking)
                time.sleep( 0.2 );
#                self.log( "waiting..." );
            #~ self.strLoadedBehaviorID = -1;
#            self.mem.unsubscribeToMicroEvent( self.strNameVarEnd, self.getName() );
        except BaseException, err:
            self.strLoadedBehaviorID = -1; # often, it's because this behaviors has disapperd, so we reset it for next time
            strMessage = "ERROR: %s: '%s'" % ( self.boxName, err );
            self.log( strMessage );
            altools.logToFile( strMessage );
            self.onInput_onError( err );
#        self.log( "----> 3 self.bFinished: %d, self.isBehaviorFinished_alternate(): %d" % (self.bFinished, self.isBehaviorFinished_alternate() ) );
#        self.log( "----> 3 varend: %s" % str( self.mem.getData( self.strNameVarEnd, -1 ) ) );
        duration = time.time() - timeBegin;
        print( "%s: executing time: %fs" % ( self.strFilenameXar, duration ) );
        self.informOthers( True, False );
        self.bIsRunning = False;
        self.onStopped( self.returnValue );        
        altools.removeActiveXar( self.strHostName + self.strFilenameXar );
        self.mutex.unlock();
    # onInput_onPlayXar - end
        
    def onInput_onStop(self):
        self.bMustStop = True;
        if( self.strLoadedBehaviorID != -1 ):
            try:
                print( "%s: STOPPING: exitBehavior - BEGIN" % self.boxName );
                self.fm.exitBehavior( self.strLoadedBehaviorID ); # will send a stop # TODO: mettre ici deleteBehavior pour liberer la memoire (l'exit est fait dedans)
                print( "%s: STOPPING: exitBehavior - END" % self.boxName );
            except BaseException, err:
                strMessage =  "ERROR: %s: exitBehavior: stopping/deleting '%s' failure" % ( self.boxName, self.strFilenameXar );
                self.log( strMessage );
                altools.logToFile( strMessage );                

            self.bFinished = True; # allow us to be sure that we will get out of the "while" even if exitBehavior don't put the variable.

    def onInput_onError(self, strErrorDesc):
        self.output_OnError(str( strErrorDesc) );
    
    def myDataChanged(self, pDataName, pValue, pMessage):
        # pb: on n'est pas rappellé si on etait sur une autre ip que la notre !
        if( pDataName == self.strNameVarEnd ):
            self.bFinished = True;
            self.returnValue = pValue;
            
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onLoadXar" type="1" type_size="1" nature="1" inner="0" tooltip="Load the xar, but not launch it.&#x0A;&#x0A;This method does nothing if parameter bPreload is set (and you don&apos;t change the behavior name on the fly)." id="2" />
                                                                    <Input name="onPlayXar" type="1" type_size="1" nature="2" inner="0" tooltip="Play the xar now.&#x0A;If not previously loaded, load it on the fly, then run it." id="3" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                                    <Output name="output_onReadyToLaunch" type="1" type_size="1" nature="2" inner="0" tooltip="The behavior is loaded and ready to launch.&#x0A;&#x0A;Warning: this output can be triggered more than once. And won&apos;t be triggered at init phase when bPreload is set." id="5" />
                                                                    <Output name="output_onPlayingNow" type="1" type_size="1" nature="2" inner="0" tooltip="This output is triggered just before the behavior is started." id="6" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished.&#x0A;The value returned is the value returned by the behavior." id="7" />
                                                                    <Output name="output_OnError" type="3" type_size="1" nature="2" inner="0" tooltip="in case of an error occurs, this output will be triggered" id="8" />
                                                                    <Parameter name="path" inherits_from_parent="0" content_type="3" value="/home/nao/behaviors/SayHello/behavior.xar" default_value="/home/nao/behaviors/SayHello/behavior.xar" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="bPreload" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Disable it if you don&apos;t want to have loading at the initialisation of the box" id="10" />
                                                                    <Parameter name="strHostName" inherits_from_parent="0" content_type="3" value="localhost" default_value="localhost" custom_choice="0" tooltip="hostname/ip of the robot on which you want to launch the behavior. default: localhost: on your own robot" id="11" />
                                                                </Box>
                                                                <Box name="ManageBehavior" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="355" y="243">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        behaviordata.behaviorDescManager.loadAllBehaviorDesc();
        self.life = ALProxy( 'ALLife' );
        self.debug( "init" );
        
    def debug( self, strText ):
        print( "%s: DBG: %s: %s" % ( self.boxName, str( time.time() ), strText ) );
        pass


    def onLoad(self):
        #~ puts code for box initialization here
        self.debug( "onLoad" );
        self.bBehaviorLoaded = False;
        self.bBehaviorStarted = False;
        self.strBehaviorName = "";

    def onUnload(self):
        self.debug( "onUnload" );    
        self.onInput_onStop();

    def onInput_onStart(self):
        self.debug( "onStart" );
    
        if( self.bBehaviorStarted ):
            print( "ERR: %s: already started => nothing (behav: '%s')" % ( self.boxName, self.strBehaviorName) );
            return;
            
        self.bBehaviorStarted = True;
    
        self.strBehaviorName = behaviordata.extractedData.getValue( "behavior_to_launch" );
        print( "%s: starting with strBehaviorName: '%s'" % ( self.boxName, self.strBehaviorName ) );
        self.strBehaviorNameAbsPath = behaviordata.getStandardBehaviorPath() + self.strBehaviorName;
        print( "%s: starting with strBehaviorNameAbsPath: '%s'" % ( self.boxName, self.strBehaviorNameAbsPath ) );        
        
        p = self.strBehaviorNameAbsPath + "/behavior.xar";
        self.output_name_to_load(p) #~ activate output of the box
        behaviordata.extractedData.updateValue( "last_behavior_name", self.strBehaviorName );        
        self.life.updateCurrentBehavior( self.strBehaviorName );  
        behaviordata.behaviorDescManager.updateStats_start( self.strBehaviorNameAbsPath );        
        time.sleep( 0.04 ); # time for the parameters to be taken
        self.output_load_it();
        
    def onInput_onStop(self):
        self.debug( "onStop" );
        if( self.bBehaviorStarted ):
            behaviordata.behaviorDescManager.updateStats_stop( self.strBehaviorNameAbsPath );
            self.bBehaviorStarted = False;
            self.onStopped();
        
    def onInput_onLoaded(self):
        self.debug( "onLoaded" );
        if( self.bBehaviorLoaded ):
            print( "WRN: %s: redundant loaded received! => nothing (behav: '%s') (time:%s) (normal: a known limitations of loadxar)" % ( self.boxName, self.strBehaviorName, str( time.time() ) ) );
            return;    
        behaviordata.behaviorDescManager.logIsLoaded( self.strBehaviorNameAbsPath );
        self.bBehaviorLoaded = True;
        self.output_launch_it();
                
    def onInput_onTerminated(self):
        self.debug( "onTerminated" );
        self.onInput_onStop();
        
    def onInput_onError(self, p ):
        self.debug( "onError(%s)" % p );    
        behaviordata.behaviorDescManager.log( p );
        self.onInput_onStop();

    def onInput_onTimeOut_loading(self ):        
        self.debug( "onTimeOut_loading" );
        if( self.bBehaviorLoaded ):
            self.debug( "onTimeOut_loading: already loaded" );        
            return;
        behav = behaviordata.behaviorDescManager.findOneBehavior( self.strBehaviorName );            
        if( behav == None ):
            print( "WNG: %s: the behavior %s is not found" % ( self.boxName, self.strBehaviorName ) );
            
        behaviordata.behaviorDescManager.logTimeoutLoad( self.strBehaviorNameAbsPath );
        
        print( "%s: ------------------- behaviors -------- time out (1) !!! " % self.boxName );
        leds = ALProxy( 'ALLeds' );
        leds.fadeRGB( 'FaceLeds', 0x00FF00, 0.5 );            
        self.onInput_onStop();
    
    def onInput_onTimeOut(self ):
        self.debug( "onTimeOut" );
         # on ne devrait plus passer dans cette méthode si on n'a pas chargé le behavior
        behav = behaviordata.behaviorDescManager.findOneBehavior( self.strBehaviorName );
        if( behav != None ):
            if( not behav.bInterruptableByTimeout and self.bBehaviorLoaded ):
                print( "WNG: Timeout: %s: the behavior %s is not InterruptableByTimeout, so leaving him" % (self.boxName, self.strBehaviorName ) );
                return; # no timeout for this behavior
        else:
            print( "WNG: %s: the behavior %s is not found" % ( self.boxName, self.strBehaviorName ) );
            
        if( not self.bBehaviorLoaded ):
            behaviordata.behaviorDescManager.logTimeoutLoad( self.strBehaviorNameAbsPath );
        else:
            behaviordata.behaviorDescManager.logTimeoutExecute( self.strBehaviorNameAbsPath );
            
        print( "%s: ------------------- behaviors -------- time out (2) !!! " % self.boxName );
        leds = ALProxy( 'ALLeds' );
        leds.fadeRGB( 'FaceLeds', 0x00FF00, 0.5 );            
        self.onInput_onStop();
        
    def onInput_onTimeOutNoMove(self ):
        self.debug( "onInput_onTimeOutNoMove" );
        if( not self.bBehaviorLoaded ):
            return; # the 'timeout no move' is only when executing behaviors
        
        behav = behaviordata.behaviorDescManager.findOneBehavior( self.strBehaviorName );
        if( behav != None ):
            if( not behav.bInterruptableByTimeout and self.bBehaviorLoaded ):
                print( "WNG: TimeoutNoMove: %s: the behavior %s is not InterruptableByTimeout, so leaving him" % (self.boxName, self.strBehaviorName ) );
                return; # no timeout for this behavior
        else:
            print( "WNG: TimeoutNoMove: %s: the behavior %s is not found" % ( self.boxName, self.strBehaviorName ) );
            
        behaviordata.behaviorDescManager.logTimeoutNoMove( self.strBehaviorNameAbsPath );        
        print( "%s: ------------------- behaviors -------- time out (3) !!! " % self.boxName );
        leds = ALProxy( 'ALLeds' );
        leds.fadeRGB( 'FaceLeds', 0x00FF00, 0.5 );
        self.onInput_onStop();
        

    def onInput_onFall(self):
        behav = behaviordata.behaviorDescManager.findOneBehavior( self.strBehaviorName );    
        if( behav.bFallAuthorised and self.bBehaviorLoaded ):
                print( "WNG: Fall: %s: the behavior %s has fall authorised, so leaving him" % (self.boxName, self.strBehaviorName ) );        
                return;
        behaviordata.behaviorDescManager.logFall( self.strBehaviorNameAbsPath );
        self.onInput_onStop();
        
    def onInput_onSkipByUser(self):
        if( self.bBehaviorLoaded ):
            behaviordata.behaviorDescManager.updateStats_user_taste( self.strBehaviorNameAbsPath, -1. );
            self.output_skip();
        
    def onInput_onLovedByUser(self):
        if( self.bBehaviorLoaded ):
            behaviordata.behaviorDescManager.updateStats_user_taste( self.strBehaviorNameAbsPath, 0.5 );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onLoaded" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Input name="onTerminated" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Input name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                                                    <Input name="onTimeOut_loading" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                                                    <Input name="onTimeOut" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                                                    <Input name="onTimeOutNoMove" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                                                    <Input name="onFall" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                                                    <Input name="onLovedByUser" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                                                    <Input name="onSkipByUser" type="1" type_size="1" nature="1" inner="0" tooltip="" id="12" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="13" />
                                                                    <Output name="output_name_to_load" type="3" type_size="1" nature="2" inner="0" tooltip="" id="14" />
                                                                    <Output name="output_load_it" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" />
                                                                    <Output name="output_launch_it" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" />
                                                                    <Output name="output_skip" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" />
                                                                </Box>
                                                                <Box name="TimeOut_total_or_executing" robot="" id="4" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="357" y="692">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="180" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Box name="LoveAndHate" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="62" y="325">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="output_love" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                    <Output name="output_hate" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="Text Edit" robot="" id="14" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="95" y="51">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("caress")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>caress</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="Text Edit" robot="" id="15" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="126" y="294">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("tap")]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <text>tap</text>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_RegisterToValueBool - modif: repost every 2 sec and print tap user" robot="" id="16" tooltip="Subscribe to a value to know when data has changed - the data is a bool data.&#x0A;*** ref box in: ./2_wip/AutonomousLife/work/AutonomousLife.xar ***&#x0A;*** last modification date(git):   Fri Nov 27 18:45:08 2009 +0100 ***" bitmap_expanded="1" plugin="" x="323" y="291">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.strRegisteredDataName = "";
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.bStop = False;

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onDataName(self, pstrDataName):
        self.onInput_onStop();
        self.bStop = False;        
        self.strRegisteredDataName = pstrDataName;
        strTotalVarName = behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName;
        ALMemory.subscribeToMicroEvent( strTotalVarName, self.getName(), "", "myDataChanged" );
        while( not self.bStop ):
            # force a triggering even if not changed
            self.myDataChanged( strTotalVarName, ALMemory.getData( strTotalVarName ), "" );
            #self.myDataChanged( strTotalVarName, behaviordata.extractedData.getValue( strTotalVarName ), "" );
            time.sleep( 2.0 );
       
    def onInput_onStop(self):
        self.bStop = True;    
        if( self.strRegisteredDataName != "" ):
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName() );
            self.strRegisteredDataName = "";
        
    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        if( pValue ):
            print( "%s: Behaviors skipped by some tap from user" % self.boxName );
            self.output_Value_True();
        else:
            self.output_Value_False();
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDataName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_Value_True" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_Value_False" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="EnvData_RegisterToValueBool - modif: repost every 2 sec and print tap user" robot="" id="17" tooltip="Subscribe to a value to know when data has changed - the data is a bool data.&#x0A;*** ref box in: ./2_wip/AutonomousLife/work/AutonomousLife.xar ***&#x0A;*** last modification date(git):   Fri Nov 27 18:45:08 2009 +0100 ***" bitmap_expanded="1" plugin="" x="267" y="60">
                                                                                        <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.strRegisteredDataName = "";
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.bStop = False;

    def onLoad(self):
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        self.onInput_onStop();

    def onInput_onDataName(self, pstrDataName):
        self.onInput_onStop();
        self.bStop = False;        
        self.strRegisteredDataName = pstrDataName;
        strTotalVarName = behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName;
        ALMemory.subscribeToMicroEvent( strTotalVarName, self.getName(), "", "myDataChanged" );
        while( not self.bStop ):
            # force a triggering even if not changed
            self.myDataChanged( strTotalVarName, ALMemory.getData( strTotalVarName ), "" );
            #self.myDataChanged( strTotalVarName, behaviordata.extractedData.getValue( strTotalVarName ), "" );
            time.sleep( 2.0 );
       
    def onInput_onStop(self):
        self.bStop = True;    
        if( self.strRegisteredDataName != "" ):
            ALMemory.unsubscribeToMicroEvent( behaviordata.extractedData.getStmRootName() + self.strRegisteredDataName, self.getName() );
            self.strRegisteredDataName = "";
        
    def myDataChanged(self, pDataName, pValue, pMessage):
#        self.log( "%s.myDataChanged: msg: %s; dataname: %s; value: %s" % ( self.boxName, str( pMessage ), str( pDataName ), str( pValue ) ) );
        if( pValue ):
            print( "%s: Behaviors skipped by some tap from user" % self.boxName );
            self.output_Value_True();
        else:
            self.output_Value_False();
        
pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onDataName" type="3" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_Value_True" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_Value_False" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="TextLovedByUser" robot="" id="26" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="387" y="61">
                                                                                        <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="-1">
                                                                                                        <Box name="Enter name here" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="96" y="76">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "You likes this behavior..."
		sFrench = "Tu aimes ce que je viens de faire!"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <english>You likes this behavior...</english>
                                                                                                                <french>Tu aimes ce que je viens de faire!</french>
                                                                                                                <spanish></spanish>
                                                                                                                <italian></italian>
                                                                                                                <german></german>
                                                                                                                <chinese></chinese>
                                                                                                                <polish></polish>
                                                                                                                <korean></korean>
                                                                                                                <language>1</language>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="SayTextPrerender_ref" robot="" id="2" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.1" bitmap_expanded="1" plugin="" x="396" y="76">
                                                                                                            <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[# SayTextPrerender - v1.1
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared();            
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking();
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                                            <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                                                            <Output name="output_onPrepared" type="1" type_size="1" nature="2" inner="0" tooltip="the sound is prepared and ready to be launched" id="5" />
                                                                                                            <Output name="output_onStartSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak" id="6" />
                                                                                                            <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking" id="7" />
                                                                                                            <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                                                                            <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                                                                            <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                                                                            <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="7" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="3" />
                                                                                    <Link inputowner="17" indexofinput="2" outputowner="14" indexofoutput="3" />
                                                                                    <Link inputowner="26" indexofinput="2" outputowner="17" indexofoutput="4" />
                                                                                    <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="26" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="16" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="AnimWhileLoading" robot="" id="29" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="856" y="160">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="AnimCircleEyes" robot="" id="2" tooltip="Beautiful eyes circle animation&#x0A;*** ref box in: ./2_wip/leds/LedsAnimation.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="192" y="150">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import time

class MyClass(GeneratedClass):
  """ comments """
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    self.log( self.getName() + ": start - begin" );
    
    if( self.bIsRunning ):
      print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;
    
    while( not self.bMustStop ):
        altools.circleLedsEyes( 0xff, 0.6, 3 );
        time.sleep( 0.5 );
      
      
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="AnimBrainLeds_Worms_p" robot="" id="3" tooltip="Sapin animation on brain leds!" bitmap_expanded="1" plugin="" x="196" y="68">
                                                                                        <bitmap>media/images/box/icons_appu/brainleds2_n&amp;b.png</bitmap>
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import time
import altools
    
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        dcm = ALProxy( "DCM" );
        rValueMax = 0.8;
        nLenWorm = self.getParameter( 'nLenWorm' );
        nPosWorm = 0;
        while( not self.bMustStop ):
            rPeriod= self.getParameter( 'rPeriod' );
            # light the first one
            riseTime = dcm.getTime( int(rPeriod*1000) );
            strDeviceName = altools.getTactilLedName( nPosWorm );
            dcm.set( [ strDeviceName, "Merge",  [[ rValueMax, riseTime ]] ] );
            strDeviceName = altools.getTactilLedName( (nPosWorm-nLenWorm)%12 );            
            dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime ]] ] );            
            # erase last one
            nPosWorm += 1;
            if( nPosWorm > 11 ):
                nPosWorm = 0;
#            self.log( "nPosWorm: %d" % nPosWorm );
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.2" default_value="0.5" min="0" max="100" tooltip="period in second (actually it&apos;s the period / 12)" id="5" />
                                                                                        <Parameter name="nLenWorm" inherits_from_parent="0" content_type="1" value="6" default_value="4" min="1" max="10" tooltip="" id="6" />
                                                                                    </Box>
                                                                                    <Box name="IsStanding_p" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="210" y="437">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="Enter name here" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="217" y="298">
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Please wait while loading behaviors."
		sFrench = "Attend un peu je charge un truc."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <english>Please wait while loading behaviors.</english>
                                                                                            <french>Attend un peu je charge un truc.</french>
                                                                                            <spanish></spanish>
                                                                                            <italian></italian>
                                                                                            <german></german>
                                                                                            <chinese></chinese>
                                                                                            <polish></polish>
                                                                                            <korean></korean>
                                                                                            <language>0</language>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="sit_loading2_start" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="385" y="541">
                                                                                        <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-2.72705" />
                                                                                                    <Key frame="36" value="-2.63916" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-13.7135" />
                                                                                                    <Key frame="36" value="29.1776" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="20.0369" />
                                                                                                    <Key frame="36" value="-29.0946" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="34.6269" />
                                                                                                    <Key frame="36" value="4.74375" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-118.129" />
                                                                                                    <Key frame="36" value="-44.7393" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-18.7185" />
                                                                                                    <Key frame="36" value="-60.555" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-68" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="35" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="18.7233" />
                                                                                                    <Key frame="36" value="-26.6288" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-43.7725" />
                                                                                                    <Key frame="36" value="-8.17633" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="93.5144" />
                                                                                                    <Key frame="36" value="51.9416" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="9.23104" />
                                                                                                    <Key frame="36" value="67.4154" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="56" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="41" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-42.3614" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="15.1198" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-88.5925" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="77.606" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="50.0959" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="0.79343" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-7.02893" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-89.3883" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="84.3785" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="46.3213" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-4.83164" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="stant_loading2_start" robot="" id="7" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="389" y="429">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-2.72705" />
                                                                                                    <Key frame="36" value="-2.63916" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-13.7135" />
                                                                                                    <Key frame="36" value="29.1776" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="20.0369" />
                                                                                                    <Key frame="36" value="-29.0946" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="34.6269" />
                                                                                                    <Key frame="36" value="4.74375" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-118.129" />
                                                                                                    <Key frame="36" value="-44.7393" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-18.7185" />
                                                                                                    <Key frame="36" value="-60.555" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-68" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="35" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="18.7233" />
                                                                                                    <Key frame="36" value="-26.6288" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="-43.7725" />
                                                                                                    <Key frame="36" value="-8.17633" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="93.5144" />
                                                                                                    <Key frame="36" value="51.9416" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="19" value="9.23104" />
                                                                                                    <Key frame="36" value="67.4154" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="56" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="41" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-17.0486" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="3.86964" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="11.7799" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-5.29104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="6.94104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-3.68905" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-4.04062" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="11.6872" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="-5.90622" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="7.56109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="36" value="3.07861" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="sit_loading2_loop" robot="" id="8" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="515" y="541">
                                                                                        <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        ""

    def onInput_onStop(self):
        self.onEnd()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Output name="onEnd" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-21.448" />
                                                                                                    <Key frame="30" value="21.3601" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="26.0135" />
                                                                                                    <Key frame="30" value="26.0135" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-11.8678" />
                                                                                                    <Key frame="30" value="-23.3768" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="0.498473" />
                                                                                                    <Key frame="30" value="21.2722" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-48.8702" />
                                                                                                    <Key frame="30" value="-52.2053" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-65.2133" />
                                                                                                    <Key frame="30" value="-84.9058" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-23.2889" />
                                                                                                    <Key frame="30" value="-11.8678" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-21.2722" />
                                                                                                    <Key frame="30" value="-0.498473" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="52.1174" />
                                                                                                    <Key frame="30" value="48.8702" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="84.9058" />
                                                                                                    <Key frame="30" value="65.2133" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="stant_loading2_loop" robot="" id="9" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="519" y="429">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        ""

    def onInput_onStop(self):
        self.onEnd()]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Output name="onEnd" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-21.448" />
                                                                                                    <Key frame="30" value="21.3601" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="26.0135" />
                                                                                                    <Key frame="30" value="26.0135" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-11.8678" />
                                                                                                    <Key frame="30" value="-23.3768" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="0.498473" />
                                                                                                    <Key frame="30" value="21.2722" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-48.8702" />
                                                                                                    <Key frame="30" value="-52.2053" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-65.2133" />
                                                                                                    <Key frame="30" value="-84.9058" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-23.2889" />
                                                                                                    <Key frame="30" value="-11.8678" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-21.2722" />
                                                                                                    <Key frame="30" value="-0.498473" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="52.1174" />
                                                                                                    <Key frame="30" value="48.8702" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="84.9058" />
                                                                                                    <Key frame="30" value="65.2133" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="SayTextPrerender_p" robot="" id="10" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.02" bitmap_expanded="1" plugin="" x="519" y="309">
                                                                                        <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[# SayTextPrerender - v1.04
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        self.nStep = self.nStateInit;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
#        txt = "\\RSPD=85\\ " + altools.transformAsciiAccentForSynthesis( p ); # not usefull now!
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        if( not self.getParameter( 'bJustPrepare' ) ):
            self.nStep = self.nStateSpeaking;
            self.output_onStartSpeaking();
            if( self.getParameter( "bWithLight" ) ):
                altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
            else:
                altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.nStep = self.nStateStopped;
        self.output_onStopSpeaking();
        
    def onInput_onStop(self):
        while( self.nStep == self.nStatePreparing ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                                        <Output name="output_onStartSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak" id="5" />
                                                                                        <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking" id="6" />
                                                                                        <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="use light in eyes to speak" id="7" />
                                                                                        <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="8" />
                                                                                        <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="9" />
                                                                                        <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="10" />
                                                                                    </Box>
                                                                                    <Box name="IsDemoStyle_ref" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="74" y="294">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.isAutonomousStyleDemo() ):
            self.output_yes();
        else:
            self.output_no();
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="9" indexofoutput="4" />
                                                                                    <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                                                    <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="3" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Exit" robot="" id="5" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="598" y="45">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="faststiffbody" robot="" id="36" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="172" y="84">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isDisableStiffness() ):
            self.onStopped();        
            return;
        if( self.life.isFeetFixed() and behaviordata.branchOnNaoPosition() != 0 ):
            ALMotion.setStiffnesses( 'Body', 1. );
            ALMotion.setStiffnesses( ['LAnklePitch', 'LKneePitch'], 0. );
        else:    
            rBodyStiffness = 1.0;
            altools.assumeStiffness( 'LArm', rBodyStiffness, True );
            altools.assumeStiffness( 'RArm', rBodyStiffness, True );
            altools.assumeStiffness( 'LLeg', rBodyStiffness, True );
            altools.assumeStiffness( 'RLeg', rBodyStiffness, True );
            altools.assumeStiffness( 'Head', rBodyStiffness );
        self.onStopped();
            

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="36" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="36" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="faststiffbody" robot="" id="36" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="231" y="79">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( self.life.isDisableStiffness() ):
            return;    
        if( self.life.isFeetFixed() and behaviordata.branchOnNaoPosition() != 0 ):
            ALMotion.setStiffnesses( 'Body', 1. );
            ALMotion.setStiffnesses( ['LAnklePitch', 'LKneePitch'], 0. );
        else:    
            rBodyStiffness = 1.0;
            altools.assumeStiffness( 'LArm', rBodyStiffness, True );
            altools.assumeStiffness( 'RArm', rBodyStiffness, True );
            altools.assumeStiffness( 'LLeg', rBodyStiffness, True );
            altools.assumeStiffness( 'RLeg', rBodyStiffness, True );
            altools.assumeStiffness( 'Head', rBodyStiffness );
        self.onStopped();
            

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="HandlePosChange" robot="" id="6" tooltip="Memorize the current position and exit if it changes" bitmap_expanded="1" plugin="" x="58" y="443">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.info = ALProxy( 'ALInfo' );

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        strPositionOrig = self.info.getBodyPosition();
        self.log( "%s: beginning in position: %s" % ( self.boxName, strPositionOrig ) );
        if( strPositionOrig == "standing" or strPositionOrig == "sitting" or strPositionOrig == "crouching" ):
            rPeriod = self.getParameter( 'rPeriod' );
            strPositionPrev = strPositionOrig;
            while( not self.bMustStop ):
                strPosition = self.info.getBodyPosition();
                if( strPositionPrev != strPosition ):
                    # si la position vient juste de changer, on attend une frame de plus pour etre sur qu'on est pas en train de se lever ou de ...
                    strPositionPrev = strPosition;
                else:
                    if( strPosition != "unknown" and strPositionOrig != strPosition ):
                        self.output_position_changed();
                time.sleep( rPeriod );
            # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="output_position_changed" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="1000" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="PoseStandard_ref" robot="" id="7" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="849" y="312">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <BehaviorLayer name="behavior_layer1" mute="0">
                                                                            <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                <Diagram scale="-1">
                                                                                    <Box name="IsStanding_ref" robot="" id="1" tooltip="Is nao currenlty standing" bitmap_expanded="1" plugin="" x="91" y="238">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self ):

        if( behaviordata.branchOnNaoPosition() == 0 ):
            self.output_yes()
        else:
            self.output_no()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                    </Box>
                                                                                    <Box name="IsItHot" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="100" y="49">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( behaviordata.extractedData.getValue( 'body_temperature' ) > 64 ):
            self.output_yes();
        else:
            self.output_no();        
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Output name="output_yes" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Output name="output_no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                    </Box>
                                                                                    <Box name="AssumeBothArmsAreInFrontOfNao_Sitting_p" robot="" id="3" tooltip="Test each arms and move it in front of nao but only if required! - sitting version" bitmap_expanded="1" plugin="" x="292" y="349">
                                                                                        <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="100">
                                                                                                        <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>LArm</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>RArm</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="586" y="40">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                            <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="676" y="175">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront() #~ activate output of the box
        else:
            self.output_onBack() #~ activate output of the box
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                            <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                                            <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                                                                        </Box>
                                                                                                        <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-24.7879" />
                                                                                                                        <Key frame="25" value="31.4628" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="94.657" />
                                                                                                                        <Key frame="25" value="0" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="38.3184" />
                                                                                                                        <Key frame="25" value="-42.2783" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-0.261271" />
                                                                                                                        <Key frame="25" value="-56.5999" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-24.7879" />
                                                                                                                        <Key frame="25" value="31.4628" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-94.657" />
                                                                                                                        <Key frame="25" value="0" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-38.3184" />
                                                                                                                        <Key frame="25" value="42.2783" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="0.261271" />
                                                                                                                        <Key frame="25" value="56.5999" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                                            <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                                            <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="AssumeBothArmsAreInFrontOfNao_Standing_p" robot="" id="4" tooltip="Test each arms and move it in front of nao but only if required! - standing version" bitmap_expanded="1" plugin="" x="293" y="226">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                        <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <BehaviorLayer name="behavior_layer1" mute="0">
                                                                                                <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                                                                    <Diagram scale="100">
                                                                                                        <Box name="TextEdit" robot="" id="1" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="407" y="40">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("LArm")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>LArm</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="TextEdit" robot="" id="2" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="497" y="175">
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("RArm")]]>
</content>
                                                                                                            </script>
                                                                                                            <pluginContent>
                                                                                                                <text>RArm</text>
                                                                                                            </pluginContent>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                                                        </Box>
                                                                                                        <Box name="GetHandArea_p" robot="" id="3" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="585" y="53">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                            <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                                            <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                                            <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="GetHandArea_p" robot="" id="4" tooltip="Compute hand position to know if hand are in the front area of nao or on the behind.&#x0A;&#x0A;Warning: The Arm must be stiffness to get the right value" bitmap_expanded="1" plugin="" x="678" y="177">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strHandName ):
        aListHand = ["LArm","RArm"];
        aCurrentHandPos = ALMotion.getPosition( strHandName, 0, True ); # 0 = SPACE_BODY # return: [x: from center of nao to his front; y: from center to left; z: from center to head (up)(top)(altitude) ]
        self.log( "%s" % str( aCurrentHandPos ) );
        if( aCurrentHandPos[0] >= 0.07 ): #  and aCurrentHandPos[2] >= 0.0 => if it's too low, it could be stuck rear under the legs BUT in fact to remove the case, we just have to want a position > 0.07 instead of 0.00
            self.output_onFront();
        elif( aCurrentHandPos[0] <= -0.07 ):
            self.output_onBack();
        else:
            self.output_onSide();
        pass]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip='Box behavior starts when a signal is received on this input.&#x0A;&#x0A;Parameter is &quot;LHand&quot; or &quot;RHand&quot;' id="2" />
                                                                                                            <Output name="output_onFront" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in front of Nao" id="3" />
                                                                                                            <Output name="output_onSide" type="1" type_size="1" nature="2" inner="0" tooltip="arm is at the side of Nao" id="4" />
                                                                                                            <Output name="output_onBack" type="1" type_size="1" nature="2" inner="0" tooltip="arms is in the back of Nao" id="5" />
                                                                                                        </Box>
                                                                                                        <Box name="MovementL" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="722" y="40">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-24.7879" />
                                                                                                                        <Key frame="25" value="85" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="94.657" />
                                                                                                                        <Key frame="25" value="0" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="38.3184" />
                                                                                                                        <Key frame="25" value="-42.2783" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-0.261271" />
                                                                                                                        <Key frame="25" value="-56.5999" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="MovementR" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="812" y="175">
                                                                                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                                            <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                                                <watches />
                                                                                                                <ActuatorList>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-24.7879" />
                                                                                                                        <Key frame="25" value="67" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-94.657" />
                                                                                                                        <Key frame="25" value="0" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="-38.3184" />
                                                                                                                        <Key frame="25" value="42.2783" />
                                                                                                                    </ActuatorCurve>
                                                                                                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                                        <Key frame="15" value="0.261271" />
                                                                                                                        <Key frame="25" value="56.5999" />
                                                                                                                    </ActuatorCurve>
                                                                                                                </ActuatorList>
                                                                                                            </Timeline>
                                                                                                        </Box>
                                                                                                        <Box name="Synchro" robot="" id="7" tooltip="When the two first input has been activated, it will trigger.&#x0A;*** state: 2_wip ***&#x0A;*** ref box in: 2_wip/MiscAlex.xar ***&#x0A;*** last modification date(svn): 2009-06-23 15:51:39 +0200 ***" bitmap_expanded="1" plugin="" x="846" y="581">
                                                                                                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                                                            <script language="4">
                                                                                                                <content>
                                                                                                                    <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.nNbrInput = 2; # setting the number of input
    self.abIsActivated = [];
    for i in range(0, self.nNbrInput):
      self.abIsActivated.append( False );
    
    
    # nNumInput numero de l'entr�e 1..n
  def activate( self, nNumInput ):
    self.abIsActivated[nNumInput-1] = True;
    bAll = True;
    for i in range(0, self.nNbrInput):
      if( not self.abIsActivated[i] ):
        bAll = False;
        break;
    if( bAll ):
        self.outputTrigger();
        self.resetActivated();

    
  def resetActivated( self ):
    for i in range(0, self.nNbrInput):
      self.abIsActivated[i] = False;
    
  def onUnload(self):
    #puts code for box cleanup here
    pass

  def onInput_onInput1(self):
    self.activate( 1 );

  def onInput_onInput2(self):
    self.activate( 2 );
    
  def onInput_onReset(self):
    self.resetActivated();]]>
</content>
                                                                                                            </script>
                                                                                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                                            <Input name="onInput1" type="1" type_size="1" nature="1" inner="0" tooltip="first input to activate" id="2" />
                                                                                                            <Input name="onInput2" type="1" type_size="1" nature="1" inner="0" tooltip="second input to activate" id="3" />
                                                                                                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset the two inputs" id="4" />
                                                                                                            <Output name="outputTrigger" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the two input has been triggered" id="5" />
                                                                                                        </Box>
                                                                                                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                                                                                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" />
                                                                                                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                                                                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                                                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                                                        <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="5" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                                                        <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="3" />
                                                                                                        <Link inputowner="7" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                                                    </Diagram>
                                                                                                </BehaviorKeyframe>
                                                                                            </BehaviorLayer>
                                                                                            <ActuatorList />
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Pose" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="413" y="348">
                                                                                        <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.705538" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-1.40867" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="63.4554" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="34.4512" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-72.3373" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-49.6564" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-2.46337" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="6.60144" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="60.0325" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-25.9305" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="88.5925" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="37.3564" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.266079" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="11.7014" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-51.0627" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="21.8874" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-91.6687" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="79.3638" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="50.3596" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.876513" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-11.5993" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-90.8824" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="90.443" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="43.333" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-1.93121" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Box name="Pose" robot="" id="6" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="414" y="219">
                                                                                        <bitmap>media/images/box/movement/move.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                                        <Timeline fps="15" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                                            <watches />
                                                                                            <ActuatorList>
                                                                                                <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="1" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-1.40867" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="1" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-12.5709" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="80.067" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="14.0603" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-58.0109" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-35.0664" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-6.94585" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="6.18143" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="79.2807" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-13.8893" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="60.2034" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="28.0399" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-0.178188" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="12.0614" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-22.9373" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="3.43018" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="13.0104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-5.29104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="6.94104" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-2.72224" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-3.86483" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="8.25942" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="-4.83164" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="9.93417" />
                                                                                                </ActuatorCurve>
                                                                                                <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                                    <Key frame="15" value="2.46337" />
                                                                                                </ActuatorCurve>
                                                                                            </ActuatorList>
                                                                                        </Timeline>
                                                                                    </Box>
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                                                                    <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                        <ActuatorList />
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="TimeOut_loading" robot="" id="8" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="355" y="562">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                                    <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="25" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                                                </Box>
                                                                <Box name="DetectNoMove" robot="" id="9" tooltip="Output a signal if the robot hasn&apos;t move for a portion of time (timeout)&#x0A;&#x0A;v0.9" bitmap_expanded="1" plugin="" x="721" y="612">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# DetectNoMove
# v0.9
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.arLastPos = ALMotion.getAngles( "Body", True );

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def isMoving(self):
        arPos = ALMotion.getAngles( "Body", True );
        rDiffMax = 0.05;
        for i in range( len( self.arLastPos ) ):
            if( abs( arPos[i] - self.arLastPos[i] ) > rDiffMax ):
                self.arLastPos = arPos;
                return True;
#        self.arLastPos = arPos;                 # if he doesn't move
        return False;
    # isMoving - end
        

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        timeLastMove = time.time();
        while( not self.bMustStop ):
            bMove = self.isMoving();
#            self.log( "bMove = %d" % bMove );
            if( bMove ):
                timeLastMove = time.time();
            else:
                if( time.time() - timeLastMove > 10. ):
                    self.log( "%s: output_timeout_no_move" % self.boxName );
                    self.output_timeout_no_move();
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
# DetectNoMove - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="output_timeout_no_move" type="1" type_size="1" nature="2" inner="0" tooltip="outputted every time a timeout is detected" id="5" />
                                                                    <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="100000" tooltip="period in seconds" id="6" />
                                                                    <Parameter name="rTimeout" inherits_from_parent="0" content_type="2" value="20" default_value="10" min="0" max="1e+10" tooltip="Maximum time without moving in seconds" id="7" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="9" outputowner="1" indexofoutput="14" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="16" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="15" />
                                                                <Link inputowner="1" indexofinput="5" outputowner="2" indexofoutput="7" />
                                                                <Link inputowner="1" indexofinput="6" outputowner="2" indexofoutput="8" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="8" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="16" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="11" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="12" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="13" />
                                                                <Link inputowner="29" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="29" indexofinput="3" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="36" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="10" outputowner="6" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="17" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="4" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="7" outputowner="8" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="9" outputowner="9" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="GotoEndOfAction" robot="" id="2" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="296" y="259">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(30)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>30</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="WaitOrder_p" robot="" id="3" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;*** ref box in: ./4_localize/Templates/TemplateWhile/ExampleTemplateWhile.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" bitmap_expanded="1" plugin="" x="149" y="373">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Template_White
# v1.0

import altools
import behaviordata
import time

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( "ALLife" );
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            nOrder = self.life.getOrder();
            if( nOrder != altools.const.order_none and nOrder != altools.const.order_behavior ):
                self.output_order();
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
# Template_White - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="output_order" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="100000" tooltip="period in seconds" id="6" />
                                            </Box>
                                            <Box name="GotoOrder" robot="" id="4" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="322" y="380">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(50)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>50</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="FallManager" robot="" id="8" tooltip="Enable or disable the fall manager." bitmap_expanded="1" plugin="" x="37" y="423">
                                                <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        proxy = ALProxy( "ALMotion" )
        proxy.setMotionConfig([["ENABLE_FALL_MANAGEMENT_PROTECTION",False]])
        pass

    def onInput_onEnable(self):
        proxy = ALProxy( "ALMotion" )
        proxy.setMotionConfig([["ENABLE_FALL_MANAGEMENT_PROTECTION",True]])

    def onInput_onDisable(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onEnable" type="1" type_size="1" nature="1" inner="0" tooltip="Enable the fall manager." id="2" />
                                                <Input name="onDisable" type="1" type_size="1" nature="1" inner="0" tooltip="Disable the fall manager." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Disable the fall manager." id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="13" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="556" y="33">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="60" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Box name="Timer" robot="" id="14" tooltip="Send a bang with a predefined period." bitmap_expanded="1" plugin="" x="421" y="37">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False;

    def startTimer(self, period = 1):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer(period, self.startTimer, [period])
        self.tb.start()
        self.timerOutput()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Period (s)") )

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value (seconds)." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the timer." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" />
                                                <Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="10" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds). The box output will be stimulated at this period." id="6" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="10" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="14" indexofinput="2" outputowner="9" indexofoutput="3" />
                                            <Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="EndOfBehavior" index="30" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="bug audio" robot="" id="1" tooltip="The wait that can be stopped immediately and reset at any time.&#x0A;&#x0A;Stopping the box won&apos;t output a signal.&#x0A;*** ref box in: ./4_localize/Time/Wait/ExampleWait.xar ***&#x0A;*** last modification date(svn): Version it! ***" bitmap_expanded="1" plugin="" x="81" y="270">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;
  
  def onUnload(self):
    self.onInput_onStop();
    
  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything
  
  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self):
    self.startTimer( self.getParameter("timeout") );
  
  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="timeout" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="AnimSkipByUser" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="135" y="134">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="apologizeForPlayingOneBehavior" robot="" id="1" tooltip="generates the sentence to say as an apology when a behavior is skipped by the user" bitmap_expanded="1" plugin="" x="118" y="157">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import random
import behaviordata

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        
    def pickAccordingToLangage(self, sFrench, sEnglish):
        self.tts = ALProxy("ALTextToSpeech")
        sDefaultLang = self.tts.getLanguage()
        if (sDefaultLang == "French"):
            return (sFrench)
        elif (sDefaultLang == "English"):
            return (sEnglish)
        else:
            return (sEnglish)   

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_inputBehaviorName(self):
        p = behaviordata.extractedData.getValue( "last_behavior_name" );
        self.log("************************************************************************ %s **********************************************" % p)    
        sentenceFR = random.choice(["pardon si je te dérange avec", "pardon si je t'ennuie avec", "désolé si je t'ai embêté avec les histoires sur", "d'accord, j'arrête de t'embêter avec" , "oké j'arrête de t'ennuyer avec", "je vois que ça ne te plait pas mes histoires sur"])
        sentenceEN = random.choice(["sorry for bothering you with", "I'm going to stop talking about", "sorry, I didn't know I was annoying you by talking about"])
        
        wordFR = ""
        wordEN = ""
        
        if "Birthdays" in p:
            wordFR = random.choice(["les dates d'anniversaire","les anniversaires", "les fêtes"])
            wordEN = random.choice(["birthdays"])
        elif "BatteryLow" in p:
            wordFR = random.choice(["mon niveau de batterie","à quel point je suis chargé","combien j'ai de charge", "combien de temps je devrais tenir"])
            wordEN = random.choice(["my battery level"])
        elif "ChuckNorris" in p:
            wordFR = random.choice(["tcheuk norrice", "l'illustre tcheuk norrice"])
            wordEN = random.choice(["chuck norris"])
        elif "Citation" in p:
            wordFR = random.choice(["des répliques mythiques", "des citations", "des phrases pleine de sagesse"])
            wordEN = random.choice(["quotes"])
        elif "DictonDuJour" in p:
            wordFR = random.choice(["ce que disent les sages","le dicton du jour"])
            wordEN = "day saying"
        elif "NoConnection" in p:
            wordFR = random.choice(["la connexion", "mes capacités une fois connecté"])
            wordEN = "connection"
        elif "Saint" in p:
            wordFR = random.choice(["le saint du jour", "la fête du jour" , "les personnes à célébrer aujourd'hui"])
            wordEN = "today's saint"
        elif "VDM" in p:
            wordFR = random.choice(["ma vie" , "ce qui se passe dans ma vie", "ce qui m'est arrivé", "ma journée", "mon quotidien"])
            wordEN = random.choice(["my life", "what happened to me", "today", "my everyday life"])
        elif "WeatherForecast" in p:
            wordFR = random.choice(["la météo","le temps qu'il fait", "les prévisions météo" , "les températures"])
            wordEN = random.choice(["the weather"])
        elif ("HelloHuman" in p) or ("DescribeHour" in p) or ("Flying" in p):
            sentenceFR = random.choice(["pardon si je t'ai dérangé, je voulais juste faire la conversation", "excuse moi si je dérange, c'était pour échanger deux trois mots", "d'accord, j'arrête avec ça si ça t'ennuie"])
            sentenceEN = random.choice(["sorry if I bother you, I'm getting bored", "I'm going to stop talking, I know I can be very annoying sometimes"])
        elif ("DarknessDetectionWhenSitting" in p) or ("DarknessDetectionWhenStanding" in p) :
            sentenceFR = random.choice(["pardon si je t'ai dérangé,mais j'ai peur du noir", "désolé le noir m'angoisse, mais je vais essayer de me contrôler. j'arrête avec ça", "d'accord, j'arrête avec ça si ça t'ennuie", "là d'où je viens il ne fait jamais noir c'est pour ça que je panique, mais j'arrête si ça te dérange"])
            sentenceEN = random.choice(["sorry if I bother you, darkness scares me", "I'm afraid of darkness, sorry for my reaction, I'm going to stop", "sorry, I know I can be very fearful sometimes"])
        elif ("SittingDance" in p) or ("StandingDance" in p) :
            sentenceFR = random.choice(["tu fais ton rabat joie? d'accord j'arrête de dancer", "désolé si je te dérange avec mes chorégraphies, j'arrête avec ça", "je vois que tu es jaloux de mon déhanché, j'arrête"])
            sentenceEN = random.choice(["ok ok, I'll stop dancing if that's what you want", "sorry if I bothered you with my sexy dance", "I see, you're envious. I know I'm too hot when I dance, I can understand that you feel threatened"])
        elif ("Toy" in p ):
            sentenceFR = random.choice(["désolé je n'avais pas compris que je te dérangeais avec mon jouet, j'arrête", "c'est vrai que ça peut etre embêtant de me voir jouer avec mon tétraèdre"])
            sentenceEN = random.choice(["ok ok, I'll stop playing if that's what you want", "sorry if I bothered you with my toy", "I see, you're envious. no one has this clever toy grapping technique"])
        elif ("Explore" in p):
            sentenceFR = random.choice(["désolé je n'avais pas compris que je te dérangeais en me promenant, j'arrête", "c'est vrai que quand je marche je fais beaucoup de bruit, j'arrête","je suis d'accord que mes bruits de pas peuvent etre embêtant, mais j'avais besoin de mes dégourdir les jambes"])
            sentenceEN = random.choice(["you gave me the permission to go anywhere I wanted to, but I 'll stop if it bothers you", "sorry if I bothered you with my noisy steps", "I'm sorry I thought you told me to go any whereI want, I'm going to stop"])
        elif ("Story" in p):
            sentenceFR = random.choice(["désolé je n'avais pas compris que je te dérangeais en te racontant ma vie", "c'est vrai que je suis pas forcément très intéressant"])
            sentenceEN = random.choice(["sorry if I bothered you with my story", "sorry if I bothered you with my boring life"])
        elif ("Pee" in p):
            sentenceFR = random.choice(["désolé je n'avais pas vu que tu étais la", "désolé, mais j'ai trop envie"])
            sentenceEN = random.choice(["sorry if I haven't seen you", "sorry I'm forced too"])            
        else:
            sentenceFR = random.choice(["désolé je n'avais pas compris que je te dérangeais, j'arrête"])
            sentenceEN = random.choice(["sorry if I bothered you"])
            wordFR = ""
            wordEN = ""
        self.apology = self.pickAccordingToLangage(sentenceFR,sentenceEN)+" "+self.pickAccordingToLangage(wordFR,wordEN)+"."
        self.outputApology(self.apology)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="inputBehaviorName" type="1" type_size="1" nature="2" inner="0" tooltip="name of the behavior launched" id="2" />
                                                                    <Output name="outputApology" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                </Box>
                                                                <Box name="SayTextPrerender_ref" robot="" id="2" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.1" bitmap_expanded="1" plugin="" x="294" y="151">
                                                                    <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# SayTextPrerender - v1.1
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared();            
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking();
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                    <Output name="output_onPrepared" type="1" type_size="1" nature="2" inner="0" tooltip="the sound is prepared and ready to be launched" id="5" />
                                                                    <Output name="output_onStartSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak" id="6" />
                                                                    <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking" id="7" />
                                                                    <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                                    <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                                    <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                                    <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                                </Box>
                                                                <Box name="StandOrSit" robot="" id="3" tooltip="if excited and at randomly stand up!" bitmap_expanded="1" plugin="" x="447" y="144">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import behaviordata
import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        info = ALProxy( "ALInfo" );
#        self.log( "time stand: %f; time sit: %f" % ( info.getDuration_Standing(), info.getDuration_Sitting() ) );
#        if( 
#                     ( random.random() > 0.2 and ( info.getBodyPosition() == "sitting" or  info.getBodyPosition() == "standing" ) )
#                or  False # behaviordata.isSleeping()
#            ):
#            self.output_dontmove();
#            return;
        if( behaviordata.isItTheMomentToStandup() ):
            self.output_stand();
        else:
            self.output_sit();
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="output_stand" type="1" type_size="1" nature="2" inner="0" tooltip="super excité" id="3" />
                                                                    <Output name="output_sit" type="1" type_size="1" nature="2" inner="0" tooltip="nao is calm" id="4" />
                                                                    <Output name="output_dontmove" type="1" type_size="1" nature="2" inner="0" tooltip="don&apos;t change anything" id="5" />
                                                                </Box>
                                                                <Box name="anim_stand_sorry" robot="" id="4" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="595" y="105">
                                                                    <bitmap>media/images/box/movement/move.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="42" value="-23.7332" />
                                                                                <Key frame="84" value="-29.7977" />
                                                                                <Key frame="102" value="-19" />
                                                                                <Key frame="113" value="17" />
                                                                                <Key frame="124" value="-14" />
                                                                                <Key frame="135" value="-3" />
                                                                                <Key frame="149" value="-4.92434" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="42" value="15.115" />
                                                                                <Key frame="84" value="18.2791" />
                                                                                <Key frame="124" value="-25.8426" />
                                                                                <Key frame="149" value="-27.4246" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="75.9361" />
                                                                                <Key frame="81" value="76.5513" />
                                                                                <Key frame="121" value="84.3736" />
                                                                                <Key frame="146" value="88.5046" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="0.876513" />
                                                                                <Key frame="81" value="0.524946" />
                                                                                <Key frame="121" value="0.498473" />
                                                                                <Key frame="146" value="5.35899" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-37.0927" />
                                                                                <Key frame="81" value="-31.995" />
                                                                                <Key frame="121" value="-100.375" />
                                                                                <Key frame="146" value="-103.978" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-37.8789" />
                                                                                <Key frame="81" value="-38.67" />
                                                                                <Key frame="121" value="-35.6816" />
                                                                                <Key frame="146" value="-31.1113" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-4.57277" />
                                                                                <Key frame="81" value="-4.57277" />
                                                                                <Key frame="121" value="-54" />
                                                                                <Key frame="146" value="-55.2863" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="5.78144" />
                                                                                <Key frame="81" value="5.78144" />
                                                                                <Key frame="121" value="40" />
                                                                                <Key frame="146" value="38.4413" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="82.2691" />
                                                                                <Key frame="77" value="88.2457" />
                                                                                <Key frame="117" value="90.6188" />
                                                                                <Key frame="142" value="95.4528" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="-1.76024" />
                                                                                <Key frame="77" value="-0.705538" />
                                                                                <Key frame="117" value="-1.40867" />
                                                                                <Key frame="142" value="-1.93602" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="51.0627" />
                                                                                <Key frame="77" value="52.5569" />
                                                                                <Key frame="117" value="104.325" />
                                                                                <Key frame="142" value="113.554" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="67.2396" />
                                                                                <Key frame="77" value="57.2199" />
                                                                                <Key frame="117" value="54.1437" />
                                                                                <Key frame="142" value="43.5967" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="-0.529755" />
                                                                                <Key frame="77" value="-0.617646" />
                                                                                <Key frame="117" value="44" />
                                                                                <Key frame="142" value="43.4161" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="12.2414" />
                                                                                <Key frame="77" value="12.2614" />
                                                                                <Key frame="117" value="44" />
                                                                                <Key frame="142" value="42.3213" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="0.353971" />
                                                                                <Key frame="119" value="0.617646" />
                                                                                <Key frame="144" value="0.79343" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="1.40867" />
                                                                                <Key frame="119" value="1.32078" />
                                                                                <Key frame="144" value="3.16651" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-9.40201" />
                                                                                <Key frame="119" value="-6.76526" />
                                                                                <Key frame="144" value="-6.85315" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="6.06212" />
                                                                                <Key frame="119" value="11.863" />
                                                                                <Key frame="144" value="13.7966" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-1.40867" />
                                                                                <Key frame="119" value="-7.20953" />
                                                                                <Key frame="144" value="-7.03374" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-4.74375" />
                                                                                <Key frame="119" value="-3.86483" />
                                                                                <Key frame="144" value="-4.83164" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-7.11683" />
                                                                                <Key frame="119" value="-7.20472" />
                                                                                <Key frame="144" value="-6.50158" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-21.0964" />
                                                                                <Key frame="119" value="-12.9225" />
                                                                                <Key frame="144" value="-12.3951" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="25.5789" />
                                                                                <Key frame="119" value="20.7449" />
                                                                                <Key frame="144" value="19.1628" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-10.1051" />
                                                                                <Key frame="119" value="-10.4567" />
                                                                                <Key frame="144" value="-7.90785" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="3.69386" />
                                                                                <Key frame="119" value="5.3638" />
                                                                                <Key frame="144" value="5.18802" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="anim_sit_sorry" robot="" id="5" tooltip="This box is empty (contains a single motion layer with no motors defined in it) and should be used to create any movement you&apos;d like." bitmap_expanded="1" plugin="" x="596" y="226">
                                                                    <bitmap>media/images/box/icons_appu/naosit.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Timeline fps="25" resources_acquisition="0" size="300" enable="1" start_frame="0" end_frame="-1" scale="10">
                                                                        <watches />
                                                                        <ActuatorList>
                                                                            <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="42" value="-23.7332" />
                                                                                <Key frame="84" value="-29.7977" />
                                                                                <Key frame="102" value="-19" />
                                                                                <Key frame="113" value="17" />
                                                                                <Key frame="124" value="-14" />
                                                                                <Key frame="135" value="-3" />
                                                                                <Key frame="149" value="-4.92434" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="42" value="15.115" />
                                                                                <Key frame="84" value="18.2791" />
                                                                                <Key frame="124" value="-25.8426" />
                                                                                <Key frame="149" value="-27.4246" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="46.8439" />
                                                                                <Key frame="81" value="38.2305" />
                                                                                <Key frame="104" value="55.4573" />
                                                                                <Key frame="146" value="55.4573" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="0.498473" />
                                                                                <Key frame="81" value="0.498473" />
                                                                                <Key frame="104" value="3.33748" />
                                                                                <Key frame="146" value="3.33748" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-37.8837" />
                                                                                <Key frame="81" value="-32.0829" />
                                                                                <Key frame="104" value="-119.271" />
                                                                                <Key frame="146" value="-119.271" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-49.5685" />
                                                                                <Key frame="81" value="-47.6349" />
                                                                                <Key frame="104" value="-41.2188" />
                                                                                <Key frame="146" value="-41.2188" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="-4.57277" />
                                                                                <Key frame="81" value="-4.57277" />
                                                                                <Key frame="104" value="-54" />
                                                                                <Key frame="146" value="-55.2863" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="39" value="5.78144" />
                                                                                <Key frame="81" value="5.78144" />
                                                                                <Key frame="104" value="40" />
                                                                                <Key frame="146" value="38.4413" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="58.4504" />
                                                                                <Key frame="77" value="45.6182" />
                                                                                <Key frame="100" value="65.3938" />
                                                                                <Key frame="142" value="65.3938" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="-0.79343" />
                                                                                <Key frame="77" value="-1.67235" />
                                                                                <Key frame="100" value="-1.32078" />
                                                                                <Key frame="142" value="-1.32078" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="44.5587" />
                                                                                <Key frame="77" value="34.9785" />
                                                                                <Key frame="100" value="119.496" />
                                                                                <Key frame="142" value="119.496" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="80.7749" />
                                                                                <Key frame="77" value="79.2807" />
                                                                                <Key frame="100" value="59.4172" />
                                                                                <Key frame="142" value="59.4172" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="-0.529755" />
                                                                                <Key frame="77" value="-0.617646" />
                                                                                <Key frame="100" value="44" />
                                                                                <Key frame="142" value="43.4161" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="35" value="12.2414" />
                                                                                <Key frame="77" value="12.2614" />
                                                                                <Key frame="100" value="44" />
                                                                                <Key frame="142" value="42.3213" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-19.7732" />
                                                                                <Key frame="119" value="-18.2791" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-17.2244" />
                                                                                <Key frame="119" value="3.60596" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-94.3054" />
                                                                                <Key frame="119" value="-90.5261" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="39.9004" />
                                                                                <Key frame="119" value="26.8925" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="52.8695" />
                                                                                <Key frame="119" value="52.8695" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-2.81013" />
                                                                                <Key frame="119" value="-2.107" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="5.53958" />
                                                                                <Key frame="119" value="-4.65586" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="-91.7614" />
                                                                                <Key frame="119" value="-90.1793" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="34.1923" />
                                                                                <Key frame="119" value="23.5574" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="53.4029" />
                                                                                <Key frame="119" value="45.5303" />
                                                                            </ActuatorCurve>
                                                                            <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" alwaysVisible="0">
                                                                                <Key frame="79" value="0.178188" />
                                                                                <Key frame="119" value="3.16651" />
                                                                            </ActuatorCurve>
                                                                        </ActuatorList>
                                                                    </Timeline>
                                                                </Box>
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="6" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Logbug" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="277" y="274">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        altools.logToFile( "anim_behavior_skip_by_user: synthese audio timeout bug?" );
        ALLeds.fadeRGB( 'FaceLeds', 0xFF0000, 0.02 );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="GotoReinit" robot="" id="4" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="406" y="134">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="5" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="561" y="134">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="InformLifeStep_p" robot="" id="6" tooltip="Inform the ALLife module of the current step" bitmap_expanded="1" plugin="" x="133" y="29">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.life.updateStep( 0 );

    def onInput_onStart(self):
        self.life.updateStep( self.getParameter( 'nNumStep' ) );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nNumStep" inherits_from_parent="0" content_type="1" value="7" default_value="0" min="0" max="100" tooltip="The step numbers" id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="9" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="295" y="35">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Order" index="50" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="getCurrentOrder_ref" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="93" y="150">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import behaviordata
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );        

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nOrder = self.life.getOrder();
        if( nOrder == altools.const.order_none ):        
            self.output_none();
        elif( nOrder == altools.const.order_sit ):
            self.output_sit();
        elif( nOrder == altools.const.order_stand ):
            self.output_stand();
        elif( nOrder == altools.const.order_freeze_a_little ):
            nParams = 180;
            orderParams = self.life.getOrderParams();
            if( len( orderParams ) > 0 ):
                nParams = orderParams[0];
            self.output_freeze_some_times( nParams );
        elif( nOrder == altools.const.order_sit_and_freeze ):
            self.output_SitAndFreeze();
        elif( nOrder == altools.const.order_stand_and_freeze ):
            self.output_StandAndFreeze();
        else:
            self.output_not_handled( nOrder );
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="output_not_handled" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="output_none" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="output_sit" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="output_stand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="output_freeze_some_times" type="2" type_size="1" nature="2" inner="0" tooltip="output the number of seconds to freeze" id="8" />
                                                <Output name="output_SitAndFreeze" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="output_StandAndFreeze" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="ResetOrder" robot="" id="12" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="413" y="92">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.life.resetOrder();
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="InformLifeStep_p" robot="" id="5" tooltip="Inform the ALLife module of the current step" bitmap_expanded="1" plugin="" x="110" y="32">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.life.updateStep( 0 );

    def onInput_onStart(self):
        self.life.updateStep( self.getParameter( 'nNumStep' ) );
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nNumStep" inherits_from_parent="0" content_type="1" value="8" default_value="0" min="0" max="100" tooltip="The step numbers" id="4" />
                                            </Box>
                                            <Box name="AutonomousLife_LogVar_p" robot="" id="9" tooltip="Log internal variable from time to time" bitmap_expanded="1" plugin="" x="272" y="38">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/multitools.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import altools
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        pass
        
    def onInput_onStart(self):
        time.sleep( self.getParameter( 'rDelay' ) );
        behaviordata.autonomousLife_LogVar();        
        self.onStopped();
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Parameter name="rDelay" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="100000" tooltip="Delay in seconds before log" id="4" />
                                            </Box>
                                            <Box name="Text Edit" robot="" id="6" tooltip="Transmits the text you entered when the input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="93" y="338">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ATTENTION pour l'instant on ne gere que l'ordre d'asseyage!")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>ATTENTION pour l&apos;instant on ne gere que l&apos;ordre d&apos;asseyage!</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="Wait" robot="" id="3" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="384" y="218">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Box name="GotoReinit" robot="" id="4" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="541" y="104">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="7" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="671" y="88">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="Sitting" robot="" id="8" tooltip="# NaoLibrary-Launcher&#x0A;# v 1.02&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal parameters and output value." bitmap_expanded="1" plugin="" x="254" y="219">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# NaoLibrary-Launcher
#  v 1.02
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        self.bStarted = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart( self, inputData ):
        strBeName = self.boxName;
        self.onStartBehavior( strBeName, inputData );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName ):
        self.onStartBehavior( strBeName, None );    
        
    def onStartBehavior( self, strBeName, inputData ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        self.log( "%s: starting behavior: '%s'" % (self.boxName, self.strBehaviorName ) );
        if( self.bStarted ):
            strMsg = "%s: starting behavior: '%s' => already started => nothing" % (self.boxName, self.strBehaviorName );
            self.log( strMsg );
            print( strMsg );
            return;

        self.bStarted = True;

        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );
        
        # get parameters from box parameters
        listBoxParams = self.getParametersList();
        allParams = [];
        for param_name in listBoxParams:
            if( param_name.find( "NaoLibrary-Launcher" ) == -1 ):
                allParams.append( [param_name, self.getParameter( param_name ) ] );
        
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), allParams );
        
        # add value from box input data
        ALMemory.insertData( naolibrary.xarLoader.getVarName_InputData( self.strBehaviorName ), inputData );        
        
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName, rTimeOutInSec = self.getParameter("NaoLibrary-Launcher_timeout") );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.bStarted = False;
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.bStarted = False;        
        self.onStopped();

    def onInput_onStop(self):
        if( self.bStarted ):
            strBeName = self.strBehaviorName;
            self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
            naolibrary.xarLoader.stop( self.strBehaviorName );
            self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );
# NaoLibrary-Launcher - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="6" />
                                                <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="7" />
                                                <Parameter name="NaoLibrary-Launcher_timeout" inherits_from_parent="0" content_type="2" value="30" default_value="3600" min="0" max="1e+17" tooltip="A timeout value for executing the underlying behavior.&#x0A;&#x0A;(value in seconds)" id="8" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="100" tooltip="" id="9" />
                                            </Box>
                                            <Box name="Sitting" robot="" id="10" tooltip="# NaoLibrary-Launcher&#x0A;# v 1.02&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal parameters and output value." bitmap_expanded="1" plugin="" x="507" y="213">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# NaoLibrary-Launcher
#  v 1.02
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        self.bStarted = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart( self, inputData ):
        strBeName = self.boxName;
        self.onStartBehavior( strBeName, inputData );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName ):
        self.onStartBehavior( strBeName, None );    
        
    def onStartBehavior( self, strBeName, inputData ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        self.log( "%s: starting behavior: '%s'" % (self.boxName, self.strBehaviorName ) );
        if( self.bStarted ):
            strMsg = "%s: starting behavior: '%s' => already started => nothing" % (self.boxName, self.strBehaviorName );
            self.log( strMsg );
            print( strMsg );
            return;

        self.bStarted = True;

        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );
        
        # get parameters from box parameters
        listBoxParams = self.getParametersList();
        allParams = [];
        for param_name in listBoxParams:
            if( param_name.find( "NaoLibrary-Launcher" ) == -1 ):
                allParams.append( [param_name, self.getParameter( param_name ) ] );
        
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), allParams );
        
        # add value from box input data
        ALMemory.insertData( naolibrary.xarLoader.getVarName_InputData( self.strBehaviorName ), inputData );        
        
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName, rTimeOutInSec = self.getParameter("NaoLibrary-Launcher_timeout") );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.bStarted = False;
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.bStarted = False;        
        self.onStopped();

    def onInput_onStop(self):
        if( self.bStarted ):
            strBeName = self.strBehaviorName;
            self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
            naolibrary.xarLoader.stop( self.strBehaviorName );
            self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );
# NaoLibrary-Launcher - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="6" />
                                                <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="7" />
                                                <Parameter name="NaoLibrary-Launcher_timeout" inherits_from_parent="0" content_type="2" value="60" default_value="3600" min="0" max="1e+17" tooltip="A timeout value for executing the underlying behavior.&#x0A;&#x0A;(value in seconds)" id="8" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="100" tooltip="" id="9" />
                                            </Box>
                                            <Box name="Standing" robot="" id="2" tooltip="# NaoLibrary-Launcher&#x0A;# v 1.02&#x0A;&#x0A;Execute a behavior found on Nao, with optionnal parameters and output value." bitmap_expanded="1" plugin="" x="270" y="114">
                                                <bitmap>media/images/box/icons_appu/shortcut.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# NaoLibrary-Launcher
#  v 1.02
import altools
import naolibrary

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bm = ALProxy( "ALBehaviorManager" );
        self.strBehaviorName = self.boxName;
        self.BIND_PYTHON( self.getName(),"myDataChangedIntermediary" );

    def onLoad(self):
        #~ puts code for box initialization here
        self.bStarted = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart( self, inputData ):
        strBeName = self.boxName;
        self.onStartBehavior( strBeName, inputData );
        
    def onInput_onStartWithSpecificBehavior( self, strBeName ):
        self.onStartBehavior( strBeName, None );    
        
    def onStartBehavior( self, strBeName, inputData ):
        self.strBehaviorName = naolibrary.getTotalName( strBeName );
        self.log( "%s: starting behavior: '%s'" % (self.boxName, self.strBehaviorName ) );
        if( self.bStarted ):
            strMsg = "%s: starting behavior: '%s' => already started => nothing" % (self.boxName, self.strBehaviorName );
            self.log( strMsg );
            print( strMsg );
            return;

        self.bStarted = True;

        strRet = naolibrary.xarLoader.prepare( self.strBehaviorName );
        
        # get parameters from box parameters
        listBoxParams = self.getParametersList();
        allParams = [];
        for param_name in listBoxParams:
            if( param_name.find( "NaoLibrary-Launcher" ) == -1 ):
                allParams.append( [param_name, self.getParameter( param_name ) ] );
        
        ALMemory.insertData( naolibrary.xarLoader.getVarName_Params( self.strBehaviorName ), allParams );
        
        # add value from box input data
        ALMemory.insertData( naolibrary.xarLoader.getVarName_InputData( self.strBehaviorName ), inputData );        
        
        ALMemory.subscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName(), "", "myDataChangedIntermediary" );        
        strRet = naolibrary.xarLoader.launch( self.strBehaviorName, rTimeOutInSec = self.getParameter("NaoLibrary-Launcher_timeout") );
        self.log( "%s: runBehavior return '%s'" % ( self.boxName, str( strRet ) ) );        
        try:
            retValCancel = ALMemory.getData( naolibrary.xarLoader.getVarName_Cancel( self.strBehaviorName ) );
            if( retValCancel ):
                self.bStarted = False;
                self.onStopped();
                return;
            retVal = ALMemory.getData( naolibrary.xarLoader.getVarName_Results( self.strBehaviorName ) );
        except:
            self.log( "%s: WARNING: no return value ? (BeName: '%s')" % ( self.boxName, strBeName ) );
            retVal = [];
        ALMemory.unsubscribeToMicroEvent( naolibrary.xarLoader.getVarName_Intermediary( self.strBehaviorName ), self.getName() );
        self.output_results( retVal );
        self.bStarted = False;        
        self.onStopped();

    def onInput_onStop(self):
        if( self.bStarted ):
            strBeName = self.strBehaviorName;
            self.log( "%s: %s: stopping '%s'" % ( self.boxName, str( time.time() ), strBeName ) );        
            naolibrary.xarLoader.stop( self.strBehaviorName );
            self.log( "%s: %s: '%s' stopped" % ( self.boxName, str( time.time() ), strBeName ) );
        
    def myDataChangedIntermediary(self, pDataName, pValue, pMessage):
        print( "%s: intermediary: %s" % ( self.boxName, str( pValue  ) ) );
        self.output_intermediate( pValue );
# NaoLibrary-Launcher - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStartWithSpecificBehavior" type="3" type_size="1" nature="1" inner="0" tooltip="Start it with a specific behavior, you should previously post  the parameters manually." id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_intermediate" type="0" type_size="1" nature="2" inner="0" tooltip="Output some intermediate information at every moments during the execution of the sub process" id="6" />
                                                <Output name="output_results" type="0" type_size="1" nature="2" inner="0" tooltip="Output the final results of the sub process" id="7" />
                                                <Parameter name="NaoLibrary-Launcher_timeout" inherits_from_parent="0" content_type="2" value="30" default_value="3600" min="0" max="1e+17" tooltip="A timeout value for executing the underlying behavior.&#x0A;&#x0A;(value in seconds)" id="8" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="100" tooltip="" id="9" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="9" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                                            <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="7" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Freeze" index="80" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="SayTextPrerender_ref" robot="" id="9" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.22 - altools" bitmap_expanded="1" plugin="" x="469" y="90">
                                                <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# SayTextPrerender
# v1.22 - altools
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
        if( p == None ):
            self.output_onStopSpeaking(); # on le fait ca ou pas ?
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        rLength = None;
        if( self.getParameter( "bWithLight" ) ):
            rLength = altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            rLength = altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared( rLength );
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking( rLength );
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ), bDirectPlay = self.getParameter( 'bDirectPlay' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );
                
# SayTextPrerender - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                <Output name="output_onPrepared" type="2" type_size="1" nature="2" inner="0" tooltip="The sound is prepared and ready to be launched.&#x0A;The length of the speak is outputted." id="5" />
                                                <Output name="output_onStartSpeaking" type="2" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak.&#x0A;The length of the speak is outputted." id="6" />
                                                <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking." id="7" />
                                                <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                <Parameter name="bDirectPlay" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="Launch the speak sound without a latency of 1-2 sec (directly) (automatically enabled when speaking with light)." id="12" />
                                            </Box>
                                            <Box name="Enter name here" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="145" y="89">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "Autonomous life freezed."
		sFrench = "Vie autonome gelée."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <english>Autonomous life freezed.</english>
                                                    <french>Vie autonome gelée.</french>
                                                    <spanish></spanish>
                                                    <italian></italian>
                                                    <german></german>
                                                    <chinese></chinese>
                                                    <polish></polish>
                                                    <korean></korean>
                                                    <language>0</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer2" mute="0">
                                    <BehaviorKeyframe name="Leds" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LedsAutonomous_ref" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="107" y="55">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="BrainSlightIdle w excitement" robot="" id="1" tooltip="A smooth and slow leds animation" bitmap_expanded="1" plugin="" x="135" y="73">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import time

import abcdk.profiler as profiler

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        nNum = 0;
        nNumMax = 12;
        nPrevNum = nNumMax - 1;

        dcm = ALProxy( "DCM" );
        
        while( not self.bMustStop ):
            timeProfile = profiler.UsageProfilerHelper( "BrainLeds" );
            
            if( not behaviordata.isDeepSleeping() ):
                rExcitement = behaviordata.extractedData.getValue( "excitement" );
                rTimeMax = 4.;
                if( rExcitement > 0.0001 ):
                    rTime = altools.limitRange( ( 1. - rExcitement )*rTimeMax, 0.1, rTimeMax );
                    rLight = altools.limitRange( rExcitement, 0.1, 0.5 );
                else:
                    rTime = rTimeMax;
                    rLight = 0.1;
                
                # light next leds
                strDeviceName = altools.getTactilLedName( nNum );
                nDcmTime = dcm.getTime(int(rTime*1000));
                nDcmTimeOff = dcm.getTime(int(rTime*1000)*2);
                dcm.set( [ strDeviceName, "Merge",  [[rLight, nDcmTime ]] ] );
                # off past leds
                strDeviceName = altools.getTactilLedName( nPrevNum );
                dcm.set( [ strDeviceName, "Merge",  [[0.0, nDcmTimeOff ]] ] );
                
                nPrevNum = nNum;
                nNum += 1;
                if( nNum >= nNumMax ):
                    nNum = 0;
                
                timeProfile = None;
                time.sleep( rTime / 4 );
            else:
                timeProfile = None;            
                altools.setBrainLedsIntensity( 0., 3000 ); # light off       

        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="autonomousChestLed_ref" robot="" id="16" tooltip="animation of the chest leds:&#x0A;&#x0A;- Chaleur de l&apos;articulation la plus chaude.&#x0A;- Etat de la batterie.&#x0A;- Excitation&#x0A;- Avertissement de Notification.&#x0A;&#x0A;(a nearly most efficient box to do that)" bitmap_expanded="1" plugin="" x="145" y="205">
                                                                    <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import behaviordata

import abcdk.profiler as profiler

class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.bMustStop = False;
        self.bIsRunning = False;
        self.rTemperatureNormalise = 0.;
        self.rBatteryNormalise = 0.;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution
        
    def getTempNormalise( self ):
        rValMax = altools.getBodyHigherTemperature();
        
        rMin = 40.; # these value could be overtaken, na problem.
        rMax = 80.; # it can over
        
        rValMax = (rValMax - rMin) / (rMax - rMin); # normalise to [0,1]
        if( rValMax < 0. ):
            rValMax = 0.;
        elif( rValMax > 1. ):
            rValMax = 1.;
            
        return rValMax;
# getTempNormalise - end
            
    def getBatteryNormalise( self ):
        "return normalised battety state: 0: empty; 1: full"
        rVal = ALMemory.getData( "ALSentinel/BatteryLevel", 0 );
        rVal = rVal / (5.); # normalise to [0,1]
        if( rVal < 0. ):
            rVal = 0.;
        elif( rVal > 1. ):
            rVal = 1.;
            
#        rVal = 1. - rVal; # invert to have 0: empty # no: already done!
        return rVal;
# getBatteryNormalise -end

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        strLedGroupName = "ChestLeds" # "FaceLeds"; # "ChestLeds";
        
        while( not self.bMustStop ):
            timeProfile = profiler.UsageProfilerHelper( "ChestLed" );
            
            if( altools.getCurrentNotification() == "" ):
                # update value
                self.rTemperatureNormalise = self.getTempNormalise();
                self.rBatteryNormalise = self.getBatteryNormalise();
                rExcitement = behaviordata.extractedData.getValue( 'excitement', 0.5 );
                
#                self.log( "rTemperatureNormalise: %f; rBatteryNormalise: %f" % (self.rTemperatureNormalise, self.rBatteryNormalise) );
                
                # update leds
                nColorMin = 0x00FF # green or blue - cold
                nColorMed = 0xFFFF00 # yellow - average
                nColorMax = 0xFF0000 # red - hot
                nColor = 0;
                if( self.rTemperatureNormalise <= 0.5 ):
                    nColor = altools.interpolateColor( nColorMin, nColorMed, self.rTemperatureNormalise * 2. );
                else:
                    nColor = altools.interpolateColor( nColorMed, nColorMax, ( self.rTemperatureNormalise - 0.5 ) * 2. );
                rPeriod = 0.2 + 1.2 * (1. - rExcitement);
                rIntensity = self.rBatteryNormalise + 0.1;
                nColor = altools.darkenColor( nColor, rIntensity );
                nColorHalf = altools.darkenColor( nColor, rIntensity*0.2 );
                nColorZero = altools.darkenColor( nColor, 0.05 );
#                self.log( "nColor: 0x%x, rPeriod: %f" % ( nColor, rPeriod ) );
                timeProfile = None;
                ALLeds.fadeRGB( strLedGroupName, nColor, rPeriod*0.5 );
                ALLeds.fadeRGB( strLedGroupName, nColorHalf, rPeriod*0.5 );
                ALLeds.fadeRGB( strLedGroupName, nColor, rPeriod*0.5 );
                ALLeds.fadeRGB( strLedGroupName, nColorZero, rPeriod*1.3 );
#                time.sleep( rPeriod*0.25 );
            else:
                ALLeds.fadeRGB( strLedGroupName, 0xFFFFFF, 0.4 );
                ALLeds.fadeRGB( strLedGroupName, 0x0000FF, 0.4 );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_setNotificationState(self, rVal ):
        if( rVal > 0.5 ):
            altools.setCurrentNotification( "Tu as un mémo vocal, appuie une seconde fois pour lancer l'application Memo" );
            altools.setCurrentNotification_ApplicationName( "memo" );
        else:
            altools.setCurrentNotification( "" );
        
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="setNotificationState" type="2" type_size="1" nature="1" inner="0" tooltip="Set or reset the notification state" id="4" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="NoLeds" index="20" bitmap="">
                                        <Diagram scale="-1" />
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="LedsFreeze" index="80" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="LedsFreeze" robot="" id="4" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;v1.0" bitmap_expanded="1" plugin="" x="269" y="78">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Template_While
# v1.0
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            ALLeds.fadeRGB( "FaceLeds", 0x0, 0.15 );
            ALLeds.fadeRGB( "FaceLeds", 0xFFFFFF, 0.15 );            
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.7" default_value="1" min="0" max="100000" tooltip="period in seconds" id="5" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer3" mute="0">
                                    <BehaviorKeyframe name="BackgroundTask" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="GotoFreeze" robot="" id="1" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="335" y="128">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(80)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>80</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="5" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="488" y="132">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="FreezeAtCondition" robot="" id="2" tooltip="Freeze life on some conditions.&#x0A;&#x0A;should be in action, but must turn even when no action... pfff...&#x0A;" bitmap_expanded="1" plugin="" x="132" y="159">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# Template_While
# v1.0
import time
import altools
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.life = ALProxy( "ALLife" );
        self.info = ALProxy( "ALInfo" );
        self.bDebug = False;
        
    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.bFreezeWhenProgrammed = self.life.isFreezeWhenProgrammed();

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );
        
        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;
        
        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            if( self.life.getState() == altools.const.state_stopped ):
                self.output_stopped();
            else:
                try:
                    bMenu = ALMemory.getData( "SystemMenuIsActive" );
                except:
                    bMenu = False;
                bStopAtChoregraphe = self.bFreezeWhenProgrammed and self.info.getChoregrapheConnected();
                bNewStateFreeze = bMenu or bStopAtChoregraphe or self.life.getState() == altools.const.state_freeze;
                nNumFrame = choregraphetools.boxGetFrameNumber( self.getName() );
                if( self.bDebug ):
                    if( nNumFrame == None ):
                        nNumFrame = -421;
                    self.log( "%s: bMenu: %d, bStopAtChoregraphe: %d, bNewStateFreeze: %d, nNumFrame: %d" % ( self.boxName, bMenu , bStopAtChoregraphe, bNewStateFreeze, int( nNumFrame ) ) );                
                if( bNewStateFreeze ):
                    if( nNumFrame < 80 ):
                        self.output_freeze();
                else:
                    if( nNumFrame >= 80 ):
                        self.output_start();
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();    
        self.log( self.boxName + ": start - end" ); 

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        
    def onInput_onSetDebugMode(self):
        self.bDebug = not self.bDebug;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="onSetDebugMode" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="output_start" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="output_freeze" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="output_stopped" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1.2" default_value="1" min="0" max="100000" tooltip="period in seconds" id="9" />
                                            </Box>
                                            <Box name="GotoUnfreeze" robot="" id="7" tooltip="This Box just transmits the number you entered when its Input is stimulated." bitmap_expanded="1" plugin="numberedit_plugin" x="335" y="29">
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>1</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="gotoAndStop" robot="" id="9" tooltip="Stop the timeline parent at the frame index received through input." bitmap_expanded="1" plugin="" x="493" y="31">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, p):
        self.log( "%s: gotoAndStop %d" % ( self.boxName, int( p ) ) );
        ALFrameManager.gotoAndStop(self.parentId, p)

    def onInput_onStop(self):
        ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Parent timeline goes to the given index." id="2" />
                                            </Box>
                                            <Box name="AutonomousLife_DetectArea_ref" robot="" id="4" tooltip="Get the Autonomous Life Area change info." bitmap_expanded="1" plugin="" x="338" y="265">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/area.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.BIND_PYTHON( self.getName(),"myDataChanged" );
        self.strVarName = "Autonomous/Life/Area";

    def onLoad(self):
        #~ puts code for box initialization here
        self.life = ALProxy( "ALLife" );

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        ALMemory.subscribeToMicroEvent( self.strVarName, self.getName(), "", "myDataChanged" );
        # post current value:
        self.myDataChanged( self.strVarName, ALMemory.getData( self.strVarName, 0 ), "" );

    def onInput_onStop(self):
        ALMemory.unsubscribeToMicroEvent( self.strVarName, self.getName() );
        self.onDone() #~ activate output of the box
        
    def myDataChanged(self, pDataName, pValue, pMessage):
        print( "%s: zone: %d" % ( self.boxName, int( pValue ) ) );
        if( pValue == 0 ):
            self.output_stay_sit();
        if( pValue == 1 ):
            self.output_stay_there();
        elif( pValue == 2 ):
            self.output_limited();
        elif( pValue == 3 ):
            self.output_free();]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="The change of state has been made" id="4" />
                                                <Output name="output_stay_sit" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="output_stay_there" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="output_limited" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="output_free" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                            </Box>
                                            <Box name="AutonomousLife_ShowAreaState_ref" robot="" id="8" tooltip="Give the user a visual and audible return from the current area state." bitmap_expanded="1" plugin="" x="487" y="264">
                                                <bitmap>media/images/box/icons_appu/life.png</bitmap>
                                                <bitmap>media/images/box/icons_appu/visualisation.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStay(self):
        pass

    def onInput_onLimited(self):
        pass

    def onInput_onFree(self):
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStaySit" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStayThere" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Input name="onLimited" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Input name="onFree" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="Enter name here" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="146" y="352">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "I'll stay sitted."
		sFrench = "Je vais rester assis."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <english>I&apos;ll stay sitted.</english>
                                                                        <french>Je vais rester assis.</french>
                                                                        <spanish></spanish>
                                                                        <italian></italian>
                                                                        <german></german>
                                                                        <chinese></chinese>
                                                                        <polish></polish>
                                                                        <korean></korean>
                                                                        <language>7</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Enter name here" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="150" y="437">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "I'll stay there."
		sFrench = "Je vais rester la."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <english>I&apos;ll stay there.</english>
                                                                        <french>Je vais rester la.</french>
                                                                        <spanish></spanish>
                                                                        <italian></italian>
                                                                        <german></german>
                                                                        <chinese></chinese>
                                                                        <polish></polish>
                                                                        <korean></korean>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Enter name here" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="151" y="521">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "I'm staying in the corner."
		sFrench = "Je vais rester dans le coin."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <english>I&apos;m staying in the corner.</english>
                                                                        <french>Je vais rester dans le coin.</french>
                                                                        <spanish></spanish>
                                                                        <italian></italian>
                                                                        <german></german>
                                                                        <chinese></chinese>
                                                                        <polish></polish>
                                                                        <korean></korean>
                                                                        <language>0</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="Enter name here" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="localizationbox_plugin" x="156" y="613">
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "I'm totally free."
		sFrench = "Je peux aller partout ou je veux."
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <english>I&apos;m totally free.</english>
                                                                        <french>Je peux aller partout ou je veux.</french>
                                                                        <spanish></spanish>
                                                                        <italian></italian>
                                                                        <german></german>
                                                                        <chinese></chinese>
                                                                        <polish></polish>
                                                                        <korean></korean>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="cyan" robot="" id="6" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="440" y="109">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0x00fbcf")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>0x00fbcf</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                </Box>
                                                                <Box name="Green" robot="" id="5" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="440" y="4">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0x00ff00")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>0x00ff00</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                </Box>
                                                                <Box name="Yellow" robot="" id="7" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="442" y="219">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0xe6f000")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>0xe6f000</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                </Box>
                                                                <Box name="red" robot="" id="8" tooltip="This Box just transmits the text you entered when its Input is stimulated." bitmap_expanded="1" plugin="textedit_plugin" x="449" y="329">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("0xff1000")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>0xff1000</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                                </Box>
                                                                <Box name="FeetColor_ref" robot="" id="10" tooltip="Set a color to the feet" bitmap_expanded="1" plugin="" x="657" y="39">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.time = 1.0
        self.ledName = "FeetLeds"

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self, rColor):
        nColor = int( eval( str( rColor ) ) );
        ALLeds.fadeRGB(self.ledName, nColor, self.time);
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="SayTextPrerender_ref" robot="" id="9" tooltip="Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.22 - altools" bitmap_expanded="1" plugin="" x="482" y="484">
                                                                    <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# SayTextPrerender
# v1.22 - altools
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;
        if( p == None ):
            self.output_onStopSpeaking(); # on le fait ca ou pas ?
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        rLength = None;
        if( self.getParameter( "bWithLight" ) ):
            rLength = altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            rLength = altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared( rLength );
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking( rLength );
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ), bDirectPlay = self.getParameter( 'bDirectPlay' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );
                
# SayTextPrerender - end
pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="output_onPreparing" type="1" type_size="1" nature="2" inner="0" tooltip="Text are being prepared" id="4" />
                                                                    <Output name="output_onPrepared" type="2" type_size="1" nature="2" inner="0" tooltip="The sound is prepared and ready to be launched.&#x0A;The length of the speak is outputted." id="5" />
                                                                    <Output name="output_onStartSpeaking" type="2" type_size="1" nature="2" inner="0" tooltip="Nao begin to speak.&#x0A;The length of the speak is outputted." id="6" />
                                                                    <Output name="output_onStopSpeaking" type="1" type_size="1" nature="2" inner="0" tooltip="Nao has stop speaking." id="7" />
                                                                    <Parameter name="bWithLight" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="use light in eyes to speak" id="8" />
                                                                    <Parameter name="bJustPrepare" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Don&apos;t say the text now, just generate it." id="9" />
                                                                    <Parameter name="bStoreToNonVolatilePath" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="copy the generated file to a non volatile path." id="10" />
                                                                    <Parameter name="nNumLanguage" inherits_from_parent="0" content_type="1" value="-1" default_value="-1" min="-1" max="30" tooltip="To speak with a different speak language, specify it there (default -1: current one)" id="11" />
                                                                    <Parameter name="bDirectPlay" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="Launch the speak sound without a latency of 1-2 sec (directly) (automatically enabled when speaking with light)." id="12" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="3" />
                                                                <Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="3" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="Wait car TextCollision" robot="" id="6" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="85" y="287">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                                            </Box>
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="8" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="4" outputowner="4" indexofoutput="7" />
                                            <Link inputowner="8" indexofinput="5" outputowner="4" indexofoutput="8" />
                                            <Link inputowner="8" indexofinput="3" outputowner="4" indexofoutput="6" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="InitLife" robot="" id="2" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="69" y="61">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                <watches />
                                <BehaviorLayer name="behavior_layer1" mute="0">
                                    <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                        <Diagram scale="-1">
                                            <Box name="SayStatus" robot="" id="15" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="275" y="94">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline fps="10" resources_acquisition="0" size="300" enable="0" start_frame="0" end_frame="-1" scale="10">
                                                    <watches />
                                                    <BehaviorLayer name="behavior_layer1" mute="0">
                                                        <BehaviorKeyframe name="keyframe1" index="1" bitmap="">
                                                            <Diagram scale="-1">
                                                                <Box name="SayStyle" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="86" y="39">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        time.sleep( 4.5 );
        life = ALProxy( "ALLife" );
        altools.speak( life.getStyle() + " style" );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="GetTimeAndDate_p" robot="" id="2" tooltip="gives time and date" bitmap_expanded="1" plugin="" x="250" y="39">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def pickAccordingToLangage(self, sFrench, sEnglish):
        self.tts = ALProxy("ALTextToSpeech")
        sDefaultLang = self.tts.getLanguage()
        if (sDefaultLang == "French"):
            return (sFrench)
        elif (sDefaultLang == "English"):
            return (sEnglish)
        else:
            return (sEnglish)   


    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.hour = int(time.strftime("%H"))
        self.min = int(time.strftime("%M"))
        self.strDay = time.strftime("%A")
        self.rDay = int(time.strftime("%d"))
        self.rMonth = int(time.strftime("%m"))
        self.strMonth = time.strftime("%B")
        if self.rMonth == 1:
            strMonth = "janvier"
        elif self.rMonth == 2:
            strMonth = "fevrier"
        elif self.rMonth == 3:
            strMonth = "mars"
        elif self.rMonth == 4:
            strMonth = "avril"
        elif self.rMonth == 5:
            strMonth = "mai"
        elif self.rMonth == 6:
            strMonth = "juin"
        elif self.rMonth == 7:
            strMonth = "juillet"
        elif self.rMonth == 8:
            strMonth = "aout"
        elif self.rMonth == 9:
            strMonth = "septembre" 
        elif self.rMonth == 10:
            strMonth = "octobre"
        elif self.rMonth == 11:
            strMonth = "novembre"
        elif self.rMonth == 12:
            strMonth = "décembre"            
        if( self.min > 0 ):
            strMinToSay = str( self.min );
        else:
            strMinToSay = "pile";
        strDateFR = "aujourd'hui, on est le %d  %s et il est %d heure %s" % (self.rDay, strMonth,self.hour, strMinToSay)
        #~ if self.rMonth == 1:
            #~ strMonth = "january"
        #~ elif self.rMonth == 2:
            #~ strMonth = "february"
        #~ elif self.rMonth == 3:
            #~ strMonth = "march"
        #~ elif self.rMonth == 4:
            #~ strMonth = "april"
        #~ elif self.rMonth == 5:
            #~ strMonth = "may"
        #~ elif self.rMonth == 6:
            #~ strMonth = "june"
        #~ elif self.rMonth == 7:
            #~ strMonth = "july"
        #~ elif self.rMonth == 8:
            #~ strMonth = "august"
        #~ elif self.rMonth == 9:
            #~ strMonth = "september" 
        #~ elif self.rMonth == 10:
            #~ strMonth = "october"
        #~ elif self.rMonth == 11:
            #~ strMonth = "november"
        #~ elif self.rMonth == 12:
            #~ strMonth = "december"
         
 
        
        if self.rDay == 1:
            strDay = "first"
        elif self.rDay == 2:
            strDay = "second"
        elif self.rDay == 3:
            strDay = "third"
        elif self.rDay == 5 :
            strDay = "fifth"
        elif self.rDay == 8:
            strDay = "eighth"
        elif self.rDay == 21:
            strDay = "twenty forth"
        elif self.rDay == 22:
            strDay = "twenty second"
        elif self.rDay == 23:
            strDay = "twenty third"
        elif self.rDay == 25:
            strDay = "twenty fifth"
        elif self.rDay == 28:
            strDay = "twenty eighth"
        elif self.rDay == 31:
            strDay = "thirty first"
        else:
            strDay = str(self.rDay) + "th"
            
        if( self.min > 0 ):
            strMinToSay = str( self.min );
        else:
            strMinToSay = "o clock";            
        strDateEN =  "today is %s the %s , %d %s" % (self.strMonth, strDay, self.hour, strMinToSay)
        
        self.log(strDateFR)
        self.log(strDateEN)
        strDate = self.pickAccordingToLangage(strDateFR,strDateEN)
        self.onStopped(strDate)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="SayDate" robot="" id="3" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="407" y="39">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import time
import behaviordata
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, strText):
        if( not behaviordata.isAutonomousStyleDemo() ):
            altools.speak( strText );
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Box name="SayDisableStiffness" robot="" id="4" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="558" y="39">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import altools
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        life = ALProxy( "ALLife" );
        if( life.isDisableStiffness() ):
            altools.speak( "Je n'ai pas le droit de bouger." );
        self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList />
                                                </Timeline>
                                            </Box>
                                            <Box name="ResetOrder" robot="" id="12" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="119" y="205">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.life.resetOrder();
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="StartLife" robot="" id="1" tooltip="Enter tooltip here" bitmap_expanded="1" plugin="" x="119" y="313">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.life = ALProxy( 'ALLife' );

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        self.life.start();
        self.onStopped() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="EnsureVolumeRange" robot="" id="3" tooltip="Ensure that sound volume is in a specific range&#x0A;v0.9" bitmap_expanded="1" plugin="" x="106" y="81">
                                                <bitmap>media/images/box/interaction/play_sound.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# EnsureVolumeRange
# v0.9
import abcdk.sound as sound

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        sound.ensureVolumeRange( self.getParameter( "nMinValue" ), self.getParameter( "nMaxValue" ) );
        self.onStopped() #~ activate output of the box

# EnsureVolumeRange - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="nMinValue" inherits_from_parent="0" content_type="1" value="58" default_value="58" min="0" max="100" tooltip="Minimal sound volume (in %)" id="4" />
                                                <Parameter name="nMaxValue" inherits_from_parent="0" content_type="1" value="84" default_value="84" min="0" max="100" tooltip="Maximal sound volume (in %)" id="5" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="15" indexofinput="2" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList />
                            </Timeline>
                        </Box>
                        <Box name="Wait need vars to be setted before" robot="" id="5" tooltip="The wait can be stopped any time, but the box won&apos;t output a signal. You may reset it any time, and it will start over." bitmap_expanded="1" plugin="" x="228" y="15">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tb = False;

    def onUnload(self):
        self.onInput_onStop();

    def triggerOutput( self, rPeriod = 1 ):
        self.timerOutput();
        self.onInput_onStop(); # to clean everything

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel();
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
        self.tb.start();

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Timeout (s)") );

    def onInput_onStop(self):
        if( self.tb ):
            self.tb.cancel();
            self.tb = False;]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang after a certain amount of time.&#x0A;WARNING: not outputted if stopped before time lapse." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.2" default_value="1" min="0" max="5000" tooltip="After how many seconds the box will timeout and stimulate its ouput." id="5" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
